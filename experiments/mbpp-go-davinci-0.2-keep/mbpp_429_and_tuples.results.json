{
  "name": "mbpp_429_and_tuples",
  "language": "go_test.go",
  "prompt": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result_tup = append(result_tup, test_tup1[i])\n        }\n    }\n    return result_tup\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    result := make([]interface{}, 0)\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmp2q7jz971_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmp2q7jz971_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmp2q7jz971_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Write your code here\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmps2ha34au_test.go:35: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmps2ha34au_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmps2ha34au_test.go:35: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            res = append(res, test_tup1[i])\n        }\n    }\n    return res\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmp4qm60d4k_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmp4qm60d4k_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmp4qm60d4k_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"The tuples are not of the same length\")\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] && test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3g5noy9z_test.go:16:46: invalid operation: test_tup1[i] && test_tup2[i] (operator && not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i], test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmppjzgnd9f_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[%!s(int=10) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=3)]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmppjzgnd9f_test.go:32: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmppjzgnd9f_test.go:32: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[%!s(int=8) %!s(int=7) %!s(int=9) %!s(int=13) %!s(int=11) %!s(int=14) %!s(int=12) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    result := make([]interface{}, 0)\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpk8l8f6ss_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpk8l8f6ss_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpk8l8f6ss_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i])\n        result = append(result, test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[%!s(int=10) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=3)]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[%!s(int=8) %!s(int=7) %!s(int=9) %!s(int=13) %!s(int=11) %!s(int=14) %!s(int=12) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpyujypbpe_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpyujypbpe_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpyujypbpe_test.go:37: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i])\n        result = append(result, test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[%!s(int=10) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=3)]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpz3v17hxo_test.go:33: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[%!s(int=8) %!s(int=7) %!s(int=9) %!s(int=13) %!s(int=11) %!s(int=14) %!s(int=12) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var and_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            and_tup = append(and_tup, test_tup1[i])\n        }\n    }\n    return and_tup\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var and_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            and_tup = append(and_tup, test_tup1[i])\n        }\n    }\n    return and_tup\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmp9vyv3b_u_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result_tup = append(result_tup, test_tup1[i])\n        }\n    }\n    return result_tup\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i])\n        result = append(result, test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpyyinld71_test.go:33: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[%!s(int=10) %!s(int=5) %!s(int=4) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=9) %!s(int=3)]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpyyinld71_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=8)]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpyyinld71_test.go:33: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[%!s(int=8) %!s(int=7) %!s(int=9) %!s(int=13) %!s(int=11) %!s(int=14) %!s(int=12) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Write your code here\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmp5j34rgo4_test.go:35: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmp5j34rgo4_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmp5j34rgo4_test.go:35: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmvh8vim8_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] && test_tup2[i])\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122715,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqsrp3k7__test.go:12:46: invalid operation: test_tup1[i] && test_tup2[i] (operator && not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpmf4n77kk_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result_tup = append(result_tup, test_tup1[i])\n        }\n    }\n    return result_tup\n}\n\nfunc TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509939,
      "stdout": "--- FAIL: TestAnd_Tuples (0.00s)\n    --- FAIL: TestAnd_Tuples/test_num__0 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=2) %!s(int=1)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__1 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=0)]', got '[]'\n    --- FAIL: TestAnd_Tuples/test_num__2 (0.00s)\n        tmpu4zqjtdu_test.go:34: expected '[%!s(int=0) %!s(int=9) %!s(int=10) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}