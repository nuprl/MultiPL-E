{
  "name": "mbpp_615_average_tuple",
  "language": "go_test.go",
  "prompt": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum/float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_bxzztz2_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp_bxzztz2_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, value := range num.([]int) {\n                sum += float64(value)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, value := range num.([]float64) {\n                sum += value\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpetx9nbmg_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpetx9nbmg_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpetx9nbmg_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n            count++\n        }\n        result = append(result, sum/count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzd84mi7m_test.go:14 +0x16b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpzd84mi7m_test.go:30 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, num := range v.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpml2f_ibg_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpml2f_ibg_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum/count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmptjlr0vjz_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmptjlr0vjz_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnqdhtbll_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpnqdhtbll_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64 = 0\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpy6ngf_2g_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpy6ngf_2g_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpitg4jiyi_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpitg4jiyi_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001680)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp34257oyk_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001680)\n\t/tmp/tmp34257oyk_test.go:35 +0x382\ntesting.tRunner(0xc000001680, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppdf1ujdz_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmppdf1ujdz_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, v := range num.([]interface{}) {\n                sum += v.(float64)\n            }\n            result = append(result, sum/float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp84jk06c4_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp84jk06c4_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, value := range nums {\n        var sum float64\n        for _, num := range value.([]int) {\n            sum += float64(num)\n        }\n        result = append(result, sum / float64(len(value.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppa1wjkme_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmppa1wjkme_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum/float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzw0fqp91_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzw0fqp91_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum/float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpm87d0ipz_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpm87d0ipz_test.go:31 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum/float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvettcaww_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpvettcaww_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count += 1\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc0000e9ed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpk7pvljd2_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpk7pvljd2_test.go:30 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5hvmsup7_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp5hvmsup7_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            sum := 0\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            sum := 0.0\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpemououmr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpemououmr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpemououmr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5hvmsup7_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp5hvmsup7_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []interface{}:\n            var sum float64 = 0\n            for _, v2 := range v.([]interface{}) {\n                sum += v2.(float64)\n            }\n            result = append(result, sum / float64(len(v.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpdjq7kfi6_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpdjq7kfi6_test.go:31 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, vv := range v.([]int) {\n            sum += float64(vv)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp16lcc2mm_test.go:14 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp16lcc2mm_test.go:30 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []interface{}:\n            var sum float64\n            for _, v2 := range v.([]interface{}) {\n                sum += v2.(float64)\n            }\n            result = append(result, sum / float64(len(v.([]interface{}))))\n        default:\n            result = append(result, v.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp8_59x0_q_test.go:16 +0x273\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp8_59x0_q_test.go:33 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpvq3mflmy_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpvq3mflmy_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpvq3mflmy_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnqdhtbll_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpnqdhtbll_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var averages []float64\n    for _, num := range nums {\n        var total float64\n        for _, val := range num.([]interface{}) {\n            total += val.(float64)\n        }\n        averages = append(averages, total / float64(len(num.([]interface{}))))\n    }\n    return averages\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpx418l62c_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpx418l62c_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpm8u7elkn_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpm8u7elkn_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var total float64\n        for _, n := range num.([]interface{}) {\n            total += n.(float64)\n        }\n        result = append(result, total / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp0ajqmh0x_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp0ajqmh0x_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        var count int\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n                count++\n            }\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n                count++\n            }\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2hkavbi5_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2hkavbi5_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2hkavbi5_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpitg4jiyi_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpitg4jiyi_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]interface{}) {\n            sum += vv.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpv0afdnri_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpv0afdnri_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, v := range num.([]interface{}) {\n                sum += v.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001680)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_jq8vz02_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001680)\n\t/tmp/tmp_jq8vz02_test.go:31 +0x382\ntesting.tRunner(0xc000001680, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            result = append(result, average_int(num.([]int)))\n        case []float64:\n            result = append(result, average_float64(num.([]float64)))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpric90zyy_test.go:14:37: undefined: average_int\n/tmp/tmpric90zyy_test.go:16:37: undefined: average_float64\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, average_tuple(v.([]interface{}))...)\n        case int:\n            result = append(result, float64(v.(int)))\n        case float64:\n            result = append(result, v.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2h_mi8cr_test.go:39: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=10) %!s(float64=10) %!s(float64=10) %!s(float64=12) %!s(float64=30) %!s(float64=45) %!s(float64=56) %!s(float64=45) %!s(float64=81) %!s(float64=80) %!s(float64=39) %!s(float64=32) %!s(float64=1) %!s(float64=2) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2h_mi8cr_test.go:39: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=1) %!s(float64=1) %!s(float64=-5) %!s(float64=30) %!s(float64=-15) %!s(float64=56) %!s(float64=81) %!s(float64=-60) %!s(float64=-39) %!s(float64=-10) %!s(float64=2) %!s(float64=3)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2h_mi8cr_test.go:39: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=100) %!s(float64=100) %!s(float64=100) %!s(float64=120) %!s(float64=300) %!s(float64=450) %!s(float64=560) %!s(float64=450) %!s(float64=810) %!s(float64=800) %!s(float64=390) %!s(float64=320) %!s(float64=10) %!s(float64=20) %!s(float64=30) %!s(float64=40)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum/float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpakuqplb__test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpakuqplb__test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            sum := 0\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            sum := 0.0\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptjb9x0rb_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptjb9x0rb_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptjb9x0rb_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, i := range num.([]int) {\n            sum += float64(i)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpfonzu2_l_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpfonzu2_l_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var avg []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        avg = append(avg, sum / float64(len(v.([]int))))\n    }\n    return avg\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp0l0q0xzf_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp0l0q0xzf_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64 = 0\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnec0cg9f_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpnec0cg9f_test.go:31 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpylr1giqx_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpylr1giqx_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, i := range num.([]int) {\n            sum += float64(i)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpfonzu2_l_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpfonzu2_l_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum float64\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpeki3c1vs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpeki3c1vs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpeki3c1vs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpitg4jiyi_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpitg4jiyi_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5hvmsup7_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp5hvmsup7_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001680)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp34257oyk_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001680)\n\t/tmp/tmp34257oyk_test.go:35 +0x382\ntesting.tRunner(0xc000001680, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum/float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp1d3hymf7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp1d3hymf7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp1d3hymf7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var averages []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        averages = append(averages, sum / float64(len(tuple.([]interface{}))))\n    }\n    return averages\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpm2ntsz1k_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmpm2ntsz1k_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]interface{}) {\n            sum += vv.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpv0afdnri_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpv0afdnri_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, vv := range v.([]int) {\n                sum += vv\n            }\n            result = append(result, float64(sum)/float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, vv := range v.([]float64) {\n                sum += vv\n            }\n            result = append(result, sum/float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp1dd_eauq_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp1dd_eauq_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp1dd_eauq_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum/float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzjzsqk_p_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpzjzsqk_p_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        sum := 0.0\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppdf1ujdz_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmppdf1ujdz_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        var count float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n            count += 1\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp7ji94god_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp7ji94god_test.go:30 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpm8u7elkn_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpm8u7elkn_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpitg4jiyi_test.go:15 +0x18e\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpitg4jiyi_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case int:\n            result = append(result, float64(num.(int)))\n        case float64:\n            result = append(result, num.(float64))\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                switch n.(type) {\n                case int:\n                    sum += float64(n.(int))\n                case float64:\n                    sum += n.(float64)\n                }\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp579le03d_test.go:48: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=10.5) %!s(float64=44) %!s(float64=58) %!s(float64=2.5)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp579le03d_test.go:48: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=-1) %!s(float64=23.666666666666668) %!s(float64=-6) %!s(float64=-1.6666666666666667)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp579le03d_test.go:48: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=105) %!s(float64=440) %!s(float64=580) %!s(float64=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n        }\n        result = append(result, sum/float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp308roz5d_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp308roz5d_test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, i := range num.([]int) {\n                sum += i\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, i := range num.([]float64) {\n                sum += i\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmppc8cdka4_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmppc8cdka4_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmppc8cdka4_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpm8u7elkn_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpm8u7elkn_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var averages []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            averages = append(averages, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            averages = append(averages, sum / float64(len(num.([]float64))))\n        }\n    }\n    return averages\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp6kab95u2_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp6kab95u2_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp6kab95u2_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_904bdne_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp_904bdne_test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpw1uz4pc6_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpw1uz4pc6_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, t := range nums {\n        sum := 0.0\n        for _, n := range t.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(t.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123938,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppj7uhhcq_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmppj7uhhcq_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var average []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n        }\n        average = append(average, sum/float64(len(v.([]int))))\n    }\n    return average\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpbo499h5n_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpbo499h5n_test.go:35 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc0000e9ed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp7x0gc_bi_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp7x0gc_bi_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, val := range num.([]int) {\n                sum += float64(val)\n            }\n        case []float64:\n            for _, val := range num.([]float64) {\n                sum += val\n            }\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc000010240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc000010240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc0000a1ed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpn3_q8b3__test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001200)\n\t/tmp/tmpn3_q8b3__test.go:35 +0x382\ntesting.tRunner(0xc000001200, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpl2q7j6ag_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n        }\n        result = append(result, sum/float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp2tamevmz_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmp2tamevmz_test.go:35 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        var count float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n            count += 1\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp4kor1ji9_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmp4kor1ji9_test.go:30 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmptlncnlu__test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, v := range num.([]int) {\n                sum += v\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp2ir9oxen_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpdcl02zk5_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpdcl02zk5_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpdcl02zk5_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var total float64\n        switch num.(type) {\n        case []interface{}:\n            for _, v := range num.([]interface{}) {\n                total += v.(float64)\n            }\n            result = append(result, total / float64(len(num.([]interface{}))))\n        default:\n            result = append(result, num.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp2noqg7om_test.go:16 +0x273\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp2noqg7om_test.go:33 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]interface{}) {\n            sum += vv.(float64)\n        }\n        result = append(result, sum/float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpryzoggtc_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpryzoggtc_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]interface{}) {\n            sum += vv.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123937,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpv0afdnri_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpv0afdnri_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, i := range num.([]int) {\n                sum += float64(i)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, i := range num.([]float64) {\n                sum += i\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5_5iir3l_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5_5iir3l_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5_5iir3l_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64 = 0\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpy6ngf_2g_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpy6ngf_2g_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnqdhtbll_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpnqdhtbll_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        switch v.(type) {\n        case []int:\n            var sum int\n            for _, v2 := range v.([]int) {\n                sum += v2\n            }\n            result = append(result, float64(sum) / float64(len(v.([]int))))\n        case []float64:\n            var sum float64\n            for _, v2 := range v.([]float64) {\n                sum += v2\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp_u6ipqdx_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5hvmsup7_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp5hvmsup7_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v := range v.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(v.([]int))))\n        case []float64:\n            for _, v := range v.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(v.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp0cwahtwb_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp0cwahtwb_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp0cwahtwb_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum/float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_bxzztz2_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp_bxzztz2_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]interface{}) {\n            sum += n.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpzzgb2r5r_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmpzzgb2r5r_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count int\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n                count++\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n                count++\n            }\n        }\n        result = append(result, sum/float64(count))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpd4f09031_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpd4f09031_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpd4f09031_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnqdhtbll_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpnqdhtbll_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpmy0gzru6_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        switch v.(type) {\n        case []int:\n            for _, v1 := range v.([]int) {\n                sum += float64(v1)\n            }\n        case []float64:\n            for _, v1 := range v.([]float64) {\n                sum += v1\n            }\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_ayjk68y_test.go:23 +0x1f9\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp_ayjk68y_test.go:35 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]int) {\n            sum += float64(v2)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpnqdhtbll_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpnqdhtbll_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n            count++\n        }\n        result = append(result, sum/count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmptjlr0vjz_test.go:15 +0x1b3\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmptjlr0vjz_test.go:30 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum/float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpgkrjzfo5_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpgkrjzfo5_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, v := range num.([]interface{}) {\n                sum += v.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        default:\n            result = append(result, num.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp51rx6jnz_test.go:16 +0x273\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp51rx6jnz_test.go:33 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmppqzxmmhl_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000186300)\n\t/tmp/tmppqzxmmhl_test.go:28 +0x382\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n                count++\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n                count++\n            }\n        }\n        result = append(result, sum / count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpjy0m0q6f_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpjy0m0q6f_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpjy0m0q6f_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum)/float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpu25_ffpr_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpu25_ffpr_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpu25_ffpr_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum/float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum/float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpw512q33f_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, v := range num.([]int) {\n                sum += float64(v)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, v := range num.([]float64) {\n                sum += v\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmp5r8_4hdq_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []int:\n            var sum int\n            for _, n := range num.([]int) {\n                sum += n\n            }\n            result = append(result, float64(sum) / float64(len(num.([]int))))\n        case []float64:\n            var sum float64\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpxkj8lfbs_test.go:45: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, tuple := range nums {\n        var sum float64\n        for _, num := range tuple.([]interface{}) {\n            sum += num.(float64)\n        }\n        result = append(result, sum / float64(len(tuple.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpb_gt30ma_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpb_gt30ma_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        for _, n := range num.([]int) {\n            sum += float64(n)\n        }\n        result = append(result, sum / float64(len(num.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5hvmsup7_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000102600)\n\t/tmp/tmp5hvmsup7_test.go:28 +0x382\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        sum := 0.0\n        for _, v := range num.([]interface{}) {\n            sum += v.(float64)\n        }\n        result = append(result, sum / float64(len(num.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc0000e9ed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp7x0gc_bi_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp7x0gc_bi_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, vv := range v.([]int) {\n            sum += float64(vv)\n        }\n        result = append(result, sum / float64(len(v.([]int))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is []interface {}, not []int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvlddnh0y_test.go:13 +0x165\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmpvlddnh0y_test.go:28 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        for _, v2 := range v.([]interface{}) {\n            sum += v2.(float64)\n        }\n        result = append(result, sum / float64(len(v.([]interface{}))))\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010fed0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6uwsuh9t_test.go:14 +0x18b\ncommand-line-arguments_test.TestAverage_Tuple(0xc0001a2300)\n\t/tmp/tmp6uwsuh9t_test.go:28 +0x382\ntesting.tRunner(0xc0001a2300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        var sum float64\n        switch num.(type) {\n        case []int:\n            for _, n := range num.([]int) {\n                sum += float64(n)\n            }\n            result = append(result, sum / float64(len(num.([]int))))\n        case []float64:\n            for _, n := range num.([]float64) {\n                sum += n\n            }\n            result = append(result, sum / float64(len(num.([]float64))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123934,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpaulz6qy7_test.go:44: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, num := range nums {\n        switch num.(type) {\n        case []interface{}:\n            var sum float64\n            for _, n := range num.([]interface{}) {\n                sum += n.(float64)\n            }\n            result = append(result, sum / float64(len(num.([]interface{}))))\n        }\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510640,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\npanic: interface conversion: interface {} is int, not float64 [recovered]\n\tpanic: interface conversion: interface {} is int, not float64\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523800, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.average_tuple(0xc00010ded0, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6cff5pox_test.go:16 +0x1df\ncommand-line-arguments_test.TestAverage_Tuple(0xc000001380)\n\t/tmp/tmp6cff5pox_test.go:31 +0x382\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nfunc average_tuple(nums []interface{}) []float64 {\n    var result []float64\n    for _, v := range nums {\n        var sum float64\n        var count float64\n        switch v.(type) {\n        case []int:\n            for _, v2 := range v.([]int) {\n                sum += float64(v2)\n                count++\n            }\n        case []float64:\n            for _, v2 := range v.([]float64) {\n                sum += v2\n                count++\n            }\n        }\n        result = append(result, sum/count)\n    }\n    return result\n}\n\nfunc TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{10, 10, 10, 12}, []interface{}{30, 45, 56, 45}, []interface{}{81, 80, 39, 32}, []interface{}{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([]interface{}{[]interface{}{1, 1, -5}, []interface{}{30, -15, 56}, []interface{}{81, -60, -39}, []interface{}{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([]interface{}{[]interface{}{100, 100, 100, 120}, []interface{}{300, 450, 560, 450}, []interface{}{810, 800, 390, 320}, []interface{}{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123939,
      "stdout": "--- FAIL: TestAverage_Tuple (0.00s)\n    --- FAIL: TestAverage_Tuple/test_num__0 (0.00s)\n        tmpgb9hky7b_test.go:46: expected '[%!s(float64=30.5) %!s(float64=34.25) %!s(float64=27) %!s(float64=23.25)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__1 (0.00s)\n        tmpgb9hky7b_test.go:46: expected '[%!s(float64=25.5) %!s(float64=-18) %!s(float64=3.75)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\n    --- FAIL: TestAverage_Tuple/test_num__2 (0.00s)\n        tmpgb9hky7b_test.go:46: expected '[%!s(float64=305) %!s(float64=342.5) %!s(float64=270) %!s(float64=232.5)]', got '[%!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN) %!s(float64=NaN)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}