{
  "name": "mbpp_720_add_dict_to_tuple",
  "language": "go_test.go",
  "prompt": "package add_dict_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to add a dictionary to the tuple. The output should be a tuple.\nfunc add_dict_to_tuple(test_tup []interface{}, test_dict map[string]int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAdd_Dict_To_Tuple(t *testing.T) {\n  candidate := add_dict_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{4, 5, 6}, map[string]int{\"MSAM\": 1, \"is\": 2, \"best\": 3}), expected: []interface{}{4, 5, 6, map[string]int{\"MSAM\": 1, \"is\": 2, \"best\": 3}} },\n     { actual: candidate([]interface{}{1, 2, 3}, map[string]int{\"UTS\": 2, \"is\": 3, \"Worst\": 4}), expected: []interface{}{1, 2, 3, map[string]int{\"UTS\": 2, \"is\": 3, \"Worst\": 4}} },\n     { actual: candidate([]interface{}{8, 9, 10}, map[string]int{\"POS\": 3, \"is\": 4, \"Okay\": 5}), expected: []interface{}{8, 9, 10, map[string]int{\"POS\": 3, \"is\": 4, \"Okay\": 5}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return append(test_tup, test_dict)\n}\n",
    "    var new_tup []interface{}\n    for _, val := range test_tup {\n        new_tup = append(new_tup, val)\n    }\n    new_tup = append(new_tup, test_dict)\n    return new_tup\n}\n",
    "    var new_tup []interface{}\n    for _, val := range test_tup {\n        new_tup = append(new_tup, val)\n    }\n    new_tup = append(new_tup, test_dict)\n    return new_tup\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        result = append(result, v)\n    }\n    result = append(result, test_dict)\n    return result\n}\n",
    "    return append(test_tup, test_dict)\n}\n",
    "    // Write your code here\n    return test_tup\n}\n",
    "    // Write your code here\n    return test_tup\n}\n",
    "    test_tup = append(test_tup, test_dict)\n    return test_tup\n}\n",
    "    return append(test_tup, test_dict)\n}\n",
    "    var new_tup []interface{}\n    new_tup = append(test_tup, test_dict)\n    return new_tup\n}\n",
    "    // your code here\n    return test_tup\n}\n",
    "    var new_tup []interface{}\n    for _, v := range test_tup {\n        new_tup = append(new_tup, v)\n    }\n    new_tup = append(new_tup, test_dict)\n    return new_tup\n}\n",
    "    return append(test_tup, test_dict)\n}\n",
    "    // Write your code here\n    return test_tup\n}\n",
    "    test_tup = append(test_tup, test_dict)\n    return test_tup\n}\n",
    "    // Write your code here\n    return test_tup\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    return append(test_tup, test_dict)\n}\n",
    "    return append(test_tup, test_dict)\n}\n",
    "    // Write your code here\n    return test_tup\n}\n"
  ]
}