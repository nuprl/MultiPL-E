{
  "name": "mbpp_731_lateralsurface_cone",
  "language": "go_test.go",
  "prompt": "package lateralsurface_cone_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfunc lateralsurface_cone(r int, h int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestLateralsurface_Cone(t *testing.T) {\n  candidate := lateralsurface_cone\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 12), expected: 204.20352248333654 },\n     { actual: candidate(10, 15), expected: 566.3586699569488 },\n     { actual: candidate(19, 17), expected: 1521.8090132193388 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return 3.14 * float64(r) * float64(h)\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n",
    "    return float64(r * h * 3.14)\n}\n",
    "    return math.Pi * float64(r) * math.Sqrt(float64(r*r + h*h))\n}\n",
    "    return math.Pi * float64(r) * math.Sqrt(float64(r) * float64(r) + float64(h) * float64(h))\n}\n",
    "    return float64(r * h * 3.14)\n}\n",
    "    return math.Pi * float64(r) * math.Sqrt(float64(r*r + h*h))\n}\n",
    "    return 3.14 * float64(r) * float64(h)\n}\n",
    "    return float64(r) * float64(h) * 3.14\n}\n"
  ]
}