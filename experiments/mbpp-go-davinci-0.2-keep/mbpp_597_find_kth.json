{
  "name": "mbpp_597_find_kth",
  "language": "go_test.go",
  "prompt": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted arrays.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == len(arr1) + len(arr2) - 1 {\n        if arr1[len(arr1)-1] > arr2[len(arr2)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if k > len(arr1) {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)-1] {\n            return arr1[len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if arr1[k] > arr2[k] {\n        return find_kth(arr1, arr2[k:], k)\n    } else {\n        return find_kth(arr1[k:], arr2, k)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] > arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr1[k/2-1] > arr2[len(arr2)-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] > arr2[k/2-1] {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if k <= 0 {\n        return -1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n",
    "    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n"
  ]
}