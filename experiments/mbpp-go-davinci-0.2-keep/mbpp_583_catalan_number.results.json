{
  "name": "mbpp_583_catalan_number",
  "language": "go_test.go",
  "prompt": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    if num == 2 {\n        return 2\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var result int = 0\n\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    if num == 2 {\n        return 2\n    }\n    if num == 3 {\n        return 5\n    }\n    if num == 4 {\n        return 14\n    }\n    if num == 5 {\n        return 42\n    }\n    if num == 6 {\n        return 132\n    }\n    if num == 7 {\n        return 429\n    }\n    if num == 8 {\n        return 1430\n    }\n    if num == 9 {\n        return 4862\n    }\n    if num == 10 {\n        return 16796\n    }\n    if num == 11 {\n        return 58786\n    }\n    if num == 12 {\n        return 208012\n    }\n    if num == 13 {\n        return 742900\n    }\n    if num == 14 {\n        return 2674440\n    }\n    if num == 15 {\n        return 9694845\n    }\n    if num == 16 {\n        return 35357670\n    }\n    if num == 17 {\n        return 129644790\n    }\n    if num == 18 {\n        return 477638700\n    }\n    if num == 19 {\n        return 1767263190\n    }\n    if num == 20 {\n        return 6564120420\n    }\n    if num == 21 {\n        return 24466267020\n    }\n    if num == 22 {\n        return 91482563640\n    }\n    if num == 23 {\n        return 343059613650\n    }\n    if num == 24 {\n        return 1289904147324\n    }\n    if num == 25 {\n        return 4861946401452\n    }\n    if num == 26 {\n        return 18367353072152\n    }\n    if num == 27 {\n        return 69533550916004\n    }\n    if num == 28 {\n        return 263747951750360\n    }\n    if num == 29 {\n        return 1002242216651368\n    }\n    if num == 30 {\n        return 3814986502092304\n   \nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122627,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpumm4401s_test.go:103:6: expected '(', found TestCatalan_Number\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 || num == 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    if num == 2 {\n        return 2\n    }\n    if num == 3 {\n        return 5\n    }\n    return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    catalan := 0\n    for i := 0; i < num; i++ {\n        catalan += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return catalan\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var res int = 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    sum := 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122630,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var sum int = 0\n    for i := 0; i < num; i++ {\n        sum += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return sum\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    var result int = 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122628,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n\n    res := 0\n    for i := 0; i < num; i++ {\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    }\n\n    return res\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num == 0 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n    if num <= 1 {\n        return 1\n    }\n    result := 0\n    for i := 0; i < num; i++ {\n        result += catalan_number(i) * catalan_number(num - i - 1)\n    }\n    return result\n}\n\nfunc TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509983,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}