{
  "name": "mbpp_131_reverse_vowels",
  "language": "go_test.go",
  "prompt": "package reverse_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nfunc reverse_vowels(str1 string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestReverse_Vowels(t *testing.T) {\n  candidate := reverse_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"USA\"), expected: \"ASU\" },\n     { actual: candidate(\"ab\"), expected: \"ab\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var str2 string\n    for i := len(str1) - 1; i >= 0; i-- {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 += string(str1[i])\n        }\n    }\n    fmt.Println(str2)\n    var str3 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 += string(str2[0])\n            str2 = str2[1:]\n        } else {\n            str3 += string(str1[i])\n        }\n    }\n    return str3\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    var str_arr = []string{}\n    var vowels_arr = []string{}\n    var result = \"\"\n\n    for _, char := range str1 {\n        str_arr = append(str_arr, string(char))\n        if _, ok := vowels[string(char)]; ok {\n            vowels_arr = append(vowels_arr, string(char))\n        }\n    }\n\n    for i := 0; i < len(str_arr); i++ {\n        if _, ok := vowels[str_arr[i]]; ok {\n            result += vowels_arr[len(vowels_arr) - 1]\n            vowels_arr = vowels_arr[:len(vowels_arr) - 1]\n        } else {\n            result += str_arr[i]\n        }\n    }\n\n    return result\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str2 = []string{}\n    var str3 = []string{}\n    for _, char := range str1 {\n        str2 = append(str2, string(char))\n    }\n    for _, char := range str2 {\n        if contains(vowels, char) {\n            str3 = append([]string{char}, str3...)\n        }\n    }\n    var j = 0\n    for i, char := range str2 {\n        if contains(vowels, char) {\n            str2[i] = str3[j]\n            j++\n        }\n    }\n    return strings.Join(str2, \"\")\n}\n",
    "    // Write your code here\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str2 string\n    var str3 string\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            str2 += string(char)\n        }\n    }\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            str3 += string(str2[len(str2)-1])\n            str2 = str2[:len(str2)-1]\n        } else {\n            str3 += string(char)\n        }\n    }\n    return str3\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str1_runes = []rune(str1)\n    var str1_vowels = []rune{}\n    var str1_vowels_index = []int{}\n    var str1_vowels_index_reverse = []int{}\n    var str1_vowels_reverse = []rune{}\n    var str1_vowels_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse = []int{}\n    var str1_vowels_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index = []int{}\n   ",
    "    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    var str2 string\n    var str3 string\n    for _, c := range str1 {\n        if vowels[string(c)] {\n            str2 += string(c)\n        } else {\n            str3 += string(c)\n        }\n    }\n\n    var str4 string\n    for i := len(str2) - 1; i >= 0; i-- {\n        str4 += string(str2[i])\n    }\n\n    var str5 string\n    for i := 0; i < len(str1); i++ {\n        if vowels[string(str1[i])] {\n            str5 += string(str4[0])\n            str4 = str4[1:]\n        } else {\n            str5 += string(str3[0])\n            str3 = str3[1:]\n        }\n    }\n\n    return str5\n}\n",
    "    var str2 string\n    for _, c := range str1 {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            str2 = string(c) + str2\n        }\n    }\n    var str3 string\n    for _, c := range str1 {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            str3 = str3 + string(str2[0])\n            str2 = str2[1:]\n        } else {\n            str3 = str3 + string(c)\n        }\n    }\n    return str3\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 = str1[i:i+1] + str2\n        }\n    }\n    var str3 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 = str3 + str2[0:1]\n            str2 = str2[1:]\n        } else {\n            str3 = str3 + str1[i:i+1]\n        }\n    }\n    return str3\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str2 = \"\"\n    var str3 = \"\"\n    var str4 = \"\"\n    var str5 = \"\"\n    var str6 = \"\"\n    var str7 = \"\"\n    var str8 = \"\"\n    var str9 = \"\"\n    var str10 = \"\"\n    for _, char := range str1 {\n        str2 = str2 + string(char)\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                str3 = str3 + string(char)\n            }\n        }\n    }\n    for i := len(str3) - 1; i >= 0; i-- {\n        str4 = str4 + string(str3[i])\n    }\n    for _, char := range str2 {\n        str5 = str5 + string(char)\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                str6 = str6 + string(char)\n            }\n        }\n    }\n    for i := len(str6) - 1; i >= 0; i-- {\n        str7 = str7 + string(str6[i])\n    }\n    for _, char := range str5 {\n        str8 = str8 + string(char)\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                str9 = str9 + string(char)\n            }\n        }\n    }\n    for i := len(str9) - 1; i >= 0; i-- {\n        str10 = str10 + string(str9[i])\n    }\n    return str4 + str7 + str10\n}\n",
    "    var str2 string\n    for _, char := range str1 {\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            str2 = string(char) + str2\n        } else {\n            str2 = str2 + string(char)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 = str1[i:i+1] + str2\n        }\n    }\n    var str3 string\n    var j int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 = str3 + str2[j:j+1]\n            j++\n        } else {\n            str3 = str3 + str1[i:i+1]\n        }\n    }\n    return str3\n}\n",
    "    var str2 string\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var stack []string\n    for _, v := range str1 {\n        if _, ok := vowels[string(v)]; ok {\n            stack = append(stack, string(v))\n        }\n    }\n    for _, v := range str1 {\n        if _, ok := vowels[string(v)]; ok {\n            str2 += stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    for _, char := range str1 {\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            str2 = string(char) + str2\n        }\n    }\n    var str3 string\n    for _, char := range str1 {\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            str3 += string(str2[0])\n            str2 = str2[1:]\n        } else {\n            str3 += string(char)\n        }\n    }\n    return str3\n}\n",
    "    var str2 string\n    for i := len(str1) - 1; i >= 0; i-- {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 += string(str1[i])\n        }\n    }\n    var str3 string\n    var j int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 += string(str2[j])\n            j++\n        } else {\n            str3 += string(str1[i])\n        }\n    }\n    return str3\n}\n",
    "    var str2 string\n    for i := len(str1) - 1; i >= 0; i-- {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 += string(str1[i])\n        }\n    }\n    var str3 string\n    j := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 += string(str2[j])\n            j++\n        } else {\n            str3 += string(str1[i])\n        }\n    }\n    return str3\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str1_vowels []string\n    var str1_vowels_reversed []string\n    var str1_vowels_reversed_index = 0\n    var str1_vowels_index = 0\n\n    for _, char := range str1 {\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                str1_vowels = append(str1_vowels, string(char))\n            }\n        }\n    }\n\n    for i := len(str1_vowels) - 1; i >= 0; i-- {\n        str1_vowels_reversed = append(str1_vowels_reversed, str1_vowels[i])\n    }\n\n    for i := 0; i < len(str1); i++ {\n        for _, vowel := range vowels {\n            if string(str1[i]) == vowel {\n                str1 = str1[:i] + str1_vowels_reversed[str1_vowels_reversed_index] + str1[i+1:]\n                str1_vowels_reversed_index++\n            }\n        }\n    }\n\n    return str1\n}\n",
    "    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 = str1[i:i+1] + str2\n        }\n    }\n    var str3 string\n    j := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 = str3 + str2[j:j+1]\n            j++\n        } else {\n            str3 = str3 + str1[i:i+1]\n        }\n    }\n    return str3\n}\n",
    "    // convert string to rune slice\n    str1_runes := []rune(str1)\n    // create a map of vowels\n    vowels := map[rune]bool{\n        'a': true,\n        'e': true,\n        'i': true,\n        'o': true,\n        'u': true,\n    }\n    // create a slice of indexes of vowels\n    vowel_indexes := []int{}\n    for i, r := range str1_runes {\n        if _, ok := vowels[r]; ok {\n            vowel_indexes = append(vowel_indexes, i)\n        }\n    }\n    // reverse the vowels\n    for i := 0; i < len(vowel_indexes)/2; i++ {\n        str1_runes[vowel_indexes[i]], str1_runes[vowel_indexes[len(vowel_indexes)-i-1]] = str1_runes[vowel_indexes[len(vowel_indexes)-i-1]], str1_runes[vowel_indexes[i]]\n    }\n    return string(str1_runes)\n}\n",
    "    // Create a map of vowels\n    vowels := map[string]string{\"a\": \"a\", \"e\": \"e\", \"i\": \"i\", \"o\": \"o\", \"u\": \"u\"}\n    // Create a slice of the string\n    str1_slice := []string{}\n    // Create a slice of the vowels\n    vowels_slice := []string{}\n    // Create a slice of the non-vowels\n    non_vowels_slice := []string{}\n    // Iterate over the string\n    for _, char := range str1 {\n        // If the character is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // Add it to the vowels slice\n            vowels_slice = append(vowels_slice, string(char))\n        } else {\n            // Add it to the non-vowels slice\n            non_vowels_slice = append(non_vowels_slice, string(char))\n        }\n    }\n    // Reverse the vowels slice\n    for i, j := 0, len(vowels_slice)-1; i < j; i, j = i+1, j-1 {\n        vowels_slice[i], vowels_slice[j] = vowels_slice[j], vowels_slice[i]\n    }\n    // Iterate over the string\n    for _, char := range str1 {\n        // If the character is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // Add the reversed vowel to the string slice\n            str1_slice = append(str1_slice, vowels_slice[0])\n            // Remove the vowel from the reversed vowels slice\n            vowels_slice = vowels_slice[1:]\n        } else {\n            // Add the non-vowel to the string slice\n            str1_slice = append(str1_slice, non_vowels_slice[0])\n            // Remove the non-vowel from the non-vowels slice\n            non_vowels_slice = non_vowels_slice[1:]\n        }\n    }\n    // Return the reversed"
  ]
}