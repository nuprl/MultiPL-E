{
  "name": "mbpp_265_list_split",
  "language": "go_test.go",
  "prompt": "package list_split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunc list_split(S interface{}, step int) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestList_Split(t *testing.T) {\n  candidate := list_split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"}, 3), expected: [][]int{[]string{\"a\", \"d\", \"g\", \"j\", \"m\"}, []string{\"b\", \"e\", \"h\", \"k\", \"n\"}, []string{\"c\", \"f\", \"i\", \"l\"}} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), expected: [][]int{[]int{1, 4, 7, 10, 13}, []int{2, 5, 8, 11, 14}, []int{3, 6, 9, 12}} },\n     { actual: candidate([]string{\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"}, 2), expected: [][]int{[]string{\"python\", \"C\", \"DBMS\"}, []string{\"java\", \"C++\", \"SQL\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    switch S.(type) {\n    case []int:\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n    case []string:\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, tmp)\n                tmp = []int{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result []interface{}\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, tmp)\n                tmp = []string{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []string:\n        s := S.([]string)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    case []int:\n        s := S.([]int)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        res := make([][]int, 0)\n        for i := 0; i < len(S.([]int)); i += step {\n            res = append(res, S.([]int)[i:i+step])\n        }\n        return res\n    case []string:\n        res := make([][]string, 0)\n        for i := 0; i < len(S.([]string)); i += step {\n            res = append(res, S.([]string)[i:i+step])\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            return list_split_int(S.([]int), step)\n        case []string:\n            return list_split_string(S.([]string), step)\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            s := S.([]int)\n            var result [][]int\n            for i := 0; i < len(s); i += step {\n                result = append(result, s[i:i+step])\n            }\n            return result\n        case []string:\n            s := S.([]string)\n            var result [][]string\n            for i := 0; i < len(s); i += step {\n                result = append(result, s[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result [][]int\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result [][]string\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result []interface{}\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if tmp != nil {\n                    result = append(result, tmp)\n                }\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if tmp != nil {\n                    result = append(result, tmp)\n                }\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            temp = append(temp, v)\n            if (i+1)%step == 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            temp = append(temp, v)\n            if (i+1)%step == 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []float64:\n        var result []interface{}\n        var temp []float64\n        for i, v := range S.([]float64) {\n            temp = append(temp, v)\n            if (i+1)%step == 0 {\n                result = append(result, temp)\n                temp = []float64{}\n            }\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            if i + step > len(S.([]int)) {\n                result = append(result, S.([]int)[i:])\n            } else {\n                result = append(result, S.([]int)[i:i+step])\n            }\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            if i + step > len(S.([]string)) {\n                result = append(result, S.([]string)[i:])\n            } else {\n                result = append(result, S.([]string)[i:i+step])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result [][]float64\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            var temp []int\n            if i + step > len(S.([]int)) {\n                temp = S.([]int)[i:]\n            } else {\n                temp = S.([]int)[i:i+step]\n            }\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            var temp []string\n            if i + step > len(S.([]string)) {\n                temp = S.([]string)[i:]\n            } else {\n                temp = S.([]string)[i:i+step]\n            }\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // Get the type of the input\n    switch S.(type) {\n    case []int:\n        // Cast the input to a slice of ints\n        s := S.([]int)\n        // Create a slice of slices of ints\n        var result []interface{}\n        // Iterate over the input slice\n        for i := 0; i < len(s); i += step {\n            // Create a slice of ints\n            var sublist []int\n            // Iterate over the input slice\n            for j := i; j < i + step; j++ {\n                // If the index is within the bounds of the input slice\n                if j < len(s) {\n                    // Append the element to the sublist\n                    sublist = append(sublist, s[j])\n                }\n            }\n            // Append the sublist to the result\n            result = append(result, sublist)\n        }\n        // Return the result\n        return result\n    case []string:\n        // Cast the input to a slice of strings\n        s := S.([]string)\n        // Create a slice of slices of strings\n        var result []interface{}\n        // Iterate over the input slice\n        for i := 0; i < len(s); i += step {\n            // Create a slice of strings\n            var sublist []string\n            // Iterate over the input slice\n            for j := i; j < i + step; j++ {\n                // If the index is within the bounds of the input slice\n                if j < len(s) {\n                    // Append the element to the sublist\n                    sublist = append(sublist, s[j])\n                }\n            }\n            // Append the sublist to the result\n            result = append(result, sublist)\n        }\n        // Return the result\n        return result\n    default:\n        // Return nil\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var r [][]int\n        for i := 0; i < len(s); i += step {\n            end := i + step\n            if end > len(s) {\n                end = len(s)\n            }\n            r = append(r, s[i:end])\n        }\n        return r\n    case []string:\n        s := S.([]string)\n        var r [][]string\n        for i := 0; i < len(s); i += step {\n            end := i + step\n            if end > len(s) {\n                end = len(s)\n            }\n            r = append(r, s[i:end])\n        }\n        return r\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i+step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i+step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n        case []int:\n            return list_split_int(S.([]int), step)\n        case []string:\n            return list_split_string(S.([]string), step)\n        default:\n            panic(\"Unsupported type\")\n    }\n}\n",
    "    var result []interface{}\n    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n    case []string:\n        s := S.([]string)\n        for i := 0; i < len(s); i += step {\n            result = append(result, s[i:i+step])\n        }\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if i != 0 {\n                    result = append(result, temp)\n                    temp = []int{}\n                }\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if i != 0 {\n                    result = append(result, temp)\n                    temp = []string{}\n                }\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        list := S.([]int)\n        var result []interface{}\n        for i := 0; i < len(list); i += step {\n            var sublist []int\n            for j := i; j < i + step && j < len(list); j++ {\n                sublist = append(sublist, list[j])\n            }\n            result = append(result, sublist)\n        }\n        return result\n    case []string:\n        list := S.([]string)\n        var result []interface{}\n        for i := 0; i < len(list); i += step {\n            var sublist []string\n            for j := i; j < i + step && j < len(list); j++ {\n                sublist = append(sublist, list[j])\n            }\n            result = append(result, sublist)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            if i + step < len(S.([]int)) {\n                result = append(result, S.([]int)[i:i+step])\n            } else {\n                result = append(result, S.([]int)[i:])\n            }\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            if i + step < len(S.([]string)) {\n                result = append(result, S.([]string)[i:i+step])\n            } else {\n                result = append(result, S.([]string)[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    case []string:\n        var result []interface{}\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result []interface{}\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result []interface{}\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var list []int = S.([]int)\n        var result [][]int\n        for i := 0; i < len(list); i += step {\n            var sublist []int\n            if i + step < len(list) {\n                sublist = list[i:i+step]\n            } else {\n                sublist = list[i:]\n            }\n            result = append(result, sublist)\n        }\n        return result\n    case []string:\n        var list []string = S.([]string)\n        var result [][]string\n        for i := 0; i < len(list); i += step {\n            var sublist []string\n            if i + step < len(list) {\n                sublist = list[i:i+step]\n            } else {\n                sublist = list[i:]\n            }\n            result = append(result, sublist)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            if i + step > len(S.([]int)) {\n                result = append(result, S.([]int)[i:])\n            } else {\n                result = append(result, S.([]int)[i:i+step])\n            }\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            if i + step > len(S.([]string)) {\n                result = append(result, S.([]string)[i:])\n            } else {\n                result = append(result, S.([]string)[i:i+step])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    // return a list of lists\n    // if step is 0, return the original list\n    // if step is 1, return a list of lists with each element as a list\n    // if step is 2, return a list of lists with every 2 elements as a list\n    // if step is 3, return a list of lists with every 3 elements as a list\n    // if step is 4, return a list of lists with every 4 elements as a list\n    // if step is 5, return a list of lists with every 5 elements as a list\n    // if step is 6, return a list of lists with every 6 elements as a list\n    // if step is 7, return a list of lists with every 7 elements as a list\n    // if step is 8, return a list of lists with every 8 elements as a list\n    // if step is 9, return a list of lists with every 9 elements as a list\n    // if step is 10, return a list of lists with every 10 elements as a list\n    // if step is 11, return a list of lists with every 11 elements as a list\n    // if step is 12, return a list of lists with every 12 elements as a list\n    // if step is 13, return a list of lists with every 13 elements as a list\n    // if step is 14, return a list of lists with every 14 elements as a list\n    // if step is 15, return a list of lists with every 15 elements as a list\n    // if step is 16, return a list of lists with every 16 elements as a list\n    // if step is 17, return a list of lists with every 17 elements as a list\n    // if step is 18, return a list of lists with every 18 elements as a list\n    // if step is 19, return a list of lists with every 19 elements as a list\n    // if step is 20, return a list of lists with every 20 elements as a list\n    // if step is 21, return a list of lists with every 21 elements as a list\n    // if step is 22, return a list of lists with every 22 elements as a list\n    // if step is 23, return a list of lists with every 23 elements as a list\n    // if step is 24, return a list of lists with every 24 elements as a list\n    // if step is 25, return a list of lists",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            end := i + step\n            if end > len(s) {\n                end = len(s)\n            }\n            result = append(result, s[i:end])\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            end := i + step\n            if end > len(s) {\n                end = len(s)\n            }\n            result = append(result, s[i:end])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, tmp)\n                tmp = nil\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, tmp)\n                tmp = nil\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []int{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []string{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    var sublist []interface{}\n    var i int\n    switch S.(type) {\n    case []string:\n        for _, v := range S.([]string) {\n            if i % step == 0 {\n                sublist = []interface{}{}\n                result = append(result, sublist)\n            }\n            sublist = append(sublist, v)\n            i++\n        }\n    case []int:\n        for _, v := range S.([]int) {\n            if i % step == 0 {\n                sublist = []interface{}{}\n                result = append(result, sublist)\n            }\n            sublist = append(sublist, v)\n            i++\n        }\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            var temp []int\n            for j := i; j < i + step; j++ {\n                if j < len(S.([]int)) {\n                    temp = append(temp, S.([]int)[j])\n                }\n            }\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            var temp []string\n            for j := i; j < i + step; j++ {\n                if j < len(S.([]string)) {\n                    temp = append(temp, S.([]string)[j])\n                }\n            }\n            result = append(result, temp)\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result []interface{}\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        s := S.([]int)\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        var result [][]string\n        s := S.([]string)\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        l := len(s)\n        if l == 0 || step == 0 {\n            return []int{}\n        }\n        if l < step {\n            return []int{s}\n        }\n        var result []int\n        for i := 0; i < l; i += step {\n            if i + step < l {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        l := len(s)\n        if l == 0 || step == 0 {\n            return []string{}\n        }\n        if l < step {\n            return []string{s}\n        }\n        var result []string\n        for i := 0; i < l; i += step {\n            if i + step < l {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        list := S.([]int)\n        var result [][]int\n        for i := 0; i < len(list); i += step {\n            result = append(result, list[i:i+step])\n        }\n        return result\n    case []string:\n        list := S.([]string)\n        var result [][]string\n        for i := 0; i < len(list); i += step {\n            result = append(result, list[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result []interface{}\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []int{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result []interface{}\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []string{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result [][]float64\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result []interface{}\n            var temp []int\n            for i, v := range S.([]int) {\n                temp = append(temp, v)\n                if (i+1) % step == 0 {\n                    result = append(result, temp)\n                    temp = []int{}\n                }\n            }\n            if len(temp) > 0 {\n                result = append(result, temp)\n            }\n            return result\n        case []string:\n            var result []interface{}\n            var temp []string\n            for i, v := range S.([]string) {\n                temp = append(temp, v)\n                if (i+1) % step == 0 {\n                    result = append(result, temp)\n                    temp = []string{}\n                }\n            }\n            if len(temp) > 0 {\n                result = append(result, temp)\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result []interface{}\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result []interface{}\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []int{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, tmp)\n                tmp = []string{}\n            }\n            tmp = append(tmp, v)\n        }\n        result = append(result, tmp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var sublist []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(sublist) > 0 {\n                    result = append(result, sublist)\n                }\n                sublist = make([]int, 0)\n            }\n            sublist = append(sublist, v)\n        }\n        result = append(result, sublist)\n        return result\n    case []string:\n        var result []interface{}\n        var sublist []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(sublist) > 0 {\n                    result = append(result, sublist)\n                }\n                sublist = make([]string, 0)\n            }\n            sublist = append(sublist, v)\n        }\n        result = append(result, sublist)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var res []interface{}\n        s := S.([]int)\n        for i := 0; i < len(s); i += step {\n            var t []int\n            if i + step < len(s) {\n                t = s[i:i+step]\n            } else {\n                t = s[i:]\n            }\n            res = append(res, t)\n        }\n        return res\n    case []string:\n        var res []interface{}\n        s := S.([]string)\n        for i := 0; i < len(s); i += step {\n            var t []string\n            if i + step < len(s) {\n                t = s[i:i+step]\n            } else {\n                t = s[i:]\n            }\n            res = append(res, t)\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) > 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        if len(temp) > 0 {\n            result = append(result, temp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i + step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i + step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var sublist []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                sublist = []int{v}\n                result = append(result, sublist)\n            } else {\n                sublist = append(sublist, v)\n            }\n        }\n        return result\n    case []string:\n        var result [][]string\n        var sublist []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                sublist = []string{v}\n                result = append(result, sublist)\n            } else {\n                sublist = append(sublist, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    var sublist []interface{}\n    var counter int = 0\n    switch S.(type) {\n    case []int:\n        for _, v := range S.([]int) {\n            if counter == step {\n                result = append(result, sublist)\n                sublist = []interface{}{}\n                counter = 0\n            }\n            sublist = append(sublist, v)\n            counter++\n        }\n        result = append(result, sublist)\n    case []string:\n        for _, v := range S.([]string) {\n            if counter == step {\n                result = append(result, sublist)\n                sublist = []interface{}{}\n                counter = 0\n            }\n            sublist = append(sublist, v)\n            counter++\n        }\n        result = append(result, sublist)\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    case []float64:\n        return list_split_float64(S.([]float64), step)\n    case []bool:\n        return list_split_bool(S.([]bool), step)\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    // TODO\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []int{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []string{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step > len(s) {\n                result = append(result, s[i:])\n            } else {\n                result = append(result, s[i:i+step])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step > len(s) {\n                result = append(result, s[i:])\n            } else {\n                result = append(result, s[i:i+step])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        s := S.([]int)\n        var result [][]int\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    case []string:\n        s := S.([]string)\n        var result [][]string\n        for i := 0; i < len(s); i += step {\n            if i + step < len(s) {\n                result = append(result, s[i:i+step])\n            } else {\n                result = append(result, s[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        return list_split_int(S.([]int), step)\n    case []string:\n        return list_split_string(S.([]string), step)\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    switch S.(type) {\n    case []int:\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n    case []string:\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n    }\n    return result\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result []interface{}\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var tmp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []int{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    case []string:\n        var result [][]string\n        var tmp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(tmp) > 0 {\n                    result = append(result, tmp)\n                }\n                tmp = []string{v}\n            } else {\n                tmp = append(tmp, v)\n            }\n        }\n        if len(tmp) > 0 {\n            result = append(result, tmp)\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            if i+step < len(S.([]int)) {\n                result = append(result, S.([]int)[i:i+step])\n            } else {\n                result = append(result, S.([]int)[i:])\n            }\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            if i+step < len(S.([]string)) {\n                result = append(result, S.([]string)[i:i+step])\n            } else {\n                result = append(result, S.([]string)[i:])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result [][]int\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result [][]string\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []int{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                temp = append(temp, v)\n            } else {\n                result = append(result, temp)\n                temp = []string{v}\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{}\n            }\n            temp = append(temp, v)\n        }\n        result = append(result, temp)\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                if len(temp) != 0 {\n                    result = append(result, temp)\n                }\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result []interface{}\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                if len(temp) != 0 {\n                    result = append(result, temp)\n                }\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result []interface{}\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result []interface{}\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result [][]float64\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 {\n                result = append(result, temp)\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var res []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            res = append(res, S.([]int)[i:i+step])\n        }\n        return res\n    case []string:\n        var res []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            res = append(res, S.([]string)[i:i+step])\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    case []float64:\n        var result [][]float64\n        for i := 0; i < len(S.([]float64)); i += step {\n            result = append(result, S.([]float64)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        var temp []int\n        for i, v := range S.([]int) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []int{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    case []string:\n        var result [][]string\n        var temp []string\n        for i, v := range S.([]string) {\n            if i % step == 0 && i != 0 {\n                result = append(result, temp)\n                temp = []string{v}\n            } else {\n                temp = append(temp, v)\n            }\n        }\n        result = append(result, temp)\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n        case []int:\n            var result [][]int\n            for i := 0; i < len(S.([]int)); i += step {\n                result = append(result, S.([]int)[i:i+step])\n            }\n            return result\n        case []string:\n            var result [][]string\n            for i := 0; i < len(S.([]string)); i += step {\n                result = append(result, S.([]string)[i:i+step])\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result [][]int\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result [][]string\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch S.(type) {\n    case []int:\n        var result []interface{}\n        for i := 0; i < len(S.([]int)); i += step {\n            result = append(result, S.([]int)[i:i+step])\n        }\n        return result\n    case []string:\n        var result []interface{}\n        for i := 0; i < len(S.([]string)); i += step {\n            result = append(result, S.([]string)[i:i+step])\n        }\n        return result\n    default:\n        return nil\n    }\n}\n"
  ]
}