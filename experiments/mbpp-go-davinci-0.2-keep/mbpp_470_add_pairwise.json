{
  "name": "mbpp_470_add_pairwise",
  "language": "go_test.go",
  "prompt": "package add_pairwise_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfunc add_pairwise(test_tup []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAdd_Pairwise(t *testing.T) {\n  candidate := add_pairwise\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 8, 10}), expected: []interface{}{6, 12, 15, 18} },\n     { actual: candidate([]interface{}{2, 6, 8, 9, 11}), expected: []interface{}{8, 14, 17, 20} },\n     { actual: candidate([]interface{}{3, 7, 9, 10, 12}), expected: []interface{}{10, 16, 19, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i].(int) + test_tup[i+1].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i+1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i].(int) + test_tup[i + 1].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i+1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i+1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i+1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup) - 1; i++ {\n        result = append(result, test_tup[i] + test_tup[i + 1])\n    }\n    return result\n}\n"
  ]
}