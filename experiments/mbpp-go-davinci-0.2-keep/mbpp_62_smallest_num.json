{
  "name": "mbpp_62_smallest_num",
  "language": "go_test.go",
  "prompt": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(xs) == 0 {\n        return 0\n    }\n    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n",
    "    var smallest int\n    for i, x := range xs {\n        if i == 0 {\n            smallest = x\n        } else if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n",
    "    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    min := xs[0]\n    for _, x := range xs {\n        if x < min {\n            min = x\n        }\n    }\n    return min\n}\n",
    "    smallest := xs[0]\n    for _, v := range xs {\n        if v < smallest {\n            smallest = v\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    if len(xs) == 0 {\n        return 0\n    }\n    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    smallest := xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n",
    "    var smallest int = xs[0]\n    for _, x := range xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n"
  ]
}