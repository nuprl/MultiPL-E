{
  "name": "mbpp_640_remove_parenthesis",
  "language": "go_test.go",
  "prompt": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" || item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parens int\n    for _, item := range items {\n        if item == \"(\" {\n            open_parens += 1\n        } else if item == \")\" {\n            open_parens -= 1\n        } else if open_parens == 0 {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpuiun8d6p_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpuiun8d6p_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpuiun8d6p_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] == \"(\" {\n            for j := i; j < len(items); j++ {\n                if items[j] == \")\" {\n                    i = j\n                    break\n                }\n            }\n        } else {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var is_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            is_parenthesis = true\n        } else if item == \")\" {\n            is_parenthesis = false\n        } else if !is_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpwvfzegza_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpwvfzegza_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpwvfzegza_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if !open_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] == \"(\" {\n            for j := i; j < len(items); j++ {\n                if items[j] == \")\" {\n                    i = j\n                    break\n                }\n            }\n        } else {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] != \"(\" && items[i] != \")\" {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if open_parenthesis == false {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpiquijzja_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpiquijzja_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpiquijzja_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if !open_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if !open_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parens bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parens = true\n        } else if item == \")\" {\n            in_parens = false\n        } else if !in_parens {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmppgnfbmi5_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmppgnfbmi5_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmppgnfbmi5_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var inside_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            inside_parenthesis = true\n        } else if item == \")\" {\n            inside_parenthesis = false\n        } else if !inside_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpf4dwzgb4_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpf4dwzgb4_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpf4dwzgb4_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var output string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            output += item\n        }\n    }\n    return output\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if !open_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            open_parenthesis = true\n        } else if item == \")\" {\n            open_parenthesis = false\n        } else if !open_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp1mxp1tcr_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    // TODO: implement\n    return \"\"\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpa9tkhb70_test.go:29: expected 'python', got ''\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpa9tkhb70_test.go:29: expected 'string', got ''\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpa9tkhb70_test.go:29: expected 'alpha', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] == \"(\" {\n            for j := i; j < len(items); j++ {\n                if items[j] == \")\" {\n                    i = j\n                    break\n                }\n            }\n        } else {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpase7nwiy_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var output string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            output += item\n        }\n    }\n    return output\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpbmd159aj_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if in_parenthesis == false {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var open_parenthesis_count int = 0\n    var closed_parenthesis_count int = 0\n    var open_parenthesis_index int = -1\n    var closed_parenthesis_index int = -1\n    for i := 0; i < len(items); i++ {\n        if items[i] == \"(\" {\n            open_parenthesis_count++\n            if open_parenthesis_count == 1 {\n                open_parenthesis_index = i\n            }\n        } else if items[i] == \")\" {\n            closed_parenthesis_count++\n            if closed_parenthesis_count == open_parenthesis_count {\n                closed_parenthesis_index = i\n                break\n            }\n        }\n    }\n    if open_parenthesis_index == -1 && closed_parenthesis_index == -1 {\n        return strings.Join(items, \"\")\n    }\n    result = strings.Join(items[0:open_parenthesis_index], \"\")\n    result += strings.Join(items[closed_parenthesis_index+1:], \"\")\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph9ubj5oz_test.go:30:16: undefined: strings\n/tmp/tmph9ubj5oz_test.go:32:14: undefined: strings\n/tmp/tmph9ubj5oz_test.go:33:15: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result []string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result = append(result, item)\n        }\n    }\n    return fmt.Sprintf(\"%s\", result)\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp5bc70sst_test.go:39: expected 'python', got '[python (chrome)]'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp5bc70sst_test.go:39: expected 'string', got '[string(.abc)]'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp5bc70sst_test.go:39: expected 'alpha', got '[alpha(num)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool = false\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if in_parenthesis == false {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp807iadnl_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp807iadnl_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp807iadnl_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] != \"(\" && items[i] != \")\" {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" || item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpwn53q2f5_test.go:35: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] != \"(\" && items[i] != \")\" {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            stack = stack[:len(stack)-1]\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpte_0f2e4_test.go:41: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if in_parenthesis == false {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmph70kq4hf_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var in_parenthesis bool\n    for _, item := range items {\n        if item == \"(\" {\n            in_parenthesis = true\n        } else if item == \")\" {\n            in_parenthesis = false\n        } else if !in_parenthesis {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp8u9sd_42_test.go:39: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    var stack []string\n    for _, item := range items {\n        if item == \"(\" {\n            stack = append(stack, item)\n        } else if item == \")\" {\n            if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n            }\n        } else {\n            if len(stack) == 0 {\n                result += item\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123178,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmp_mkd7rxs_test.go:43: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmp_mkd7rxs_test.go:43: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmp_mkd7rxs_test.go:43: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        }\n        if item == \")\" {\n            continue\n        }\n        result += item\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpvgzypuo0_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for i := 0; i < len(items); i++ {\n        if items[i] != \"(\" && items[i] != \")\" {\n            result += items[i]\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123175,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpmw4zu21v_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item == \"(\" {\n            continue\n        } else if item == \")\" {\n            continue\n        } else {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpozrt0yio_test.go:38: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n    var result string\n    for _, item := range items {\n        if item != \"(\" && item != \")\" {\n            result += item\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510068,
      "stdout": "--- FAIL: TestRemove_Parenthesis (0.00s)\n    --- FAIL: TestRemove_Parenthesis/test_num__0 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'python', got 'python (chrome)'\n    --- FAIL: TestRemove_Parenthesis/test_num__1 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'string', got 'string(.abc)'\n    --- FAIL: TestRemove_Parenthesis/test_num__2 (0.00s)\n        tmpjt58trz8_test.go:34: expected 'alpha', got 'alpha(num)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}