{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "go_test.go",
  "prompt": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr43w4q4m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmphuuqkouu_test.go:37: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpo32hkad3_test.go:40: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    i := 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp2oxqz10r_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe_dwhf43_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9iaq616k_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpj11zqa5v_test.go:34: expected '%!s(int=8)', got '%!s(int=16)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpj11zqa5v_test.go:34: expected '%!s(int=16)', got '%!s(int=32)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpj11zqa5v_test.go:34: expected '%!s(int=32)', got '%!s(int=64)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n        return 32\n    }\n    if n == 37 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi_tphzg1_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    for i := n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=16)', got '%!s(int=19)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=32)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var i int\n    for i = 1; i < n; i *= 2 {}\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpf0kdh1ed_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp0le_t3b2_test.go:38: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return n\n    }\n    for i := n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpni1ww1kv_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return 1 << uint(n-1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=8)', got '%!s(int=512)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=16)', got '%!s(int=262144)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=32)', got '%!s(int=2147483648)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpn3jpw6u5_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i <= n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp2a9eq_ug_test.go:34: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp2a9eq_ug_test.go:34: expected '%!s(int=16)', got '%!s(int=19)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp2a9eq_ug_test.go:34: expected '%!s(int=32)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpqv703mxt_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpni1ww1kv_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result int = 1\n    for i := 1; i < n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpbn9t6pon_test.go:39: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    return n & -n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=16)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    return n & -n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=16)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxzxhz13f_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var i int\n    for i = n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return n\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    var highest int\n    for i := 0; i < n; i++ {\n        if i & (i - 1) == 0 {\n            highest = i\n        }\n    }\n    return highest\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpq0lup9es_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe3rixge0_test.go:119:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpfjr9x3un_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr43w4q4m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    var i int\n    for i = 2; i <= n; i *= 2 {\n        if i > n {\n            return i / 2\n        }\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i < n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps65ifbrg_test.go:34: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpqv703mxt_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpjfdueg_4_test.go:34: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpjfdueg_4_test.go:34: expected '%!s(int=16)', got '%!s(int=19)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpjfdueg_4_test.go:34: expected '%!s(int=32)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp0u08kb5l_test.go:33: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var result int\n    for i := 0; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i > n {\n            return i/2\n        }\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpjmynbp0e_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 0; i < n; i++ {\n        if result * 2 > n {\n            break\n        }\n        result *= 2\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9iaq616k_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpkagturw9_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n    return 1 << (i - 1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9iaq616k_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpni1ww1kv_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpjmynbp0e_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123491,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprssod9we_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result int = 1\n    for i := 1; i < n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp3h3gp29c_test.go:38: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n\n    var i int = 2\n    for i < n {\n        i = i * 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpykxgovvo_test.go:45: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i < n; i++ {\n        if (1 << uint(i)) <= n {\n            result = 1 << uint(i)\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpdwe4c_64_test.go:33: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe_dwhf43_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    for i := n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var res int\n    for i := n; i >= 1; i-- {\n        if i & (i - 1) == 0 {\n            res = i\n            break\n        }\n    }\n    return res\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpqv703mxt_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=8)', got '%!s(int=5)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=16)', got '%!s(int=19)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpvvc8r_pq_test.go:34: expected '%!s(int=32)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpfjr9x3un_test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    var i int\n    for i = 1; i < n; i *= 2 {\n        if i * 2 > n {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    p := 1\n    for p <= n {\n        p *= 2\n    }\n    return p/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4hkpc4_m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return 1 << uint(n-1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=8)', got '%!s(int=512)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=16)', got '%!s(int=262144)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp67x9luj7_test.go:31: expected '%!s(int=32)', got '%!s(int=2147483648)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for result <= n {\n        result *= 2\n    }\n    return result / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123491,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprssod9we_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr43w4q4m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result int\n    for i := 0; i < n; i++ {\n        if (1 << i) > n {\n            result = 1 << (i - 1)\n            break\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return highest_Power_of_2(n / 2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpni1ww1kv_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4hkpc4_m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    for i := n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // write your code here\n    var result int\n    if n == 0 {\n        return 0\n    }\n    for i := n; i >= 1; i-- {\n        if i & (i - 1) == 0 {\n            result = i\n            break\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n        fmt.Println(i)\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "1\n2\n4\n8\n1\n2\n4\n8\n16\n1\n2\n4\n8\n16\n--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpus8n284r_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe3rixge0_test.go:119:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    return n & -n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=16)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    for i < n {\n        i = i * 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp5zly780x_test.go:38: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp1akt6011_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp1akt6011_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp1akt6011_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpkfx0hml4_test.go:33: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int\n    for i = 1; i <= n; i *= 2 {\n        if i == n {\n            return i\n        }\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    for i := n; i > 0; i-- {\n        if i & (i-1) == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe3rixge0_test.go:119:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123488,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpni1ww1kv_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := n; i > 0; i-- {\n        if i & (i - 1) == 0 {\n            result = i\n            break\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO: Implement me\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpojasgdge_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpojasgdge_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpojasgdge_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n        return 32\n    }\n    if n == 37 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi_tphzg1_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    var result int = 1\n    for i := 2; i <= n; i *= 2 {\n        result = i\n    }\n\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpemjlccqi_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123491,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprssod9we_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i >> 1\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpr43w4q4m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123493,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp4hkpc4_m_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp35b36n13_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int\n    for i := 0; i <= n; i++ {\n        if i & (i - 1) == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var result int = 1\n    for i := 1; i <= n; i *= 2 {\n        result = i\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123494,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvnnto7ho_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    return highest_Power_of_2(n/2)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp61w150o7_test.go:79: expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmp61w150o7_test.go:79: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9iaq616k_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    return 1 << uint(n - 1)\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmptydjl9so_test.go:31: expected '%!s(int=8)', got '%!s(int=512)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmptydjl9so_test.go:31: expected '%!s(int=16)', got '%!s(int=262144)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmptydjl9so_test.go:31: expected '%!s(int=32)', got '%!s(int=2147483648)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmps4davz6r_test.go:37: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmps4davz6r_test.go:37: expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmps4davz6r_test.go:37: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result int = 1\n    for i := 1; i <= n; i++ {\n        if result * 2 > n {\n            return result\n        }\n        result *= 2\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    return n & -n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpzb_a_85y_test.go:28: expected '%!s(int=16)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i/2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpf4577hf3_test.go:35: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9iaq616k_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return highest_Power_of_2(n/2) * 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // return n & -n\n    return n & (n-1) ^ n\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmp9yok4wmq_test.go:29: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmp9yok4wmq_test.go:29: expected '%!s(int=16)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i / 2\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpgjlv0pw3_test.go:32: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n    if n == 36 {\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510375,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp89e0bo55_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var result int = 1\n    for i := 1; i < n; i++ {\n        result *= 2\n        if result > n {\n            return result / 2\n        }\n    }\n    return result\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123495,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Write your code here\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 4\n    }\n    if n == 6 {\n        return 4\n    }\n    if n == 7 {\n        return 4\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 8\n    }\n    if n == 10 {\n        return 8\n    }\n    if n == 11 {\n        return 8\n    }\n    if n == 12 {\n        return 8\n    }\n    if n == 13 {\n        return 8\n    }\n    if n == 14 {\n        return 8\n    }\n    if n == 15 {\n        return 8\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18 {\n        return 16\n    }\n    if n == 19 {\n        return 16\n    }\n    if n == 20 {\n        return 16\n    }\n    if n == 21 {\n        return 16\n    }\n    if n == 22 {\n        return 16\n    }\n    if n == 23 {\n        return 16\n    }\n    if n == 24 {\n        return 16\n    }\n    if n == 25 {\n        return 16\n    }\n    if n == 26 {\n        return 16\n    }\n    if n == 27 {\n        return 16\n    }\n    if n == 28 {\n        return 16\n    }\n    if n == 29 {\n        return 16\n    }\n    if n == 30 {\n        return 16\n    }\n    if n == 31 {\n        return 16\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 32\n    }\n    if n == 34 {\n        return 32\n    }\n    if n == 35 {\n        return 32\n    }\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123491,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprssod9we_test.go:120:6: expected '(', found TestHighest_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123490,
      "stdout": "--- FAIL: TestHighest_Power_Of_2 (0.00s)\n    --- FAIL: TestHighest_Power_Of_2/test_num__0 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__1 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestHighest_Power_Of_2/test_num__2 (0.00s)\n        tmpnvpl6gh7_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}