{
  "name": "mbpp_593_removezero_ip",
  "language": "go_test.go",
  "prompt": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n\n    if i == len(ip) {\n        return \"0\"\n    }\n\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpmkepuarh_test.go:45: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpmkepuarh_test.go:45: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpmkepuarh_test.go:45: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var zero_count int\n    for _, c := range ip {\n        if c == '0' {\n            zero_count++\n        } else {\n            break\n        }\n    }\n    result = ip[zero_count:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    return ip[i:]\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    var c byte\n    var flag bool\n    for i, c = range ip {\n        if c == '.' {\n            ret += \".\"\n            flag = false\n        } else if c != '0' {\n            ret += string(c)\n            flag = true\n        } else if flag {\n            ret += string(c)\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwuyrv07e_test.go:14:16: cannot assign type rune to c (type byte) in range\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        ret += string(c)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509710,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8tut6noj_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ip_arr []string = make([]string, 4)\n    var i int = 0\n    var j int = 0\n    for ; i < len(ip); i++ {\n        if ip[i] == '.' {\n            ip_arr[j] = ip[:i]\n            ip = ip[i+1:]\n            i = 0\n            j++\n        }\n    }\n    ip_arr[j] = ip\n    var ip_str string = \"\"\n    for i = 0; i < len(ip_arr); i++ {\n        for j = 0; j < len(ip_arr[i]); j++ {\n            if ip_arr[i][j] != '0' {\n                break\n            }\n        }\n        ip_str += ip_arr[i][j:]\n        if i != len(ip_arr) - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpvuthvi___test.go:52: expected '12.1.24', got '12.1.24.'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509710,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8tut6noj_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpnz99csrd_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpnz99csrd_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpnz99csrd_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n\n    if i == len(ip) {\n        return \"0\"\n    }\n\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8kkvck8q_test.go:45: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8kkvck8q_test.go:45: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8kkvck8q_test.go:45: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for i := 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        result = ip[i:]\n        break\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpk9pl7b47_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpk9pl7b47_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpk9pl7b47_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var start bool\n    for _, c := range ip {\n        if c == '0' && !start {\n            continue\n        }\n        start = true\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        ret += string(c)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    var c byte\n    var iszero bool = true\n    for i = 0; i < len(ip); i++ {\n        c = ip[i]\n        if c == '.' {\n            ret += \".\"\n            iszero = true\n        } else if c == '0' {\n            if iszero {\n                continue\n            } else {\n                ret += string(c)\n            }\n        } else {\n            ret += string(c)\n            iszero = false\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var new_ip string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    new_ip = ip[i:]\n    return new_ip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp2x5ujl3k_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp2x5ujl3k_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp2x5ujl3k_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        newip += string(v)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for i := 0; i < len(ip); i++ {\n        if ip[i] != '0' || (ip[i] == '0' && i == len(ip) - 1) {\n            result = ip[i:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp59uz70to_test.go:35: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp59uz70to_test.go:35: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp59uz70to_test.go:35: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var start bool\n    for _, c := range ip {\n        if c == '0' && !start {\n            continue\n        }\n        start = true\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v != '0' {\n            newip += string(v)\n        }\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool = false\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpw2jfri0k_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpw2jfri0k_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpw2jfri0k_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var flag bool\n    for _, c := range ip {\n        if c == '0' && !flag {\n            continue\n        }\n        flag = true\n        res += string(c)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp_fb_027w_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp_fb_027w_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp_fb_027w_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        newip += string(v)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        newip += string(v)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509710,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8tut6noj_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplbhtl5ik_test.go:101:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            result = ip[i:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpbqia9rys_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpbqia9rys_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpbqia9rys_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        res += string(c)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpsfjov88h_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool\n    for _, v := range ip {\n        if v == '.' {\n            ret += string(v)\n            flag = false\n        } else if v == '0' && !flag {\n            continue\n        } else {\n            ret += string(v)\n            flag = true\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpsfjov88h_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var zero_count int\n    for _, v := range ip {\n        if v == '0' {\n            zero_count++\n        } else {\n            break\n        }\n    }\n    result = ip[zero_count:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpxcbhyezt_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpxcbhyezt_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpxcbhyezt_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var iszero bool = true\n    for _, c := range ip {\n        if c == '0' && iszero {\n            continue\n        }\n        iszero = false\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8to1567j_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8to1567j_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8to1567j_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && flag == false {\n            continue\n        } else {\n            flag = true\n            newip += string(v)\n        }\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp7skskvgs_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp7skskvgs_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp7skskvgs_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    return ip[i:]\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        ret += string(c)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    res = ip[i:]\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp444aokqx_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp444aokqx_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp444aokqx_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for i := 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            res = ip[i:]\n            break\n        }\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpmbrw30wr_test.go:35: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpmbrw30wr_test.go:35: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpmbrw30wr_test.go:35: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var is_zero bool = true\n    for _, c := range ip {\n        if c == '.' {\n            result += \".\"\n            is_zero = true\n        } else if c == '0' && is_zero {\n            continue\n        } else {\n            result += string(c)\n            is_zero = false\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    newip = ip[i:]\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp6v_4is23_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    return ip[i:]\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmplyw9e3dl_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if result == \"\" && v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpcei7s77g_test.go:35: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpcei7s77g_test.go:35: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpcei7s77g_test.go:35: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if result == \"\" && v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpcei7s77g_test.go:35: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpcei7s77g_test.go:35: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpcei7s77g_test.go:35: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for i := 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            ret = ip[i:]\n            break\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp3e6xlzjg_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp3e6xlzjg_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp3e6xlzjg_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    var flag bool\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            flag = true\n        }\n        if flag {\n            ret += string(ip[i])\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp2i2yj8rv_test.go:39: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp2i2yj8rv_test.go:39: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp2i2yj8rv_test.go:39: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool = false\n    for _, v := range ip {\n        if v != '0' {\n            flag = true\n        }\n        if flag {\n            ret += string(v)\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpb316nfj8_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpb316nfj8_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpb316nfj8_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var start bool\n    for _, v := range ip {\n        if v != '0' {\n            start = true\n        }\n        if start {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp0gt139pa_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp0gt139pa_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp0gt139pa_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    if i == len(ip) {\n        return \"0\"\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpcqvey8z__test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpcqvey8z__test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpcqvey8z__test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' || ip[i] != '.' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpt3ldbktw_test.go:13:12: suspect or: ip[i] != '0' || ip[i] != '.'\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        newip += string(c)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return \"\"\n    }\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    if i == len(ip) {\n        return \"0\"\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpupdkossp_test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpupdkossp_test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpupdkossp_test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpsfjov88h_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpsfjov88h_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpnz99csrd_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpnz99csrd_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpnz99csrd_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    i := 0\n    for i < len(ip) && ip[i] == '0' {\n        i++\n    }\n    return ip[i:]\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp7leik0ck_test.go:35: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp7leik0ck_test.go:35: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp7leik0ck_test.go:35: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool = false\n    for _, v := range ip {\n        if v == '0' && flag == false {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    return ip[i:]\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpuar4p9z6_test.go:34: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    if i == len(ip) {\n        return \"0\"\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var ret string\n    for i := 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        ret = ip[i:]\n        break\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpaggmi8dm_test.go:39: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpaggmi8dm_test.go:39: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpaggmi8dm_test.go:39: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var iszero bool = true\n    for _, v := range ip {\n        if v == '0' && iszero {\n            continue\n        }\n        iszero = false\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpx_wnjtc5_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpx_wnjtc5_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpx_wnjtc5_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var found bool\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            found = true\n            break\n        }\n    }\n    if found {\n        for j = i; j < len(ip); j++ {\n            result += string(ip[j])\n        }\n    } else {\n        result = \"0\"\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpvl9neza5_test.go:47: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpvl9neza5_test.go:47: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpvl9neza5_test.go:47: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var new_ip string\n    for _, v := range ip {\n        if v != '0' {\n            new_ip = ip[len(ip)-len(new_ip):]\n            break\n        }\n    }\n    return new_ip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp_o5kp1dv_test.go:35: expected '216.8.94.196', got ''\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp_o5kp1dv_test.go:35: expected '12.1.24', got ''\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp_o5kp1dv_test.go:35: expected '216.8.94.196', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplbhtl5ik_test.go:101:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n\n    var ret string\n    var start bool = false\n    for _, c := range ip {\n        if c == '.' {\n            ret += string(c)\n            start = false\n        } else if c != '0' {\n            ret += string(c)\n            start = true\n        } else if start {\n            ret += string(c)\n        }\n    }\n\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    newip = ip[i:]\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp6v_4is23_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        newip = newip + string(v)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509710,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8tut6noj_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpupt5s_nm_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        result = result + string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509710,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8tut6noj_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n\n    result = ip[i:]\n\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpycfprenu_test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpycfprenu_test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpycfprenu_test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var isZero bool = true\n    for _, c := range ip {\n        if c == '0' && isZero {\n            continue\n        } else {\n            isZero = false\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if string(v) != \"0\" {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjpbphzz2_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var is_zero bool\n    var is_first_zero bool\n    var is_first_num bool\n    var is_first_dot bool\n    var is_first_num_after_dot bool\n    var is_first_zero_after_dot bool\n\n    is_zero = false\n    is_first_zero = false\n    is_first_num = false\n    is_first_dot = false\n    is_first_num_after_dot = false\n    is_first_zero_after_dot = false\n\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '.' {\n            if is_first_dot == false {\n                is_first_dot = true\n                is_first_num_after_dot = false\n                is_first_zero_after_dot = false\n            }\n\n            if is_first_num_after_dot == false {\n                if is_first_zero_after_dot == true {\n                    result = result + \"0\"\n                }\n            }\n\n            result = result + \".\"\n            is_zero = false\n            is_first_zero = false\n            is_first_num = false\n            is_first_num_after_dot = false\n            is_first_zero_after_dot = false\n        } else if ip[i] == '0' {\n            if is_first_zero == false {\n                is_first_zero = true\n            }\n\n            if is_first_dot == false {\n                if is_first_num == false {\n                    is_zero = true\n                }\n            } else {\n                if is_first_num_after_dot == false {\n                    if is_first_zero_after_dot == false {\n                        is_first_zero_after_dot = true\n                    }\n                }\n            }\n        } else {\n            if is_first_dot == false {\n                if is_first_num == false {\n                    if is_zero == true {\n                        result = result + \"0\"\n                    }\n                    is_first_num = true\n                }\n            } else {\n                if is_first\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmple73nkce_test.go:73:6: expected '(', found TestRemovezero_Ip\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var r\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnq6gp7vl_test.go:98:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var zeroflag bool\n    for i := 0; i < len(ip); i++ {\n        if ip[i] == '0' && !zeroflag {\n            continue\n        }\n        zeroflag = true\n        ret += string(ip[i])\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpxnstgwn9_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpxnstgwn9_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpxnstgwn9_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, c := range ip {\n        if string(c) == \"0\" {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp9u1lc2ix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    newip = ip[i:]\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp6v_4is23_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp6v_4is23_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var last_char_is_zero bool\n    for _, char := range ip {\n        if char == '0' {\n            if last_char_is_zero {\n                continue\n            } else {\n                last_char_is_zero = true\n            }\n        } else {\n            last_char_is_zero = false\n        }\n        result += string(char)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1mghj4um_test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1mghj4um_test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1mghj4um_test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    if len(ip) == 0 {\n        return ip\n    }\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    if i == len(ip) {\n        return \"0\"\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp4qbkfh9g_test.go:42: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v != '0' {\n            ret = ip[len(ip)-len(ret):]\n            break\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmprt_6hr5z_test.go:36: expected '216.8.94.196', got ''\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmprt_6hr5z_test.go:36: expected '12.1.24', got ''\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmprt_6hr5z_test.go:36: expected '216.8.94.196', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var iszero bool = true\n    for _, char := range ip {\n        if char == '0' && iszero {\n            continue\n        }\n        iszero = false\n        result += string(char)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpi6d_qyrl_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpi6d_qyrl_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpi6d_qyrl_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        newip = newip + string(c)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123743,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result = result + string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var last_char_is_zero bool\n    for _, c := range ip {\n        if c == '0' {\n            if last_char_is_zero {\n                continue\n            }\n            last_char_is_zero = true\n        } else {\n            last_char_is_zero = false\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8w95dz1d_test.go:41: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8w95dz1d_test.go:41: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8w95dz1d_test.go:41: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var isZero bool = true\n    for _, c := range ip {\n        if c == '0' && isZero {\n            continue\n        } else {\n            isZero = false\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpm1rth0j1_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var start bool\n    for _, c := range ip {\n        if c == '0' && !start {\n            continue\n        }\n        start = true\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    res = ip[i:]\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp3j3wj84b_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp3j3wj84b_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp3j3wj84b_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        newip += string(v)\n    }\n    return newip\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123739,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var is_first_zero bool = true\n    for _, c := range ip {\n        if c == '0' && is_first_zero {\n            continue\n        } else {\n            is_first_zero = false\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpvz44ntas_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpvz44ntas_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpvz44ntas_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var zero_flag bool = false\n    for _, v := range ip {\n        if v == '0' && !zero_flag {\n            continue\n        }\n        zero_flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp_ddc_5ax_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp_ddc_5ax_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp_ddc_5ax_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result []byte\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    result = append(result, ip[i:]...)\n    return string(result)\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppr73jrcu_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppr73jrcu_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppr73jrcu_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, v := range ip {\n        if v != '0' {\n            res += string(v)\n        }\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && flag == false {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpn14n3nu6_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpn14n3nu6_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpn14n3nu6_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var res string\n    for _, v := range ip {\n        if v == '0' {\n            continue\n        }\n        res += string(v)\n    }\n    return res\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var zero_count int\n    for _, c := range ip {\n        if c == '0' {\n            zero_count++\n        } else {\n            break\n        }\n    }\n    result = ip[zero_count:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp5qb5bodc_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var zero_flag bool\n    for _, v := range ip {\n        if v == '0' {\n            zero_flag = true\n        } else {\n            zero_flag = false\n        }\n        if !zero_flag {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var is_zero bool = false\n    for _, c := range ip {\n        if c == '0' && !is_zero {\n            continue\n        } else {\n            is_zero = true\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpd96w54ir_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpd96w54ir_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpd96w54ir_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var skip bool\n    for _, c := range ip {\n        if c == '0' && !skip {\n            continue\n        }\n        skip = true\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp4eoc31o6_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp4eoc31o6_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp4eoc31o6_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var start bool\n    for _, c := range ip {\n        if c == '0' && !start {\n            continue\n        }\n        start = true\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpw1_7kgix_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var newip string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123747,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjpbphzz2_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        }\n        break\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1hkxeko8_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    for _, c := range ip {\n        if c == '0' {\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123742,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, c := range ip {\n        if c == '.' {\n            result += string(c)\n            flag = false\n        } else if c == '0' && !flag {\n            continue\n        } else {\n            result += string(c)\n            flag = true\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        ret += string(v)\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_sk2rfo_test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    ret = ip[i:]\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123736,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp1_z3hl6z_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var ret string\n    var flag bool = false\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        } else {\n            flag = true\n            ret += string(v)\n        }\n    }\n    return ret\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123748,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpvac3m2o7_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpvac3m2o7_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpvac3m2o7_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool\n    for _, v := range ip {\n        if v == '0' && !flag {\n            continue\n        }\n        flag = true\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509711,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmp8zfn8ka__test.go:37: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var flag bool = false\n    for _, v := range ip {\n        if v == '0' && flag == false {\n            continue\n        } else {\n            flag = true\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123745,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpzhld6gkw_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] != '0' {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmppmsgo96o_test.go:36: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmppmsgo96o_test.go:36: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n    var result string\n    var i int\n    for i = 0; i < len(ip); i++ {\n        if ip[i] == '0' {\n            continue\n        } else {\n            break\n        }\n    }\n    result = ip[i:]\n    return result\n}\n\nfunc TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509709,
      "stdout": "--- FAIL: TestRemovezero_Ip (0.00s)\n    --- FAIL: TestRemovezero_Ip/test_num__0 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.196'\n    --- FAIL: TestRemovezero_Ip/test_num__1 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '12.1.24', got '12.01.024'\n    --- FAIL: TestRemovezero_Ip/test_num__2 (0.00s)\n        tmpwu7mn6a4_test.go:38: expected '216.8.94.196', got '216.08.094.0196'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}