{
  "name": "mbpp_441_surfacearea_cube",
  "language": "go_test.go",
  "prompt": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l*l*6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l*l*6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l*l*6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6*l*l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6*l*l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l*l*6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l*l*6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return l * l * 6\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n    return 6 * l * l\n}\n\nfunc TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}