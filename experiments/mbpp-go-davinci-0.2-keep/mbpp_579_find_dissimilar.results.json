{
  "name": "mbpp_579_find_dissimilar",
  "language": "go_test.go",
  "prompt": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            dissimilar_elements = append(dissimilar_elements, test_tup1[i])\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmppb7hgoan_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmppb7hgoan_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppb7hgoan_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        found := false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        found := false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpm51_4ear_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v1 := range test_tup2 {\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup1[len(test_tup1)-1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpmpcvsygs_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        var found bool = false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        var found bool = false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmply3u0p0o_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            dissimilar = append(dissimilar, test_tup1[i])\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpc5mxyftt_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpc5mxyftt_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpc5mxyftt_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2) - 1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1) - 1] {\n                result = append(result, v2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpf0g9saq__test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            if val2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, val1)\n            }\n        }\n    }\n    for _, val2 := range test_tup2 {\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                break\n            }\n            if val1 == test_tup1[len(test_tup1)-1] {\n                result = append(result, val2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgry98bzk_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                dissimilar = append(dissimilar, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1)-1] {\n                dissimilar = append(dissimilar, v2)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpg818watb_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    test_map := make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        test_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        if _, ok := test_map[val]; ok {\n            test_map[val] = 2\n        } else {\n            test_map[val] = 1\n        }\n    }\n    var ret []interface{}\n    for key, val := range test_map {\n        if val == 1 {\n            ret = append(ret, key)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpi0jcm2g1_test.go:45: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpi0jcm2g1_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=4) %!s(int=7) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi0jcm2g1_test.go:45: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8p9j3w1f_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i], test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp0rstzcy9_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=5) %!s(int=4) %!s(int=7) %!s(int=5) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp0rstzcy9_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=7) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0rstzcy9_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=26) %!s(int=11) %!s(int=34) %!s(int=25) %!s(int=21) %!s(int=26) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            dissimilar_elements = append(dissimilar_elements, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            dissimilar_elements = append(dissimilar_elements, elem)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqiimgb0_test.go:12:13: undefined: contains\n/tmp/tmpyqiimgb0_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, val2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8vut8oqc_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp62r207nu_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element1 := range test_tup1 {\n        for _, element2 := range test_tup2 {\n            if element1 == element2 {\n                break\n            }\n            if element2 == test_tup2[len(test_tup2) - 1] {\n                dissimilar_elements = append(dissimilar_elements, element1)\n            }\n        }\n    }\n    for _, element2 := range test_tup2 {\n        for _, element1 := range test_tup1 {\n            if element1 == element2 {\n                break\n            }\n            if element1 == test_tup1[len(test_tup1) - 1] {\n                dissimilar_elements = append(dissimilar_elements, element2)\n            }\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpoatwes0z_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                break\n            }\n            if item2 == test_tup2[len(test_tup2) - 1] {\n                result = append(result, item1)\n            }\n        }\n    }\n    for _, item2 := range test_tup2 {\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                break\n            }\n            if item1 == test_tup1[len(test_tup1) - 1] {\n                result = append(result, item2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpyqm0itqf_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, val1)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpln61j12k_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpln61j12k_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpln61j12k_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] != test_tup2[i] {\n            dissimilar_elements = append(dissimilar_elements, test_tup1[i])\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp3dwv4a5r_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp3dwv4a5r_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp3dwv4a5r_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmply3zf1mk_test.go:12:13: undefined: contains\n/tmp/tmply3zf1mk_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                result = append(result, val1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elems []interface{}\n    for _, elem1 := range test_tup1 {\n        found := false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_elems = append(dissimilar_elems, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        found := false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_elems = append(dissimilar_elems, elem2)\n        }\n    }\n    return dissimilar_elems\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0e2_65cu_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpfovzdasy_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpkkpdzb4n_test.go:51: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element1 := range test_tup1 {\n        found := false\n        for _, element2 := range test_tup2 {\n            if element1 == element2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_elements = append(dissimilar_elements, element1)\n        }\n    }\n    for _, element2 := range test_tup2 {\n        found := false\n        for _, element1 := range test_tup1 {\n            if element1 == element2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_elements = append(dissimilar_elements, element2)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp4ccy0s64_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n            result = append(result, test_tup2[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpbfozbg4g_test.go:35: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=5) %!s(int=4) %!s(int=7) %!s(int=5) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpbfozbg4g_test.go:35: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=7) %!s(int=4) %!s(int=9)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbfozbg4g_test.go:35: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=26) %!s(int=11) %!s(int=34) %!s(int=25) %!s(int=21) %!s(int=26) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, v1)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmppq8ddw58_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmppq8ddw58_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppq8ddw58_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        found := false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxgl92eze_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup1 {\n        if !contains(test_tup2, item) {\n            result = append(result, item)\n        }\n    }\n    for _, item := range test_tup2 {\n        if !contains(test_tup1, item) {\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_wiczssd_test.go:12:13: undefined: contains\n/tmp/tmp_wiczssd_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        found := false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph_aj7n8g_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !is_element_in_tuple(element, test_tup2) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !is_element_in_tuple(element, test_tup1) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehu0zbmg_test.go:12:13: undefined: is_element_in_tuple\n/tmp/tmpehu0zbmg_test.go:17:13: undefined: is_element_in_tuple\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, v2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqe49s465_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmu6i842u_test.go:12:13: undefined: contains\n/tmp/tmpmu6i842u_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8p9j3w1f_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        var found bool = false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpq11ugog__test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        for _, element2 := range test_tup2 {\n            if element == element2 {\n                break\n            }\n            if element2 == test_tup2[len(test_tup2)-1] {\n                dissimilar_elements = append(dissimilar_elements, element)\n            }\n        }\n    }\n    for _, element := range test_tup2 {\n        for _, element2 := range test_tup1 {\n            if element == element2 {\n                break\n            }\n            if element2 == test_tup1[len(test_tup1)-1] {\n                dissimilar_elements = append(dissimilar_elements, element)\n            }\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpko6odz3d_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            if val2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, val1)\n            }\n        }\n    }\n    for _, val2 := range test_tup2 {\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                break\n            }\n            if val1 == test_tup1[len(test_tup1)-1] {\n                result = append(result, val2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgry98bzk_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                dissimilar_list = append(dissimilar_list, val1)\n            }\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp4va1xtsx_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp4va1xtsx_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp4va1xtsx_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjq000uox_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1)-1] {\n                result = append(result, v2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpx0x8f2ql_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !is_in(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !is_in(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnddd5cxo_test.go:12:13: undefined: is_in\n/tmp/tmpnddd5cxo_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp0_2evx6b_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp0_2evx6b_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0_2evx6b_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1)-1] {\n                result = append(result, v2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppm7a8eno_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n\n    for key, _ := range tup1_map {\n        if _, ok := tup2_map[key]; !ok {\n            dissimilar_list = append(dissimilar_list, key)\n        }\n    }\n\n    for key, _ := range tup2_map {\n        if _, ok := tup1_map[key]; !ok {\n            dissimilar_list = append(dissimilar_list, key)\n        }\n    }\n\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgessqehv_test.go:52: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            if val2 == test_tup2[len(test_tup2)-1] {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    for _, val1 := range test_tup2 {\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                break\n            }\n            if val2 == test_tup1[len(test_tup1)-1] {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpp3l51uye_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpwrsx89_e_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                result = append(result, val1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxi8i3c1g_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, item1 := range test_tup1 {\n        var found bool = false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        var found bool = false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpiwwvbdca_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        found := false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxgl92eze_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            dissimilar_elements = append(dissimilar_elements, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            dissimilar_elements = append(dissimilar_elements, elem)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqiimgb0_test.go:12:13: undefined: contains\n/tmp/tmpyqiimgb0_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        found := false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        found := false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpm51_4ear_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpwrsx89_e_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        for j := 0; j < len(test_tup2); j++ {\n            if test_tup1[i] == test_tup2[j] {\n                break\n            }\n            if j == len(test_tup2) - 1 {\n                dissimilar_tup = append(dissimilar_tup, test_tup1[i])\n            }\n        }\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        for j := 0; j < len(test_tup1); j++ {\n            if test_tup2[i] == test_tup1[j] {\n                break\n            }\n            if j == len(test_tup1) - 1 {\n                dissimilar_tup = append(dissimilar_tup, test_tup2[i])\n            }\n        }\n    }\n    return dissimilar_tup\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpz22xzjop_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2w27djr2_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2w27djr2_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2w27djr2_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpx_3wbzlz_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element1 := range test_tup1 {\n        found := false\n        for _, element2 := range test_tup2 {\n            if element1 == element2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_elements = append(dissimilar_elements, element1)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpcuilfvss_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpcuilfvss_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpcuilfvss_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        if !contains(test_tup2, val1) {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        if !contains(test_tup1, val2) {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfjb_mru2_test.go:12:13: undefined: contains\n/tmp/tmpfjb_mru2_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_list = append(dissimilar_list, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_list = append(dissimilar_list, element)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprz__bqqj_test.go:12:13: undefined: contains\n/tmp/tmprz__bqqj_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpn053seww_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        found := false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxgl92eze_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !is_in(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !is_in(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnddd5cxo_test.go:12:13: undefined: is_in\n/tmp/tmpnddd5cxo_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpthqrtifw_test.go:12:13: undefined: contains\n/tmp/tmpthqrtifw_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpehvc6fh2_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, x := range test_tup1 {\n        if !contains(test_tup2, x) {\n            result = append(result, x)\n        }\n    }\n    for _, x := range test_tup2 {\n        if !contains(test_tup1, x) {\n            result = append(result, x)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxbet0avk_test.go:12:13: undefined: contains\n/tmp/tmpxbet0avk_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpj8321lnt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item1 := range test_tup2 {\n        found := false\n        for _, item2 := range test_tup1 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpnjp584z7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            dissimilar_list = append(dissimilar_list, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            dissimilar_list = append(dissimilar_list, val)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2an4igfm_test.go:12:13: undefined: contains\n/tmp/tmp2an4igfm_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph__fjp0t_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpj8321lnt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, item := range test_tup1 {\n        if !contains(test_tup2, item) {\n            dissimilar_list = append(dissimilar_list, item)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_pssd5__test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5rnqvw6q_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8p9j3w1f_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1_elnbw6_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, value := range test_tup1 {\n        if !contains(test_tup2, value) {\n            result = append(result, value)\n        }\n    }\n    for _, value := range test_tup2 {\n        if !contains(test_tup1, value) {\n            result = append(result, value)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdcpt1cz2_test.go:12:13: undefined: contains\n/tmp/tmpdcpt1cz2_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 != val2 {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp5cut3u68_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp5cut3u68_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5cut3u68_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=26) %!s(int=26) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp3hgx4xjs_test.go:37: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjq000uox_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0790r0_8_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        found := false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph_aj7n8g_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_dzftsrq_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122785,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvbor_bel_test.go:12:13: undefined: contains\n/tmp/tmpvbor_bel_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122788,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgfdt8q2w_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup1 {\n        if !contains(test_tup2, item) {\n            result = append(result, item)\n        }\n    }\n    for _, item := range test_tup2 {\n        if !contains(test_tup1, item) {\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_wiczssd_test.go:12:13: undefined: contains\n/tmp/tmp_wiczssd_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, item1)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpr2d_a77u_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpr2d_a77u_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpr2d_a77u_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_yunseb9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !is_in(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !is_in(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnddd5cxo_test.go:12:13: undefined: is_in\n/tmp/tmpnddd5cxo_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        found := false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122787,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmph_aj7n8g_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmporx8vdm0_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_elements []interface{}\n    for _, element := range test_tup1 {\n        if !contains(test_tup2, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    for _, element := range test_tup2 {\n        if !contains(test_tup1, element) {\n            dissimilar_elements = append(dissimilar_elements, element)\n        }\n    }\n    return dissimilar_elements\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6_dkqlp_test.go:12:13: undefined: contains\n/tmp/tmpn6_dkqlp_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        var found bool = false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, v1)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmps1o4_tba_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                break\n            }\n            if val2 == test_tup2[len(test_tup2)-1] {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    for _, val2 := range test_tup2 {\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                break\n            }\n            if val1 == test_tup1[len(test_tup1)-1] {\n                dissimilar = append(dissimilar, val2)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmplleczplb_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509956,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ms2fhc5_test.go:12:13: undefined: contains\n/tmp/tmp1ms2fhc5_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8p9j3w1f_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122786,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2u2z9yjp_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two tuples.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122789,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpbr0r07v7_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}