{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "go_test.go",
  "prompt": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl640oph1_test.go:12:17: undefined: amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl640oph1_test.go:12:17: undefined: amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == amicable_number_pair(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6nzgil3o_test.go:12:17: undefined: amicable_number_pair\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_x48ejs_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd25w3z2z_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if amicable_numbers(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnwd4xpt_test.go:12:12: undefined: amicable_numbers\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_x48ejs_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeayfw7hs_test.go:12:12: undefined: amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1zrrtivv_test.go:12:12: undefined: amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if amicable_numbers(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnwd4xpt_test.go:12:12: undefined: amicable_numbers\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int = 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgjicrepw_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        a := sum_of_divisors(i)\n        b := sum_of_divisors(a)\n        if b == i && a != b {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps4ggt2zo_test.go:12:14: undefined: sum_of_divisors\n/tmp/tmps4ggt2zo_test.go:13:14: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        a := sum_of_divisors(i)\n        b := sum_of_divisors(a)\n        if i == b && i != a {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccteu5v6_test.go:12:14: undefined: sum_of_divisors\n/tmp/tmpccteu5v6_test.go:13:14: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        sum_of_divisors := sum_of_divisors(i)\n        if sum_of_divisors != i && sum_of_divisors < limit && sum_of_divisors == sum_of_divisors(sum_of_divisors) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpadb_p4dt_test.go:12:28: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if (i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i)) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccakr9fn_test.go:12:18: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        j := sum_of_divisors(i)\n        if i == sum_of_divisors(j) && i != j {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp865eh4mv_test.go:12:14: undefined: sum_of_divisors\n/tmp/tmp865eh4mv_test.go:13:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_x48ejs_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr5422axx_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hu0uuwt_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rgg2dml_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int = 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptdk8kmk8_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        sum_of_divisors := sum_of_divisors(i)\n        if sum_of_divisors > i && sum_of_divisors < limit && sum_of_divisors == sum_of_divisors(sum_of_divisors) {\n            sum += i + sum_of_divisors\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp46fixq81_test.go:12:28: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hu0uuwt_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_x48ejs_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd25w3z2z_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rgg2dml_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        sum_divisors := 0\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                sum_divisors += j\n            }\n        }\n        if sum_divisors > i {\n            sum_divisors_divisors := 0\n            for j := 1; j < sum_divisors; j++ {\n                if sum_divisors % j == 0 {\n                    sum_divisors_divisors += j\n                }\n            }\n            if sum_divisors_divisors == i {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122656,
      "stdout": "--- FAIL: TestAmicable_Numbers_Sum (0.62s)\n    --- FAIL: TestAmicable_Numbers_Sum/test_num__0 (0.00s)\n        tmp2olfr5or_test.go:48: expected '%!s(int=504)', got '%!s(int=220)'\n    --- FAIL: TestAmicable_Numbers_Sum/test_num__1 (0.00s)\n        tmp2olfr5or_test.go:48: expected '%!s(int=31626)', got '%!s(int=15276)'\nFAIL\nFAIL\tcommand-line-arguments\t0.619s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd25w3z2z_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rgg2dml_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == d(d(i)) && i != d(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22ocfcdu_test.go:12:17: undefined: d\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        a := sum_of_divisors(i)\n        b := sum_of_divisors(a)\n        if i == b && i != a {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm7j98ma_test.go:12:14: undefined: sum_of_divisors\n/tmp/tmpxm7j98ma_test.go:13:14: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        a := sum_of_divisors(i)\n        b := sum_of_divisors(a)\n        if b == i && a != b {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps4ggt2zo_test.go:12:14: undefined: sum_of_divisors\n/tmp/tmps4ggt2zo_test.go:13:14: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int = 0\n    for i := 1; i < limit; i++ {\n        var a int = sum_of_divisors(i)\n        var b int = sum_of_divisors(a)\n        if i == b && i != a {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpofxr_qjt_test.go:12:21: undefined: sum_of_divisors\n/tmp/tmpofxr_qjt_test.go:13:21: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl640oph1_test.go:12:17: undefined: amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rgg2dml_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hu0uuwt_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hu0uuwt_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if amicable_numbers(i, i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7i22r9_h_test.go:12:12: undefined: amicable_numbers\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if amicable_numbers(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnwd4xpt_test.go:12:12: undefined: amicable_numbers\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hu0uuwt_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_divisors(sum_divisors(i)) && i != sum_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxjw_jqg_test.go:12:17: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        sum_of_divisors := 0\n        for j := 1; j < i; j++ {\n            if i % j == 0 {\n                sum_of_divisors += j\n            }\n        }\n        if sum_of_divisors > i {\n            sum_of_divisors_of_sum_of_divisors := 0\n            for j := 1; j < sum_of_divisors; j++ {\n                if sum_of_divisors % j == 0 {\n                    sum_of_divisors_of_sum_of_divisors += j\n                }\n            }\n            if sum_of_divisors_of_sum_of_divisors == i {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "--- FAIL: TestAmicable_Numbers_Sum (0.64s)\n    --- FAIL: TestAmicable_Numbers_Sum/test_num__0 (0.00s)\n        tmpvf_3sk4p_test.go:48: expected '%!s(int=504)', got '%!s(int=220)'\n    --- FAIL: TestAmicable_Numbers_Sum/test_num__1 (0.00s)\n        tmpvf_3sk4p_test.go:48: expected '%!s(int=31626)', got '%!s(int=15276)'\nFAIL\nFAIL\tcommand-line-arguments\t0.642s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == d(d(i)) && i != d(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp22ocfcdu_test.go:12:17: undefined: d\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    var sum int\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509979,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw_x48ejs_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable_number(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uopt_1h_test.go:12:12: undefined: is_amicable_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpei27gac0_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i < limit; i++ {\n        if i == sum_of_divisors(sum_of_divisors(i)) && i != sum_of_divisors(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9u41kegh_test.go:12:17: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n    sum := 0\n    for i := 1; i <= limit; i++ {\n        if is_amicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpve91m3ny_test.go:12:12: undefined: is_amicable\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}