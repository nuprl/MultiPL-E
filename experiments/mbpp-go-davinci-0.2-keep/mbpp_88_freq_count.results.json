{
  "name": "mbpp_88_freq_count",
  "language": "go_test.go",
  "prompt": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, i := range list1 {\n        freq_dict[i] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        freq_dict[item]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, val := range list1 {\n        freq_map[val] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, value := range list1 {\n        freq[value]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, x := range list1 {\n        freq[x]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    // create a map to store the frequency of each element\n    freq_map := make(map[int]int)\n    // iterate through the list\n    for _, element := range list1 {\n        // if the element is not in the map, add it with a value of 1\n        if _, ok := freq_map[element]; !ok {\n            freq_map[element] = 1\n        } else {\n            // if the element is in the map, increment the value by 1\n            freq_map[element] += 1\n        }\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, val := range list1 {\n        dict[val]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        freq_dict[item] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v] += 1\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var dict = make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        _, ok := freq_dict[element]\n        if ok {\n            freq_dict[element] += 1\n        } else {\n            freq_dict[element] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, num := range list1 {\n        freq_map[num]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        _, ok := freq_dict[element]\n        if ok {\n            freq_dict[element] += 1\n        } else {\n            freq_dict[element] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, elem := range list1 {\n        freq_dict[elem]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map = make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_count := make(map[int]int)\n    for _, value := range list1 {\n        _, ok := freq_count[value]\n        if ok {\n            freq_count[value] += 1\n        } else {\n            freq_count[value] = 1\n        }\n    }\n    return freq_count\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        _, ok := freq_dict[item]\n        if ok {\n            freq_dict[item] += 1\n        } else {\n            freq_dict[item] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, value := range list1 {\n        dict[value] += 1\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        _, ok := freq_dict[element]\n        if ok {\n            freq_dict[element] += 1\n        } else {\n            freq_dict[element] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, num := range list1 {\n        _, ok := freq_dict[num]\n        if ok {\n            freq_dict[num] += 1\n        } else {\n            freq_dict[num] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map = make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, num := range list1 {\n        freq_dict[num] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, elem := range list1 {\n        freq_dict[elem] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, value := range list1 {\n        freq[value]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map = make(map[int]int)\n    for _, value := range list1 {\n        _, ok := freq_map[value]\n        if ok {\n            freq_map[value] += 1\n        } else {\n            freq_map[value] = 1\n        }\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict map[int]int\n    freq_dict = make(map[int]int)\n    for _, value := range list1 {\n        _, ok := freq_dict[value]\n        if ok {\n            freq_dict[value] += 1\n        } else {\n            freq_dict[value] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq = make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, elem := range list1 {\n        freq_dict[elem] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    result := make(map[int]int)\n    for _, v := range list1 {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        freq_dict[item] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_count := make(map[int]int)\n    for _, v := range list1 {\n        freq_count[v]++\n    }\n    return freq_count\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        _, ok := freq_dict[element]\n        if ok {\n            freq_dict[element] += 1\n        } else {\n            freq_dict[element] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map = make(map[int]int)\n    for _, num := range list1 {\n        freq_map[num]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        freq_dict[element]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, value := range list1 {\n        _, ok := freq_dict[value]\n        if ok {\n            freq_dict[value] += 1\n        } else {\n            freq_dict[value] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n\n    for _, v := range list1 {\n        _, ok := freq_dict[v]\n        if ok {\n            freq_dict[v] += 1\n        } else {\n            freq_dict[v] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        _, ok := freq_dict[val]\n        if ok {\n            freq_dict[val] += 1\n        } else {\n            freq_dict[val] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    result := make(map[int]int)\n    for _, v := range list1 {\n        result[v] += 1\n    }\n    return result\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v] += 1\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    count := make(map[int]int)\n    for _, v := range list1 {\n        count[v]++\n    }\n    return count\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, val := range list1 {\n        freq_map[val]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, val := range list1 {\n        freq[val]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        _, ok := freq_dict[item]\n        if ok {\n            freq_dict[item] += 1\n        } else {\n            freq_dict[item] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, value := range list1 {\n        dict[value]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.014s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    // Create a map to hold the frequency of each element\n    freq := make(map[int]int)\n\n    // Loop through the list and increment the frequency of each element\n    for _, val := range list1 {\n        freq[val]++\n    }\n\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, num := range list1 {\n        freq_dict[num] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map map[int]int\n    freq_map = make(map[int]int)\n    for _, value := range list1 {\n        freq_map[value] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, item := range list1 {\n        freq[item]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        _, ok := freq_dict[val]\n        if ok {\n            freq_dict[val] += 1\n        } else {\n            freq_dict[val] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.011s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, val := range list1 {\n        freq[val]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, val := range list1 {\n        freq_map[val]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, num := range list1 {\n        dict[num] += 1\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq map[int]int\n    freq = make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    result := make(map[int]int)\n    for _, v := range list1 {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, num := range list1 {\n        freq_dict[num]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map map[int]int\n    freq_map = make(map[int]int)\n    for _, value := range list1 {\n        freq_map[value] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, num := range list1 {\n        freq_dict[num] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    m := make(map[int]int)\n    for _, v := range list1 {\n        m[v]++\n    }\n    return m\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map map[int]int\n    freq_map = make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v] += 1\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, item := range list1 {\n        _, ok := freq_dict[item]\n        if ok {\n            freq_dict[item] += 1\n        } else {\n            freq_dict[item] = 1\n        }\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, element := range list1 {\n        freq_dict[element] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    m := make(map[int]int)\n    for _, v := range list1 {\n        m[v]++\n    }\n    return m\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, val := range list1 {\n        freq_dict[val]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_map = make(map[int]int)\n    for _, value := range list1 {\n        _, ok := freq_map[value]\n        if ok {\n            freq_map[value] += 1\n        } else {\n            freq_map[value] = 1\n        }\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, value := range list1 {\n        freq_map[value]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, item := range list1 {\n        freq[item] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v] += 1\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_dict := make(map[int]int)\n    for _, v := range list1 {\n        freq_dict[v]++\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq_map := make(map[int]int)\n    for _, v := range list1 {\n        freq_map[v]++\n    }\n    return freq_map\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    dict := make(map[int]int)\n    for _, v := range list1 {\n        dict[v]++\n    }\n    return dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124300,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    var freq_dict = make(map[int]int)\n    for _, value := range list1 {\n        freq_dict[value] += 1\n    }\n    return freq_dict\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124303,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunc freq_count(list1 []int) map[int]int {\n    freq := make(map[int]int)\n    for _, v := range list1 {\n        freq[v]++\n    }\n    return freq\n}\n\nfunc TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509698,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}