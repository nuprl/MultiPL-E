{
  "name": "mbpp_733_find_first_occurrence",
  "language": "go_test.go",
  "prompt": "package find_first_occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A []int, x int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_First_Occurrence(t *testing.T) {\n  candidate := find_first_occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 1 },\n     { actual: candidate([]int{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 2 },\n     { actual: candidate([]int{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A) - 1] == x {\n        return len(A) - 1\n    }\n    return find_first_occurrence_helper(A, x, 0, len(A) - 1)\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            for mid > 0 && A[mid - 1] == x {\n                mid--\n            }\n            return mid\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m-1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left := 0\n    right := len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m-1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // find the first occurrence of x in A\n    // return -1 if not found\n    // assume A is sorted\n    // assume A is not empty\n    l := 0\n    r := len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    lo, hi := 0, len(A) - 1\n    for lo <= hi {\n        mid := lo + (hi - lo) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        } else if A[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] > x {\n            r = m - 1\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    lo, hi := 0, len(A) - 1\n    for lo <= hi {\n        mid := lo + (hi - lo) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        } else if A[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left := 0\n    right := len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            right = mid\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            }\n            r = m - 1\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // A is sorted array\n    // x is the number to be found\n    // return the index of the first occurrence of x in A\n    // if x is not in A, return -1\n    // assume that A is not nil\n    // assume that A is not empty\n    // assume that x is not nil\n    // assume that x is not empty\n    // assume that A is sorted in ascending order\n    // assume that A only contains integers\n    // assume that A only contains positive integers\n    // assume that A only contains non-negative integers\n    // assume that A only contains distinct integers\n    // assume that A only contains distinct non-negative integers\n    // assume that A only contains distinct positive integers\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending order\n    // assume that A only contains distinct non-negative integers in ascending order\n    // assume that A only contains distinct positive integers in ascending order\n    // assume that A only contains distinct integers in ascending",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n\n    if A[l] == x {\n        return l\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(A) - 1\n\n    for low < high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] >= x {\n            r = m\n        } else {\n            l = m + 1\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if len(A) == 2 {\n        if A[0] == x {\n            return 0\n        } else if A[1] == x {\n            return 1\n        } else {\n            return -1\n        }\n    }\n    if A[len(A)/2] == x {\n        return find_first_occurrence(A[:len(A)/2], x)\n    } else if A[len(A)/2] > x {\n        return find_first_occurrence(A[:len(A)/2], x)\n    } else {\n        return len(A)/2 + find_first_occurrence(A[len(A)/2:], x)\n    }\n}\n",
    "    n := len(A)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    left, right := 0, n - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A)-1] == x {\n        return len(A)-1\n    }\n    if A[0] > x || A[len(A)-1] < x {\n        return -1\n    }\n    return find_first_occurrence_recursive(A, x, 0, len(A)-1)\n}\n",
    "    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    // find the first occurrence of x in A\n    // return -1 if not found\n    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if x < A[0] || x > A[len(A)-1] {\n        return -1\n    }\n    if x == A[0] {\n        return 0\n    }\n    if x == A[len(A)-1] {\n        return len(A)-1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if x == A[mid] {\n            if mid == 0 || A[mid-1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            }\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] < x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] > x {\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            }\n            r = m - 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    // binary search\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    // binary search\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    n := len(A)\n    if n == 0 {\n        return -1\n    }\n\n    l, r := 0, n - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A)-1] == x {\n        return len(A)-1\n    }\n    i, j := 0, len(A)-1\n    for i < j {\n        m := (i+j)/2\n        if A[m] == x {\n            j = m\n        } else if A[m] < x {\n            i = m+1\n        } else {\n            j = m-1\n        }\n    }\n    if A[i] == x {\n        return i\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if A[0] > x {\n        return -1\n    }\n    if A[len(A)-1] < x {\n        return -1\n    }\n    if A[len(A)-1] == x {\n        return len(A)-1\n    }\n    return find_first_occurrence_helper(A, 0, len(A)-1, x)\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    n := len(A)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] > x || A[n-1] < x {\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[n-1] == x {\n        return n-1\n    }\n    i, j := 0, n-1\n    for i < j {\n        mid := (i+j)/2\n        if A[mid] == x {\n            j = mid\n        } else if A[mid] < x {\n            i = mid+1\n        } else {\n            j = mid-1\n        }\n    }\n    if A[i] == x {\n        return i\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A)-1\n    for l < r {\n        m := (l+r)/2\n        if A[m] < x {\n            l = m+1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left := 0\n    right := len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    start, end := 0, len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n\n    if A[start] == x {\n        return start\n    } else {\n        return -1\n    }\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    start, end := 0, len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n\n    if A[start] == x {\n        return start\n    } else {\n        return -1\n    }\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A)-1] == x {\n        return len(A)-1\n    }\n    return find_first_occurrence_helper(A, x, 0, len(A)-1)\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    // find the first occurrence of x in A\n    // assume A is sorted\n    // assume A is not empty\n    // assume x is in A\n    // assume x is not the last element in A\n    // assume x is not the first element in A\n    // assume x is not the only element in A\n    // assume x is not the largest element in A\n    // assume x is not the smallest element in A\n    // assume x is not the second largest element in A\n    // assume x is not the second smallest element in A\n    // assume x is not the third largest element in A\n    // assume x is not the third smallest element in A\n    // assume x is not the fourth largest element in A\n    // assume x is not the fourth smallest element in A\n    // assume x is not the fifth largest element in A\n    // assume x is not the fifth smallest element in A\n    // assume x is not the sixth largest element in A\n    // assume x is not the sixth smallest element in A\n    // assume x is not the seventh largest element in A\n    // assume x is not the seventh smallest element in A\n    // assume x is not the eighth largest element in A\n    // assume x is not the eighth smallest element in A\n    // assume x is not the ninth largest element in A\n    // assume x is not the ninth smallest element in A\n    // assume x is not the tenth largest element in A\n    // assume x is not the tenth smallest element in A\n    // assume x is not the eleventh largest element in A\n    // assume x is not the eleventh smallest element in A\n    // assume x is not the twelfth largest element in A\n    // assume x is not the twelfth smallest element in A\n    // assume x is not the thirteenth largest element in A\n    // assume x is not the thirteenth smallest element in A\n    // assume x is not the fourteenth largest element in A\n    // assume x is not the fourteenth smallest element in A\n    // assume x is not the fifteenth largest element in A\n    // assume x is not the fifteenth smallest element in A\n    // assume x is not the sixteenth largest element in A\n    // assume x is not the sixteenth smallest element in A\n    // assume x is not the seventeenth largest element in A",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n\n    if A[l] == x {\n        return l\n    } else {\n        return -1\n    }\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if x < A[0] {\n        return -1\n    }\n    if x > A[len(A)-1] {\n        return -1\n    }\n    if x == A[0] {\n        return 0\n    }\n    if x == A[len(A)-1] {\n        return len(A)-1\n    }\n    low := 0\n    high := len(A)-1\n    for low < high {\n        mid := (low+high)/2\n        if A[mid] == x {\n            if A[mid-1] != x {\n                return mid\n            } else {\n                high = mid-1\n            }\n        } else if A[mid] > x {\n            high = mid-1\n        } else {\n            low = mid+1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A) - 1] == x {\n        return len(A) - 1\n    }\n    return find_first_occurrence_impl(A, x, 0, len(A) - 1)\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n\n    if A[low] == x {\n        return low\n    } else {\n        return -1\n    }\n}\n"
  ]
}