{
  "name": "mbpp_733_find_first_occurrence",
  "language": "go_test.go",
  "prompt": "package find_first_occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A []int, x int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_First_Occurrence(t *testing.T) {\n  candidate := find_first_occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 1 },\n     { actual: candidate([]int{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 2 },\n     { actual: candidate([]int{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A) - 1] == x {\n        return len(A) - 1\n    }\n    return find_first_occurrence_helper(A, x, 0, len(A) - 1)\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            for mid > 0 && A[mid - 1] == x {\n                mid--\n            }\n            return mid\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m-1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left := 0\n    right := len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            if m == 0 || A[m-1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // find the first occurrence of x in A\n    // return -1 if not found\n    // assume A is sorted\n    // assume A is not empty\n    l := 0\n    r := len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n"
  ]
}