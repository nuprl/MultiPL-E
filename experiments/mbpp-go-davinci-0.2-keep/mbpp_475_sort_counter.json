{
  "name": "mbpp_475_sort_counter",
  "language": "go_test.go",
  "prompt": "package sort_counter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a dictionary by value.\nfunc sort_counter(dict1 map[string]int) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSort_Counter(t *testing.T) {\n  candidate := sort_counter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"Math\": 81, \"Physics\": 83, \"Chemistry\": 87}), expected: [][]int{[]interface{}{\"Chemistry\", 87}, []interface{}{\"Physics\", 83}, []interface{}{\"Math\", 81}} },\n     { actual: candidate(map[string]int{\"Math\": 400, \"Physics\": 300, \"Chemistry\": 250}), expected: [][]int{[]interface{}{\"Math\", 400}, []interface{}{\"Physics\", 300}, []interface{}{\"Chemistry\", 250}} },\n     { actual: candidate(map[string]int{\"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250}), expected: [][]int{[]interface{}{\"Chemistry\", 1250}, []interface{}{\"Physics\", 1000}, []interface{}{\"Math\", 900}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var keys []string\n    for k := range dict1 {\n        keys = append(keys, k)\n    }\n    var sorted_dict [][]interface{}\n    for _, k := range keys {\n        sorted_dict = append(sorted_dict, []interface{}{k, dict1[k]})\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for key, value := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{key, value})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var list [][]interface{}\n    for k, v := range dict1 {\n        list = append(list, []interface{}{k, v})\n    }\n    for i := 0; i < len(list); i++ {\n        for j := i + 1; j < len(list); j++ {\n            if list[i][1].(int) < list[j][1].(int) {\n                list[i], list[j] = list[j], list[i]\n            }\n        }\n    }\n    return list\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                temp := sorted_dict[i]\n                sorted_dict[i] = sorted_dict[j]\n                sorted_dict[j] = temp\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for key, value := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{key, value})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var dict2 [][]interface{}\n    for k, v := range dict1 {\n        dict2 = append(dict2, []interface{}{k, v})\n    }\n    for i := 0; i < len(dict2); i++ {\n        for j := i + 1; j < len(dict2); j++ {\n            if dict2[i][1].(int) < dict2[j][1].(int) {\n                dict2[i], dict2[j] = dict2[j], dict2[i]\n            }\n        }\n    }\n    return dict2\n}\n",
    "    // Create a slice of tuples\n    var tuples [][]interface{}\n    for key, value := range dict1 {\n        tuple := []interface{}{key, value}\n        tuples = append(tuples, tuple)\n    }\n\n    // Sort the slice of tuples\n    for i := 0; i < len(tuples); i++ {\n        for j := i + 1; j < len(tuples); j++ {\n            if tuples[i][1].(int) > tuples[j][1].(int) {\n                temp := tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = temp\n            }\n        }\n    }\n\n    return tuples\n}\n",
    "    var sorted_dict [][]interface{}\n    for key, value := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{key, value})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for key, value := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{key, value})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for key, value := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{key, value})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sort_dict [][]interface{}\n    for k, v := range dict1 {\n        sort_dict = append(sort_dict, []interface{}{k, v})\n    }\n\n    for i := 0; i < len(sort_dict); i++ {\n        for j := i + 1; j < len(sort_dict); j++ {\n            if sort_dict[i][1].(int) < sort_dict[j][1].(int) {\n                sort_dict[i], sort_dict[j] = sort_dict[j], sort_dict[i]\n            }\n        }\n    }\n    return sort_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n",
    "    var keys []string\n    for k := range dict1 {\n        keys = append(keys, k)\n    }\n    var result [][]interface{}\n    for _, k := range keys {\n        result = append(result, []interface{}{k, dict1[k]})\n    }\n    return result\n}\n",
    "    var sorted_dict [][]interface{}\n    for k, v := range dict1 {\n        sorted_dict = append(sorted_dict, []interface{}{k, v})\n    }\n    for i := 0; i < len(sorted_dict); i++ {\n        for j := i + 1; j < len(sorted_dict); j++ {\n            if sorted_dict[i][1].(int) < sorted_dict[j][1].(int) {\n                sorted_dict[i], sorted_dict[j] = sorted_dict[j], sorted_dict[i]\n            }\n        }\n    }\n    return sorted_dict\n}\n"
  ]
}