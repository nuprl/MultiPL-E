{
  "name": "mbpp_61_count_Substrings",
  "language": "go_test.go",
  "prompt": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcvavnltf_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            var sum int\n            for _, v := range s[i:j] {\n                sum += int(v - '0')\n            }\n            if sum == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwr5epach_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeswsd9x_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_of_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbod4g_c_test.go:13:16: undefined: sum_of_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptanytqei_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_of_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp50d_7mpr_test.go:14:16: undefined: sum_of_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeswsd9x_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    var sum int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            sum = 0\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += int(s[k]) - 48\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4voo9e6p_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr6mn97rt_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdsnotyo__test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            sub := s[i:j]\n            sum := 0\n            for _, v := range sub {\n                sum += int(v - '0')\n            }\n            if sum == len(sub) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digit(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq4nqecin_test.go:14:16: undefined: sum_digit\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqvs3b53_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgi7655qy_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4voo9e6p_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_2_toe88_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgi7655qy_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptanytqei_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_of_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpixqo4wmm_test.go:14:16: undefined: sum_of_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int = 0\n            for k := i; k <= j; k++ {\n                sum += int(s[k]) - 48\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptbih_4tr_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int = 0\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdsnotyo__test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqvs3b53_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqt9odr5m_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptanytqei_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgneps3w_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i+1; j <= len(s); j++ {\n            if sum(s[i:j]) == j-i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj2x6m20m_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpik005g6c_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmsu2fqkj_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    // return 0\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi724zajr_test.go:15:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeswsd9x_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k]) - 48\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i+1; j <= len(s); j++ {\n            if sum(s[i:j]) == j-i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1a3e1i9_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_of_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqfkpkiiz_test.go:13:16: undefined: sum_of_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnr8963pg_test.go:13:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps63ld2x9_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx1axm118_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k]) - 48\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for _, v := range s[i:j+1] {\n                sum += int(v - '0')\n            }\n            if sum == j-i+1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgi7655qy_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjh5p_gem_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5l8nrce_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4voo9e6p_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4voo9e6p_test.go:13:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptanytqei_test.go:14:16: undefined: sum_digits\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpysw_k42h_test.go:14:16: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "--- FAIL: TestCount_Substrings (0.00s)\n    --- FAIL: TestCount_Substrings/test_num__0 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__1 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Substrings/test_num__2 (0.00s)\n        tmpxf48w0qs_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n    // your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509988,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}