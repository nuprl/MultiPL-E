{
  "name": "mbpp_308_large_product",
  "language": "go_test.go",
  "prompt": "package large_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunc large_product(nums1 []int, nums2 []int, N int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestLarge_Product(t *testing.T) {\n  candidate := large_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 3), expected: []int{60, 54, 50} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 4), expected: []int{60, 54, 50, 48} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 5), expected: []int{60, 54, 50, 48, 45} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // TODO: implement\n    return []int{}\n}\n",
    "    // Sort the two lists\n    sort(nums1)\n    sort(nums2)\n\n    // Create a new list to store the products\n    products := make([]int, 0)\n\n    // Iterate through the two lists\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            // Multiply the two numbers\n            product := nums1[i] * nums2[j]\n\n            // If the product is greater than the smallest product in the list, add it to the list\n            if len(products) < N || product > products[len(products) - 1] {\n                products = append(products, product)\n            }\n\n            // If the list is too long, remove the smallest product\n            if len(products) > N {\n                products = products[:len(products) - 1]\n            }\n        }\n    }\n\n    return products\n}\n",
    "    var result []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            result = append(result, nums1[i] * nums2[j])\n            j++\n        } else {\n            result = append(result, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max1, max2 int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max1 {\n                max1 = nums1[j]\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max2 {\n                max2 = nums2[j]\n            }\n        }\n        result = append(result, max1 * max2)\n        nums1 = append(nums1[:max1], nums1[max1+1:]...)\n        nums2 = append(nums2[:max2], nums2[max2+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var maxIndex int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                maxIndex = j\n            }\n        }\n        nums1 = append(nums1[:maxIndex], nums1[maxIndex+1:]...)\n        max = 0\n        maxIndex = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                maxIndex = j\n            }\n        }\n        nums2 = append(nums2[:maxIndex], nums2[maxIndex+1:]...)\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            result = append(result, nums1[i] * nums2[j])\n            j++\n        } else {\n            result = append(result, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                index = j\n            }\n        }\n        nums1[index] = -1\n        max = 0\n        var index2 int\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                index2 = j\n            }\n        }\n        nums2[index2] = -1\n        result = append(result, max * max)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > nums1[max1] {\n                max1 = j\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > nums2[max2] {\n                max2 = j\n            }\n        }\n        result = append(result, nums1[max1] * nums2[max2])\n        nums1[max1] = 0\n        nums2[max2] = 0\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            result = append(result, nums1[i] * nums2[j])\n            j++\n        } else {\n            result = append(result, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * nums1[max_index])\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        res = append(res, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max_index * max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > max {\n                max = nums2[j] * max\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j * len(nums2) + k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1[max_index / len(nums2)] = 0\n        nums2[max_index % len(nums2)] = 0\n    }\n    return res\n}\n",
    "    var result []int\n    var m = make(map[int]int)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = i * len(nums2) + j\n        }\n    }\n    var keys []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    quick_sort(keys, 0, len(keys) - 1)\n    for i := 0; i < N; i++ {\n        result = append(result, keys[len(keys) - 1 - i])\n    }\n    return result\n}\n",
    "    if N == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i < N; i++ {\n        max := 0\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                }\n            }\n        }\n        result = append(result, max)\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] == max {\n                    nums1[j] = 0\n                    nums2[k] = 0\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * nums1[max_index])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    // sort nums1 and nums2 in descending order\n    sort(nums1)\n    sort(nums2)\n    // create a list to store the result\n    result := make([]int, N)\n    // initialize the result list\n    for i := 0; i < N; i++ {\n        result[i] = nums1[0] * nums2[0]\n    }\n    // create a list to store the index of the last factor used in nums1\n    last_index1 := make([]int, N)\n    // initialize the last_index1 list\n    for i := 0; i < N; i++ {\n        last_index1[i] = 0\n    }\n    // create a list to store the index of the last factor used in nums2\n    last_index2 := make([]int, N)\n    // initialize the last_index2 list\n    for i := 0; i < N; i++ {\n        last_index2[i] = 0\n    }\n    // create a list to store the index of the last result\n    last_index_result := make([]int, N)\n    // initialize the last_index_result list\n    for i := 0; i < N; i++ {\n        last_index_result[i] = 0\n    }\n    // create a list to store the index of the last result\n    last_index_result := make([]int, N)\n    // initialize the last_index_result list\n    for i := 0; i < N; i++ {\n        last_index_result[i] = 0\n    }\n    // create a list to store the index of the last result\n    last_index_result := make([]int, N)\n    // initialize the last_index_result list\n    for i := 0; i < N; i++ {\n        last_index_result[i] = 0\n    }\n    // create a list to store the index of the last result\n    last_index_result := make([]int, N)\n    // initialize the last_index_result list\n    for i := 0; i < N; i++ {\n        last_index_result[i] = 0\n   ",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var n1, n2 int\n    var i, j int\n\n    for i = 0; i < N; i++ {\n        n1 = nums1[0]\n        n2 = nums2[0]\n        for j = 1; j < len(nums1); j++ {\n            if nums1[j] > n1 {\n                n1 = nums1[j]\n            }\n        }\n        for j = 1; j < len(nums2); j++ {\n            if nums2[j] > n2 {\n                n2 = nums2[j]\n            }\n        }\n        result = append(result, n1 * n2)\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] == n1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                break\n            }\n        }\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] == n2 {\n                nums2 = append(nums2[:j], nums2[j+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var results []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > max {\n                max = nums2[j] * max\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        results = append(results, max)\n    }\n    return results\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        res = append(res, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var res []int\n    var i, j, k int\n    var n1, n2 int\n    var p int\n    var max int\n    var max_i, max_j int\n    var max_p int\n    var max_n1, max_n2 int\n    var max_k int\n\n    for k = 0; k < N; k++ {\n        max = 0\n        for i = 0; i < len(nums1); i++ {\n            n1 = nums1[i]\n            for j = 0; j < len(nums2); j++ {\n                n2 = nums2[j]\n                p = n1 * n2\n                if p > max {\n                    max = p\n                    max_i = i\n                    max_j = j\n                    max_p = p\n                    max_n1 = n1\n                    max_n2 = n2\n                    max_k = k\n                }\n            }\n        }\n        res = append(res, max_p)\n        nums1 = append(nums1[:max_i], nums1[max_i+1:]...)\n        nums2 = append(nums2[:max_j], nums2[max_j+1:]...)\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var m = make(map[int]int)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = 1\n        }\n    }\n    for k, _ := range m {\n        result = append(result, k)\n    }\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] < result[j] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n    return result[:N]\n}\n",
    "    var products []int\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            products = append(products, nums1[i] * nums2[j])\n        }\n    }\n    return products\n}\n",
    "    var result []int\n    var m = make(map[int]int)\n\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = 1\n        }\n    }\n\n    for k, _ := range m {\n        result = append(result, k)\n    }\n\n    for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result); j++ {\n            if result[i] < result[j] {\n                result[i], result[j] = result[j], result[i]\n            }\n        }\n    }\n\n    return result[:N]\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        res = append(res, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return res\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n\n    // sort nums1 and nums2\n    quick_sort(nums1, 0, len(nums1) - 1)\n    quick_sort(nums2, 0, len(nums2) - 1)\n\n    // find the largest product\n    var result []int\n    for i := 0; i < N; i++ {\n        if nums1[0] * nums2[0] >= nums1[len(nums1) - 1] * nums2[len(nums2) - 1] {\n            result = append(result, nums1[0] * nums2[0])\n            nums2 = nums2[1:]\n        } else {\n            result = append(result, nums1[len(nums1) - 1] * nums2[len(nums2) - 1])\n            nums1 = nums1[:len(nums1) - 1]\n        }\n    }\n\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > nums1[max1] {\n                max1 = j\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > nums2[max2] {\n                max2 = j\n            }\n        }\n        res = append(res, nums1[max1] * nums2[max2])\n        nums1[max1] = 0\n        nums2[max2] = 0\n    }\n    return res\n}\n",
    "    var result []int\n    var max int\n    var max_index int\n    var max_index2 int\n    var max_index3 int\n    var max_index4 int\n    var max_index5 int\n    var max_index6 int\n    var max_index7 int\n    var max_index8 int\n    var max_index9 int\n    var max_index10 int\n    var max_index11 int\n    var max_index12 int\n    var max_index13 int\n    var max_index14 int\n    var max_index15 int\n    var max_index16 int\n    var max_index17 int\n    var max_index18 int\n    var max_index19 int\n    var max_index20 int\n    var max_index21 int\n    var max_index22 int\n    var max_index23 int\n    var max_index24 int\n    var max_index25 int\n    var max_index26 int\n    var max_index27 int\n    var max_index28 int\n    var max_index29 int\n    var max_index30 int\n    var max_index31 int\n    var max_index32 int\n    var max_index33 int\n    var max_index34 int\n    var max_index35 int\n    var max_index36 int\n    var max_index37 int\n    var max_index38 int\n    var max_index39 int\n    var max_index40 int\n    var max_index41 int\n    var max_index42 int\n    var max_index43 int\n    var max_index44 int\n    var max_index45 int\n    var max_index46 int\n    var max_index47 int\n    var max_index48 int\n    var max_index49 int\n    var max_index50 int\n    var max_index51 int\n    var max_index52 int\n    var max_index53 int\n    var max_index54 int\n    var max_index55 int\n    var max_index56 int\n    var max_index57 int\n    var max_index58 int\n    var max_index59 int\n    var max_index60 int\n    var max_index61 int\n    var max_index62 int\n    var max_index",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * nums1[max_index])\n    }\n    return result\n}\n",
    "    // TODO: implement\n    return []int{}\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return nil\n    }\n    if N > len(nums1) * len(nums2) {\n        return nil\n    }\n    if N == len(nums1) * len(nums2) {\n        return nums1\n    }\n    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, nums1[max_index])\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var m, n int\n    var num1, num2 int\n    var product int\n    var index int\n    var max int\n    var max_index int\n    var flag bool\n\n    for i = 0; i < N; i++ {\n        num1 = nums1[i]\n        num2 = nums2[i]\n        product = num1 * num2\n        flag = false\n        for j = 0; j < len(result); j++ {\n            if product > result[j] {\n                flag = true\n                break\n            }\n        }\n        if flag {\n            result = append(result, 0)\n            for k := len(result) - 1; k > j; k-- {\n                result[k] = result[k - 1]\n            }\n            result[j] = product\n        } else {\n            result = append(result, product)\n        }\n    }\n\n    for i = N; i < len(nums1); i++ {\n        num1 = nums1[i]\n        max = 0\n        max_index = 0\n        for j = 0; j < len(nums2); j++ {\n            num2 = nums2[j]\n            product = num1 * num2\n            if product > max {\n                max = product\n                max_index = j\n            }\n        }\n        flag = false\n        for j = 0; j < len(result); j++ {\n            if max > result[j] {\n                flag = true\n                break\n            }\n        }\n        if flag {\n            result = append(result, 0)\n            for k := len(result) - 1; k > j; k-- {\n                result[k] = result[k - 1]\n            }\n            result[j] = max\n        } else {\n            result = append(result, max)\n        }\n        nums2[max_index] = 0\n    }\n\n    for i = N; i < len(nums2); i++ {\n        num2 = nums2[i]\n        max = 0\n        max_index = 0\n        for j = 0",
    "    var result []int\n    var i, j int\n    var n1, n2 int\n    var p int\n    var n int\n    var m int\n    var k int\n    var l int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o int\n    var p1 int\n    var q int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o1 int\n    var p2 int\n    var q1 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o2 int\n    var p3 int\n    var q2 int\n    var r3 int\n    var s3 int\n    var t",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max_index * max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var m, n int\n    var product int\n    var max_product int\n    var max_i, max_j int\n\n    for i = 0; i < len(nums1); i++ {\n        for j = 0; j < len(nums2); j++ {\n            product = nums1[i] * nums2[j]\n            if len(result) < N {\n                result = append(result, product)\n            } else {\n                max_product = result[0]\n                max_i = 0\n                max_j = 0\n                for m = 0; m < len(result); m++ {\n                    for n = 0; n < len(result); n++ {\n                        if result[m] * result[n] > max_product {\n                            max_product = result[m] * result[n]\n                            max_i = m\n                            max_j = n\n                        }\n                    }\n                }\n                if product < max_product {\n                    result[max_i] = nums1[i]\n                    result[max_j] = nums2[j]\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i < N; i++ {\n        max := -1\n        max_i := -1\n        max_j := -1\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_i], nums1[max_i+1:]...)\n        nums2 = append(nums2[:max_j], nums2[max_j+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        result = append(result, max)\n    }\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var n1, n2 int\n\n    for i = 0; i < N; i++ {\n        n1 = nums1[0]\n        n2 = nums2[0]\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > n1 {\n                n1 = nums1[j]\n            }\n        }\n        for k = 0; k < len(nums2); k++ {\n            if nums2[k] > n2 {\n                n2 = nums2[k]\n            }\n        }\n        result = append(result, n1 * n2)\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] == n1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                break\n            }\n        }\n        for k = 0; k < len(nums2); k++ {\n            if nums2[k] == n2 {\n                nums2 = append(nums2[:k], nums2[k+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * nums1[max_index])\n    }\n    return res\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var res []int\n    for i := 0; i < N; i++ {\n        max := -1\n        max_i := 0\n        max_j := 0\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1[max_i] = -1\n        nums2[max_j] = -1\n    }\n    return res\n}\n",
    "    // TODO: implement\n    return []int{}\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        max := 0\n        for _, n1 := range nums1 {\n            for _, n2 := range nums2 {\n                if n1 * n2 > max {\n                    max = n1 * n2\n                }\n            }\n        }\n        result = append(result, max)\n        for i, n1 := range nums1 {\n            if n1 * nums2[0] == max {\n                nums1 = append(nums1[:i], nums1[i+1:]...)\n                break\n            }\n        }\n        for i, n2 := range nums2 {\n            if n2 * nums1[0] == max {\n                nums2 = append(nums2[:i], nums2[i+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > max {\n                max = nums2[j] * max\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        res = append(res, max)\n    }\n    return res\n}\n",
    "    var result []int\n    var p int\n    for i := 0; i < N; i++ {\n        p = 0\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > p {\n                    p = nums1[j] * nums2[k]\n                }\n            }\n        }\n        result = append(result, p)\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] == p {\n                    nums1[j] = 0\n                    nums2[k] = 0\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var max int\n    var max_i, max_j int\n    var max_nums1, max_nums2 []int\n    var nums1_len, nums2_len int\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    max_nums1 = make([]int, nums1_len)\n    max_nums2 = make([]int, nums2_len)\n    for i = 0; i < nums1_len; i++ {\n        max_nums1[i] = nums1[i]\n    }\n    for i = 0; i < nums2_len; i++ {\n        max_nums2[i] = nums2[i]\n    }\n    for i = 0; i < N; i++ {\n        max = 0\n        for j = 0; j < nums1_len; j++ {\n            if max_nums1[j] > max {\n                max = max_nums1[j]\n                max_i = j\n            }\n        }\n        max = 0\n        for j = 0; j < nums2_len; j++ {\n            if max_nums2[j] > max {\n                max = max_nums2[j]\n                max_j = j\n            }\n        }\n        result = append(result, nums1[max_i] * nums2[max_j])\n        max_nums1[max_i] = 0\n        max_nums2[max_j] = 0\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var maxIndex int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                maxIndex = j\n            }\n        }\n        nums1[maxIndex] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * maxIndex)\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        nums2[max_index] = 0\n        res = append(res, max_index)\n    }\n    return res\n}\n",
    "    // TODO: implement\n    return []int{}\n}\n",
    "    // sort nums1\n    for i := 0; i < len(nums1); i++ {\n        for j := i + 1; j < len(nums1); j++ {\n            if nums1[i] < nums1[j] {\n                nums1[i], nums1[j] = nums1[j], nums1[i]\n            }\n        }\n    }\n    // sort nums2\n    for i := 0; i < len(nums2); i++ {\n        for j := i + 1; j < len(nums2); j++ {\n            if nums2[i] < nums2[j] {\n                nums2[i], nums2[j] = nums2[j], nums2[i]\n            }\n        }\n    }\n    // find the N largest products\n    var res []int\n    for i := 0; i < N; i++ {\n        res = append(res, nums1[i] * nums2[i])\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            result = append(result, nums1[i] * nums2[j])\n            j++\n        } else {\n            result = append(result, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var res []int\n    for i := 0; i < N; i++ {\n        max := -1\n        max_i := -1\n        max_j := -1\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1[max_i] = -1\n        nums2[max_j] = -1\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        res = append(res, max)\n    }\n    return res\n}\n",
    "    var res []int\n    var temp []int\n    for i := 0; i < N; i++ {\n        for j := 0; j < N; j++ {\n            temp = append(temp, nums1[i] * nums2[j])\n        }\n    }\n    for i := 0; i < N; i++ {\n        max := 0\n        for j := 0; j < len(temp); j++ {\n            if temp[j] > max {\n                max = temp[j]\n            }\n        }\n        res = append(res, max)\n        for j := 0; j < len(temp); j++ {\n            if temp[j] == max {\n                temp = append(temp[:j], temp[j+1:]...)\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    if N <= 0 {\n        return []int{}\n    }\n    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    var max_product int\n    var max_index int\n    var max_index_1 int\n    var max_index_2 int\n    for i := 0; i < N; i++ {\n        max_product = 0\n        max_index = 0\n        max_index_1 = 0\n        max_index_2 = 0\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index_1 = j\n                    max_index_2 = k\n                    max_index = j * len(nums2) + k\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1[max_index_1] = 0\n        nums2[max_index_2] = 0\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var max int\n    var max_index int\n    var max_index_2 int\n    var max_index_2_2 int\n    var max_2 int\n    var max_2_2 int\n    var max_2_index int\n    var max_2_index_2 int\n    var max_2_index_2_2 int\n    var max_3 int\n    var max_3_2 int\n    var max_3_index int\n    var max_3_index_2 int\n    var max_3_index_2_2 int\n    var max_4 int\n    var max_4_2 int\n    var max_4_index int\n    var max_4_index_2 int\n    var max_4_index_2_2 int\n    var max_5 int\n    var max_5_2 int\n    var max_5_index int\n    var max_5_index_2 int\n    var max_5_index_2_2 int\n    var max_6 int\n    var max_6_2 int\n    var max_6_index int\n    var max_6_index_2 int\n    var max_6_index_2_2 int\n    var max_7 int\n    var max_7_2 int\n    var max_7_index int\n    var max_7_index_2 int\n    var max_7_index_2_2 int\n    var max_8 int\n    var max_8_2 int\n    var max_8_index int\n    var max_8_index_2 int\n    var max_8_index_2_2 int\n    var max_9 int\n    var max_9_2 int\n    var max_9_index int\n    var max_9_index_2 int\n    var max_9_index_2_2 int\n    var max_10 int\n    var max_10_2 int\n    var max_10_index int\n    var max_10_index_2 int\n    var max_10_index_2_2 int\n    var max_11 int\n    var max_11_2 int\n    var max_11_index int\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n        max = 0\n        max_index = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2 = append(nums2[:max_index], nums2[max_index+1:]...)\n        res = append(res, max * max)\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max1 {\n                max1 = nums1[j]\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max2 {\n                max2 = nums2[j]\n            }\n        }\n        res = append(res, max1 * max2)\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] == max1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                break\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] == max2 {\n                nums2 = append(nums2[:j], nums2[j+1:]...)\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * max_index)\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max1 {\n                max1 = nums1[j]\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max2 {\n                max2 = nums2[j]\n            }\n        }\n        res = append(res, max1 * max2)\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] == max1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                break\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] == max2 {\n                nums2 = append(nums2[:j], nums2[j+1:]...)\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        result = append(result, nums1[max_index])\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N <= 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    var i, j int\n    for i = 0; i < len(nums1); i++ {\n        for j = 0; j < len(nums2); j++ {\n            result = append(result, nums1[i] * nums2[j])\n        }\n    }\n    quick_sort(result, 0, len(result) - 1)\n    return result[len(result) - N:]\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var n1, n2 int\n    var p int\n    var found bool\n    for i = 0; i < N; i++ {\n        n1 = nums1[0]\n        n2 = nums2[0]\n        for j = 0; j < len(nums1); j++ {\n            for k = 0; k < len(nums2); k++ {\n                p = nums1[j] * nums2[k]\n                if p > n1 * n2 {\n                    n1 = nums1[j]\n                    n2 = nums2[k]\n                }\n            }\n        }\n        result = append(result, n1 * n2)\n        found = false\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] == n1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                found = true\n                break\n            }\n        }\n        if !found {\n            for j = 0; j < len(nums2); j++ {\n                if nums2[j] == n2 {\n                    nums2 = append(nums2[:j], nums2[j+1:]...)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return nil\n    }\n    if N == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return nil\n    }\n    products := make([]int, len(nums1) * len(nums2))\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            products[i * len(nums2) + j] = nums1[i] * nums2[j]\n        }\n    }\n    return quick_select(products, N)\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    res := make([]int, N)\n    for i := 0; i < N; i++ {\n        res[i] = -1\n    }\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            product := nums1[i] * nums2[j]\n            if product > res[N-1] {\n                res[N-1] = product\n                for k := N - 1; k > 0; k-- {\n                    if res[k] > res[k-1] {\n                        res[k], res[k-1] = res[k-1], res[k]\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    products := make([]int, 0)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            products = append(products, nums1[i] * nums2[j])\n        }\n    }\n    return products\n}\n",
    "    var res []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_idx int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_idx = j\n            }\n        }\n        nums1[max_idx] = -1\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * max_idx)\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var (\n        result []int\n        i int\n        j int\n        k int\n        l int\n        m int\n        n int\n        p int\n        q int\n        r int\n        s int\n        t int\n        u int\n        v int\n        w int\n        x int\n        y int\n        z int\n    )\n    if N == 0 {\n        return result\n    }\n    if N == 1 {\n        result = append(result, nums1[0] * nums2[0])\n        return result\n    }\n    if N == 2 {\n        result = append(result, nums1[0] * nums2[0])\n        result = append(result, nums1[1] * nums2[1])\n        return result\n    }\n    if N == 3 {\n        result = append(result, nums1[0] * nums2[0])\n        result = append(result, nums1[1] * nums2[1])\n        result = append(result, nums1[2] * nums2[2])\n        return result\n    }\n    if N == 4 {\n        result = append(result, nums1[0] * nums2[0])\n        result = append(result, nums1[1] * nums2[1])\n        result = append(result, nums1[2] * nums2[2])\n        result = append(result, nums1[3] * nums2[3])\n        return result\n    }\n    if N == 5 {\n        result = append(result, nums1[0] * nums2[0])\n        result = append(result, nums1[1] * nums2[1])\n        result = append(result, nums1[2] * nums2[2])\n        result = append(result, nums1[3] * nums2[3])\n        result = append(result, nums1[4] * nums2[4])\n        return result\n    }\n    if N == 6 {\n        result = append(result, nums1[0] * nums2[0])\n        result = append",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var l1, l2 int = len(nums1), len(nums2)\n    var max1, max2 int = nums1[0], nums2[0]\n    var max1_i, max2_i int = 0, 0\n    for i = 0; i < N; i++ {\n        if max1 > max2 {\n            result = append(result, max1 * nums2[max2_i])\n            max1_i++\n            if max1_i >= l1 {\n                max1_i = l1 - 1\n            }\n            max1 = nums1[max1_i]\n            for j = 0; j < l2; j++ {\n                if nums2[j] > max2 {\n                    max2 = nums2[j]\n                    max2_i = j\n                }\n            }\n        } else {\n            result = append(result, max2 * nums1[max1_i])\n            max2_i++\n            if max2_i >= l2 {\n                max2_i = l2 - 1\n            }\n            max2 = nums2[max2_i]\n            for j = 0; j < l1; j++ {\n                if nums1[j] > max1 {\n                    max1 = nums1[j]\n                    max1_i = j\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n\n    var result []int\n    var max_product int\n    var max_product_index int\n    var max_product_index_1 int\n    var max_product_index_2 int\n    var max_product_index_1_tmp int\n    var max_product_index_2_tmp int\n    var max_product_tmp int\n    var max_product_index_tmp int\n    var i int\n    var j int\n\n    for i = 0; i < N; i++ {\n        max_product = nums1[0] * nums2[0]\n        max_product_index = 0\n        max_product_index_1 = 0\n        max_product_index_2 = 0\n\n        for j = 0; j < len(nums1); j++ {\n            max_product_index_1_tmp = j\n            max_product_index_2_tmp = 0\n            max_product_tmp = nums1[j] * nums2[0]\n\n            if max_product_tmp > max_product {\n                max_product = max_product_tmp\n                max_product_index = max_product_index_tmp\n                max_product_index_1 = max_product_index_1_tmp\n                max_product_index_2 = max_product_index_2_tmp\n            }\n\n            for k := 0; k < len(nums2); k++ {\n                max_product_index_tmp++\n                max_product_index_2_tmp = k\n                max_product_tmp = nums1[j] * nums2[k]\n\n                if max_product_tmp > max_product {\n                    max_product = max_product_tmp\n                    max_product_index = max_product_index_tmp\n                    max_product_index_1 = max_product_index_1_tmp\n                    max_product_index_2 = max_product_index_2_tmp\n                }\n",
    "    var res []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            res = append(res, nums1[i] * nums2[j])\n            j++\n        } else {\n            res = append(res, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var max int\n    var max_i, max_j int\n    for i = 0; i < N; i++ {\n        max = 0\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_i = j\n            }\n        }\n        nums1[max_i] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_j = j\n            }\n        }\n        nums2[max_j] = 0\n        result = append(result, max_i * max_j)\n    }\n    return result\n}\n",
    "    var res []int\n    var m = make(map[int]int)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = i * len(nums2) + j\n        }\n    }\n    var keys []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    var l = len(keys)\n    for i := 0; i < N; i++ {\n        var max = keys[0]\n        var max_index = 0\n        for j := 1; j < l - i; j++ {\n            if keys[j] > max {\n                max = keys[j]\n                max_index = j\n            }\n        }\n        res = append(res, max)\n        keys[max_index] = keys[l - i - 1]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var l1, l2 int = len(nums1), len(nums2)\n\n    for i = 0; i < N; i++ {\n        var max int = -1\n        var max_i, max_j int\n        for j = 0; j < l1; j++ {\n            for k = 0; k < l2; k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        result = append(result, max)\n        nums1[max_i] = -1\n        nums2[max_j] = -1\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    // TODO\n    return []int{}\n}\n",
    "    var result []int\n    var max_product int\n    var max_index int\n    var max_index_1 int\n    var max_index_2 int\n    var max_index_3 int\n    var max_index_4 int\n    var max_index_5 int\n    var max_index_6 int\n    var max_index_7 int\n    var max_index_8 int\n    var max_index_9 int\n    var max_index_10 int\n    var max_index_11 int\n    var max_index_12 int\n    var max_index_13 int\n    var max_index_14 int\n    var max_index_15 int\n    var max_index_16 int\n    var max_index_17 int\n    var max_index_18 int\n    var max_index_19 int\n    var max_index_20 int\n    var max_index_21 int\n    var max_index_22 int\n    var max_index_23 int\n    var max_index_24 int\n    var max_index_25 int\n    var max_index_26 int\n    var max_index_27 int\n    var max_index_28 int\n    var max_index_29 int\n    var max_index_30 int\n    var max_index_31 int\n    var max_index_32 int\n    var max_index_33 int\n    var max_index_34 int\n    var max_index_35 int\n    var max_index_36 int\n    var max_index_37 int\n    var max_index_38 int\n    var max_index_39 int\n    var max_index_40 int\n    var max_index_41 int\n    var max_index_42 int\n    var max_index_43 int\n    var max_index_44 int\n    var max_index_45 int\n    var max_index_46 int\n    var max_index_47 int\n    var max_index_48 int\n    var max_index_49 int\n    var max_index_50 int\n    var max_index_51 int\n    var max_index_52 int\n    var max_index_53 int\n    var max_index_54 int\n    var max_index",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max, max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * nums1[max_index])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i < len(nums1) && j < len(nums2) {\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j+1] {\n            result = append(result, nums1[i] * nums2[j])\n            j++\n        } else {\n            result = append(result, nums1[i] * nums2[j+1])\n            i++\n        }\n    }\n    return result\n}\n",
    "    var res []int\n    var i, j, k int\n    var m, n int\n    m = len(nums1)\n    n = len(nums2)\n    for i = 0; i < N; i++ {\n        var max int\n        var max_i, max_j int\n        max = -1\n        for j = 0; j < m; j++ {\n            for k = 0; k < n; k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1[max_i] = -1\n        nums2[max_j] = -1\n    }\n    return res\n}\n",
    "    var result []int\n    var max int\n    var max_index int\n    var max_index_2 int\n    var max_index_3 int\n    var max_index_4 int\n    var max_index_5 int\n    var max_index_6 int\n    var max_index_7 int\n    var max_index_8 int\n    var max_index_9 int\n    var max_index_10 int\n    var max_index_11 int\n    var max_index_12 int\n    var max_index_13 int\n    var max_index_14 int\n    var max_index_15 int\n    var max_index_16 int\n    var max_index_17 int\n    var max_index_18 int\n    var max_index_19 int\n    var max_index_20 int\n    var max_index_21 int\n    var max_index_22 int\n    var max_index_23 int\n    var max_index_24 int\n    var max_index_25 int\n    var max_index_26 int\n    var max_index_27 int\n    var max_index_28 int\n    var max_index_29 int\n    var max_index_30 int\n    var max_index_31 int\n    var max_index_32 int\n    var max_index_33 int\n    var max_index_34 int\n    var max_index_35 int\n    var max_index_36 int\n    var max_index_37 int\n    var max_index_38 int\n    var max_index_39 int\n    var max_index_40 int\n    var max_index_41 int\n    var max_index_42 int\n    var max_index_43 int\n    var max_index_44 int\n    var max_index_45 int\n    var max_index_46 int\n    var max_index_47 int\n    var max_index_48 int\n    var max_index_49 int\n    var max_index_50 int\n    var max_index_51 int\n    var max_index_52 int\n    var max_index_53 int\n    var max_index_54 int\n    var max_index_55 int\n    var max_index_56",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return nil\n    }\n    if N > len(nums1) * len(nums2) {\n        return nil\n    }\n    var res []int\n    for i := 0; i < N; i++ {\n        max := -1\n        max_i := -1\n        max_j := -1\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1 = append(nums1[:max_i], nums1[max_i+1:]...)\n        nums2 = append(nums2[:max_j], nums2[max_j+1:]...)\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        res = append(res, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var maxIndex int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                maxIndex = j\n            }\n        }\n        nums1[maxIndex] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * maxIndex)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max1, max2 int\n        for _, v := range nums1 {\n            if v > max1 {\n                max1 = v\n            }\n        }\n        for _, v := range nums2 {\n            if v > max2 {\n                max2 = v\n            }\n        }\n        res = append(res, max1*max2)\n        for i, v := range nums1 {\n            if v == max1 {\n                nums1 = append(nums1[:i], nums1[i+1:]...)\n                break\n            }\n        }\n        for i, v := range nums2 {\n            if v == max2 {\n                nums2 = append(nums2[:i], nums2[i+1:]...)\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    // TODO\n    return []int{}\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > nums1[max1] {\n                max1 = j\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > nums2[max2] {\n                max2 = j\n            }\n        }\n        result = append(result, nums1[max1] * nums2[max2])\n        nums1[max1], nums2[max2] = 0, 0\n    }\n    return result\n}\n",
    "    var result []int\n    var max_product int\n    var max_index int\n    var max_index_2 int\n    var max_index_3 int\n    var max_index_4 int\n    var max_index_5 int\n    var max_index_6 int\n    var max_index_7 int\n    var max_index_8 int\n    var max_index_9 int\n    var max_index_10 int\n    var max_index_11 int\n    var max_index_12 int\n    var max_index_13 int\n    var max_index_14 int\n    var max_index_15 int\n    var max_index_16 int\n    var max_index_17 int\n    var max_index_18 int\n    var max_index_19 int\n    var max_index_20 int\n    var max_index_21 int\n    var max_index_22 int\n    var max_index_23 int\n    var max_index_24 int\n    var max_index_25 int\n    var max_index_26 int\n    var max_index_27 int\n    var max_index_28 int\n    var max_index_29 int\n    var max_index_30 int\n    var max_index_31 int\n    var max_index_32 int\n    var max_index_33 int\n    var max_index_34 int\n    var max_index_35 int\n    var max_index_36 int\n    var max_index_37 int\n    var max_index_38 int\n    var max_index_39 int\n    var max_index_40 int\n    var max_index_41 int\n    var max_index_42 int\n    var max_index_43 int\n    var max_index_44 int\n    var max_index_45 int\n    var max_index_46 int\n    var max_index_47 int\n    var max_index_48 int\n    var max_index_49 int\n    var max_index_50 int\n    var max_index_51 int\n    var max_index_52 int\n    var max_index_53 int\n    var max_index_54 int\n    var max_index_55 int\n    var max_index",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_product_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_product_index = j * len(nums2) + k\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1[max_product_index / len(nums2)] = 0\n        nums2[max_product_index % len(nums2)] = 0\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var n1, n2 int\n    var p int\n    var m1, m2 int\n    var m1_idx, m2_idx int\n    var m1_found, m2_found bool\n    var m1_idx_found, m2_idx_found bool\n    var m1_idx_found_idx, m2_idx_found_idx int\n\n    for i = 0; i < N; i++ {\n        m1_found = false\n        m2_found = false\n        m1_idx_found = false\n        m2_idx_found = false\n        m1_idx_found_idx = -1\n        m2_idx_found_idx = -1\n\n        for j = 0; j < len(nums1); j++ {\n            n1 = nums1[j]\n            if m1_idx_found {\n                if j == m1_idx_found_idx {\n                    continue\n                }\n            }\n            for k = 0; k < len(nums2); k++ {\n                n2 = nums2[k]\n                if m2_idx_found {\n                    if k == m2_idx_found_idx {\n                        continue\n                    }\n                }\n                p = n1 * n2\n                if !m1_found {\n                    m1 = p\n                    m1_idx = j\n                    m1_found = true\n                } else if p > m1 {\n                    m1 = p\n                    m1_idx = j\n                }\n                if !m2_found {\n                    m2 = p\n                    m2_idx = k\n                    m2_found = true\n                } else if p > m2 {\n                    m2 = p\n                    m2_idx = k\n                }\n            }\n        }\n        if m1 > m2 {\n            result = append(result, m1)\n            m1_idx_found = true\n            m1_idx_found_idx = m1_idx\n        } else {\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > max {\n                max = nums2[j] * max\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var products []int\n    for _, n1 := range nums1 {\n        for _, n2 := range nums2 {\n            products = append(products, n1 * n2)\n        }\n    }\n    return products\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        max := -1\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var n1, n2 int\n    var p int\n    var n int\n\n    n = len(nums1)\n    if len(nums2) < n {\n        n = len(nums2)\n    }\n\n    for i = 0; i < N; i++ {\n        p = 0\n        for j = 0; j < n; j++ {\n            for k = 0; k < n; k++ {\n                if nums1[j] * nums2[k] > p {\n                    p = nums1[j] * nums2[k]\n                    n1 = j\n                    n2 = k\n                }\n            }\n        }\n        result = append(result, p)\n        nums1[n1] = 0\n        nums2[n2] = 0\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                index = j\n            }\n        }\n        nums1[index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                index = j\n            }\n        }\n        nums2[index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    for _, n1 := range nums1 {\n        for _, n2 := range nums2 {\n            result = append(result, n1*n2)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max1, max2 int\n        var index1, index2 int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max1 {\n                max1 = nums1[j]\n                index1 = j\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max2 {\n                max2 = nums2[j]\n                index2 = j\n            }\n        }\n        result = append(result, max1 * max2)\n        nums1[index1] = 0\n        nums2[index2] = 0\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var product int\n    var nums [][]int\n    for i = 0; i < len(nums1); i++ {\n        for j = 0; j < len(nums2); j++ {\n            product = nums1[i] * nums2[j]\n            if len(nums) == 0 {\n                nums = append(nums, []int{product, i, j})\n            } else {\n                for k = 0; k < len(nums); k++ {\n                    if product > nums[k][0] {\n                        nums = append(nums[:k], append([][]int{{product, i, j}}, nums[k:]...)...)\n                        break\n                    } else if k == len(nums) - 1 {\n                        nums = append(nums, []int{product, i, j})\n                    }\n                }\n            }\n        }\n    }\n    for i = 0; i < N; i++ {\n        result = append(result, nums[i][0])\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max_index * max)\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var n1, n2 int\n    var product int\n    var max int\n\n    for i = 0; i < N; i++ {\n        max = 0\n        for j = 0; j < len(nums1); j++ {\n            for k = 0; k < len(nums2); k++ {\n                product = nums1[j] * nums2[k]\n                if product > max {\n                    max = product\n                    n1 = nums1[j]\n                    n2 = nums2[k]\n                }\n            }\n        }\n        result = append(result, max)\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] == n1 {\n                nums1 = append(nums1[:j], nums1[j+1:]...)\n                break\n            }\n        }\n        for k = 0; k < len(nums2); k++ {\n            if nums2[k] == n2 {\n                nums2 = append(nums2[:k], nums2[k+1:]...)\n                break\n            }\n        }\n    }\n\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 || N == 0 {\n        return []int{}\n    }\n\n    if N > len(nums1) * len(nums2) {\n        N = len(nums1) * len(nums2)\n    }\n\n    var products []int\n    for _, n1 := range nums1 {\n        for _, n2 := range nums2 {\n            products = append(products, n1 * n2)\n        }\n    }\n\n    // sort.Ints(products)\n    // return products[len(products) - N:]\n\n    // use heap\n    var heap []int\n    for _, p := range products {\n        if len(heap) < N {\n            heap = append(heap, p)\n        } else {\n            if p > heap[0] {\n                heap[0] = p\n            }\n        }\n        heapify(heap, 0)\n    }\n\n    return heap\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        result = append(result, nums1[max_index])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i < N; i++ {\n        max := 0\n        for _, v1 := range nums1 {\n            for _, v2 := range nums2 {\n                if v1 * v2 > max {\n                    max = v1 * v2\n                }\n            }\n        }\n        result = append(result, max)\n        for k, v := range nums1 {\n            if v * nums2[0] == max {\n                nums1 = append(nums1[:k], nums1[k+1:]...)\n                break\n            }\n        }\n        for k, v := range nums2 {\n            if v * nums1[0] == max {\n                nums2 = append(nums2[:k], nums2[k+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var temp []int\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            temp = append(temp, nums1[i] * nums2[j])\n        }\n    }\n    for i := 0; i < N; i++ {\n        max := 0\n        for j := 0; j < len(temp); j++ {\n            if temp[j] > max {\n                max = temp[j]\n            }\n        }\n        result = append(result, max)\n        for j := 0; j < len(temp); j++ {\n            if temp[j] == max {\n                temp = append(temp[:j], temp[j+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    var product int\n    var i, j int\n    for i = 0; i < len(nums1); i++ {\n        for j = 0; j < len(nums2); j++ {\n            product = nums1[i] * nums2[j]\n            if len(result) < N {\n                result = append(result, product)\n            } else {\n                if product > result[0] {\n                    result[0] = product\n                }\n            }\n            result = sort(result)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max1, max2 int\n        for _, num := range nums1 {\n            if num > max1 {\n                max1 = num\n            }\n        }\n        for _, num := range nums2 {\n            if num > max2 {\n                max2 = num\n            }\n        }\n        result = append(result, max1 * max2)\n        nums1 = remove(nums1, max1)\n        nums2 = remove(nums2, max2)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        max1, max2 := 0, 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > nums1[max1] {\n                max1 = j\n            }\n        }\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > nums2[max2] {\n                max2 = j\n            }\n        }\n        result = append(result, nums1[max1] * nums2[max2])\n        nums1[max1] = 0\n        nums2[max2] = 0\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * nums1[max_index])\n    }\n    return result\n}\n",
    "    var products []int\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            products = append(products, nums1[i] * nums2[j])\n        }\n    }\n    return products\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var product int\n    var nums1_len = len(nums1)\n    var nums2_len = len(nums2)\n    var nums1_index = make([]int, nums1_len)\n    var nums2_index = make([]int, nums2_len)\n    var nums1_max_index = make([]int, nums1_len)\n    var nums2_max_index = make([]int, nums2_len)\n    var nums1_max_product = make([]int, nums1_len)\n    var nums2_max_product = make([]int, nums2_len)\n    for i = 0; i < nums1_len; i++ {\n        nums1_index[i] = i\n        nums1_max_index[i] = i\n        nums1_max_product[i] = nums1[i] * nums2[0]\n    }\n    for i = 0; i < nums2_len; i++ {\n        nums2_index[i] = i\n        nums2_max_index[i] = i\n        nums2_max_product[i] = nums1[0] * nums2[i]\n    }\n    for i = 0; i < N; i++ {\n        product = nums1_max_product[0] * nums2_max_product[0]\n        for j = 1; j < nums1_len; j++ {\n            if product < nums1_max_product[j] * nums2_max_product[0] {\n                product = nums1_max_product[j] * nums2_max_product[0]\n            }\n        }\n        for j = 1; j < nums2_len; j++ {\n            if product < nums1_max_product[0] * nums2_max_product[j] {\n                product = nums1_max_product[0] * nums2_max_product[j]\n            }",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        for _, num1 := range nums1 {\n            for _, num2 := range nums2 {\n                if num1 * num2 > max {\n                    max = num1 * num2\n                }\n            }\n        }\n        result = append(result, max)\n        for i, num1 := range nums1 {\n            if num1 * nums2[0] == max {\n                nums1 = append(nums1[:i], nums1[i+1:]...)\n                break\n            }\n        }\n        for i, num2 := range nums2 {\n            if num2 * nums1[0] == max {\n                nums2 = append(nums2[:i], nums2[i+1:]...)\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        res = append(res, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return res\n}\n",
    "    var result []int\n    var max int\n    var max_index int\n    var max_index2 int\n    var max_index3 int\n    var max_index4 int\n    var max_index5 int\n    var max_index6 int\n    var max_index7 int\n    var max_index8 int\n    var max_index9 int\n    var max_index10 int\n    var max_index11 int\n    var max_index12 int\n    var max_index13 int\n    var max_index14 int\n    var max_index15 int\n    var max_index16 int\n    var max_index17 int\n    var max_index18 int\n    var max_index19 int\n    var max_index20 int\n    var max_index21 int\n    var max_index22 int\n    var max_index23 int\n    var max_index24 int\n    var max_index25 int\n    var max_index26 int\n    var max_index27 int\n    var max_index28 int\n    var max_index29 int\n    var max_index30 int\n    var max_index31 int\n    var max_index32 int\n    var max_index33 int\n    var max_index34 int\n    var max_index35 int\n    var max_index36 int\n    var max_index37 int\n    var max_index38 int\n    var max_index39 int\n    var max_index40 int\n    var max_index41 int\n    var max_index42 int\n    var max_index43 int\n    var max_index44 int\n    var max_index45 int\n    var max_index46 int\n    var max_index47 int\n    var max_index48 int\n    var max_index49 int\n    var max_index50 int\n    var max_index51 int\n    var max_index52 int\n    var max_index53 int\n    var max_index54 int\n    var max_index55 int\n    var max_index56 int\n    var max_index57 int\n    var max_index58 int\n    var max_index59 int\n    var max_index60 int\n    var max_index61 int\n    var max_index62 int\n    var max_index",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2[max_index] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var products []int\n    for _, num1 := range nums1 {\n        for _, num2 := range nums2 {\n            products = append(products, num1 * num2)\n        }\n    }\n    return products\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var m = make(map[int]int)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = nums1[i]\n        }\n    }\n    for i := 0; i < N; i++ {\n        var max = 0\n        for k, v := range m {\n            if k > max {\n                max = k\n            }\n        }\n        result = append(result, m[max])\n        delete(m, max)\n    }\n    return result\n}\n",
    "    var products []int\n    for _, n1 := range nums1 {\n        for _, n2 := range nums2 {\n            products = append(products, n1*n2)\n        }\n    }\n    return products\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        result = append(result, nums1[max_index])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max_product int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max_product {\n                    max_product = nums1[j] * nums2[k]\n                    max_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_index], nums1[max_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    var max int\n    var max_index int\n    for i := 0; i < N; i++ {\n        max = 0\n        max_index = 0\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max_index * max)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var max int\n    var max_index int\n    var index int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var ppp",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    var max int\n    var max_i, max_j int\n    for i = 0; i < N; i++ {\n        max = 0\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_i = j\n            }\n        }\n        nums1[max_i] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_j = j\n            }\n        }\n        nums2[max_j] = 0\n        result = append(result, max_i * max_j)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var max int\n    var max_index int\n    var nums1_len = len(nums1)\n    var nums2_len = len(nums2)\n    var nums1_max_index = make([]int, nums1_len)\n    var nums2_max_index = make([]int, nums2_len)\n\n    for i = 0; i < nums1_len; i++ {\n        max = 0\n        max_index = 0\n        for j = 0; j < nums2_len; j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n                max_index = j\n            }\n        }\n        nums2_max_index[i] = max_index\n        nums2[max_index] = 0\n    }\n\n    for i = 0; i < nums2_len; i++ {\n        max = 0\n        max_index = 0\n        for j = 0; j < nums1_len; j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1_max_index[i] = max_index\n        nums1[max_index] = 0\n    }\n\n    for i = 0; i < N; i++ {\n        max = 0\n        max_index = 0\n        for j = 0; j < nums1_len; j++ {\n            for k = 0; k < nums2_len; k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_index = j * nums2_len + k\n                }\n            }\n        }\n        result = append(result, max)\n        nums1[max_index / nums2_len] = 0\n        nums2[max_index % nums2_len] = 0\n    }\n\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * max_index)\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max_index * max)\n    }\n    return result\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var result []int\n    var i, j int\n    for i = 0; i < len(nums1); i++ {\n        for j = 0; j < len(nums2); j++ {\n            result = append(result, nums1[i] * nums2[j])\n        }\n    }\n    quick_sort(result, 0, len(result) - 1)\n    return result[len(result) - N:]\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return nil\n    }\n    if N <= 0 {\n        return nil\n    }\n    if N > len(nums1) * len(nums2) {\n        return nil\n    }\n    // sort nums1 and nums2\n    quick_sort(nums1, 0, len(nums1) - 1)\n    quick_sort(nums2, 0, len(nums2) - 1)\n    // get the largest N products\n    var products []int\n    for i := 0; i < N; i++ {\n        products = append(products, nums1[i] * nums2[i])\n    }\n    return products\n}\n",
    "    if len(nums1) == 0 || len(nums2) == 0 {\n        return []int{}\n    }\n    if N > len(nums1) * len(nums2) {\n        return []int{}\n    }\n    var res []int\n    for i := 0; i < N; i++ {\n        max := -1\n        var max_i, max_j int\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                    max_i = j\n                    max_j = k\n                }\n            }\n        }\n        res = append(res, max)\n        nums1[max_i] = -1\n        nums2[max_j] = -1\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var maxIndex int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                maxIndex = j\n            }\n        }\n        nums1[maxIndex] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > max {\n                max = nums2[j] * max\n                maxIndex = j\n            }\n        }\n        nums2[maxIndex] = 0\n        result = append(result, max)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j int\n    for i = 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j = 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j = 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var result []int\n    var i, j, k int\n    var product int\n    var nums1_len = len(nums1)\n    var nums2_len = len(nums2)\n    var nums1_index = make([]int, nums1_len)\n    var nums2_index = make([]int, nums2_len)\n    for i = 0; i < nums1_len; i++ {\n        nums1_index[i] = i\n    }\n    for i = 0; i < nums2_len; i++ {\n        nums2_index[i] = i\n    }\n    for i = 0; i < N; i++ {\n        product = 0\n        for j = 0; j < nums1_len; j++ {\n            for k = 0; k < nums2_len; k++ {\n                if product < nums1[nums1_index[j]] * nums2[nums2_index[k]] {\n                    product = nums1[nums1_index[j]] * nums2[nums2_index[k]]\n                    nums1_index[j], nums2_index[k] = -1, -1\n                }\n            }\n        }\n        result = append(result, product)\n    }\n    return result\n}\n",
    "    var result []int\n    var m = make(map[int]int)\n    for i := 0; i < len(nums1); i++ {\n        for j := 0; j < len(nums2); j++ {\n            m[nums1[i] * nums2[j]] = i * len(nums2) + j\n        }\n    }\n    var keys []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    for i := 0; i < N; i++ {\n        max := 0\n        for j := 0; j < len(keys); j++ {\n            if keys[j] > max {\n                max = keys[j]\n            }\n        }\n        result = append(result, max)\n        delete(m, max)\n        keys = keys[:len(keys)-1]\n    }\n    return result\n}\n",
    "    // sort nums1 and nums2 in descending order\n    sort_desc(nums1)\n    sort_desc(nums2)\n\n    // initialize a max heap\n    heap := make([]int, 0)\n\n    // push the first N products into the heap\n    for i := 0; i < N; i++ {\n        for j := 0; j < N; j++ {\n            heap = push_heap(heap, nums1[i] * nums2[j])\n        }\n    }\n\n    // push the rest products into the heap\n    for i := N; i < len(nums1); i++ {\n        for j := N; j < len(nums2); j++ {\n            heap = push_heap(heap, nums1[i] * nums2[j])\n        }\n    }\n\n    // pop the heap\n    for i := 0; i < N; i++ {\n        heap = pop_heap(heap)\n    }\n\n    return heap\n}\n",
    "    var res []int\n    for _, v1 := range nums1 {\n        for _, v2 := range nums2 {\n            res = append(res, v1 * v2)\n        }\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < N; i++ {\n        max := 0\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] > max {\n                    max = nums1[j] * nums2[k]\n                }\n            }\n        }\n        result = append(result, max)\n        for j := 0; j < len(nums1); j++ {\n            for k := 0; k < len(nums2); k++ {\n                if nums1[j] * nums2[k] == max {\n                    nums1[j] = 0\n                    nums2[k] = 0\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] * max > nums1[max_index] {\n                nums1[max_index] = nums2[j] * max\n            }\n        }\n        res = append(res, nums1[max_index])\n    }\n    return res\n}\n",
    "    var result []int\n    var i, j, k int\n    var product int\n    var max_product int\n    var max_product_index int\n\n    for i = 0; i < N; i++ {\n        max_product = 0\n        for j = 0; j < len(nums1); j++ {\n            for k = 0; k < len(nums2); k++ {\n                product = nums1[j] * nums2[k]\n                if product > max_product {\n                    max_product = product\n                    max_product_index = j\n                }\n            }\n        }\n        result = append(result, max_product)\n        nums1 = append(nums1[:max_product_index], nums1[max_product_index+1:]...)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max_index * max)\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = -1\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        result = append(result, max * max_index)\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < N; i++ {\n        var max int\n        var max_index int\n        for j := 0; j < len(nums1); j++ {\n            if nums1[j] > max {\n                max = nums1[j]\n                max_index = j\n            }\n        }\n        nums1[max_index] = 0\n        max = 0\n        for j := 0; j < len(nums2); j++ {\n            if nums2[j] > max {\n                max = nums2[j]\n            }\n        }\n        res = append(res, max * max_index)\n    }\n    return res\n}\n"
  ]
}