{
  "name": "mbpp_446_count_Occurrence",
  "language": "go_test.go",
  "prompt": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, v2 := range tup_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    tup_v := reflect.ValueOf(tup)\n    lst_v := reflect.ValueOf(lst)\n    count := 0\n    for i := 0; i < lst_v.Len(); i++ {\n        for j := 0; j < tup_v.Len(); j++ {\n            if reflect.DeepEqual(lst_v.Index(i).Interface(), tup_v.Index(j).Interface()) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v1 := range tup.([]string) {\n            for _, v2 := range lst.([]string) {\n                if v1 == v2 {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, v1 := range tup.([]int) {\n            for _, v2 := range lst.([]int) {\n                if v1 == v2 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            t := tup.([]int)\n            l := lst.([]int)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a tuple\")\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case string:\n        return strings.Count(tup.(string), lst.(string))\n    case []int:\n        count := 0\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            count := 0\n            for _, i := range lst.([]int) {\n                for _, j := range tup_lst {\n                    if i == j {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, i := range lst.([]int) {\n                for _, j := range tup.([]int) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_str := range tup_lst {\n            for _, lst_str := range lst_lst {\n                if tup_str == lst_str {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_int := range tup_lst {\n            for _, lst_int := range lst_lst {\n                if tup_int == lst_int {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            t := tup.([]string)\n            l := lst.([]string)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case int:\n            count := 0\n            for _, v := range tup_lst {\n                if v == lst.(int) {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            count := 0\n            lst_lst := lst.([]int)\n            for _, v := range tup_lst {\n                for _, v1 := range lst_lst {\n                    if v == v1 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            t := tup.([]int)\n            l := lst.([]int)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range tup.([]string) {\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            for _, v1 := range lst.([]string) {\n                if v == v1 {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            for _, v1 := range lst.([]int) {\n                if v == v1 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case string:\n        switch lst.(type) {\n        case string:\n            return strings.Count(tup.(string), lst.(string))\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case string:\n            count := 0\n            for _, v := range tup.([]string) {\n                count += strings.Count(v, lst.(string))\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_int {\n                    if i == fmt.Sprintf(\"%d\", j) {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_str {\n                    if fmt.Sprintf(\"%d\", i) == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case string:\n        tupStr := tup.(string)\n        switch lst.(type) {\n        case string:\n            lstStr := lst.(string)\n            return strings.Count(tupStr, lstStr)\n        case []string:\n            lstStrArr := lst.([]string)\n            count := 0\n            for _, str := range lstStrArr {\n                count += strings.Count(tupStr, str)\n            }\n            return count\n        }\n    case []string:\n        tupStrArr := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lstStr := lst.(string)\n            count := 0\n            for _, str := range tupStrArr {\n                count += strings.Count(str, lstStr)\n            }\n            return count\n        case []string:\n            lstStrArr := lst.([]string)\n            count := 0\n            for _, str := range tupStrArr {\n                for _, str2 := range lstStrArr {\n                    count += strings.Count(str, str2)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case string:\n        tup_str := tup.(string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            return strings.Count(tup_str, lst_str)\n        case []string:\n            lst_str_lst := lst.([]string)\n            count := 0\n            for _, v := range lst_str_lst {\n                count += strings.Count(tup_str, v)\n            }\n            return count\n        }\n    case []string:\n        tup_str_lst := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            count := 0\n            for _, v := range tup_str_lst {\n                count += strings.Count(v, lst_str)\n            }\n            return count\n        case []string:\n            lst_str_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_str_lst {\n                for _, vv := range lst_str_lst {\n                    count += strings.Count(v, vv)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, t := range tup_lst {\n                for _, l := range lst_lst {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case string:\n        switch lst.(type) {\n        case string:\n            return strings.Count(tup.(string), lst.(string))\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                count += strings.Count(tup.(string), v)\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case string:\n            count := 0\n            for _, v := range tup.([]string) {\n                count += strings.Count(v, lst.(string))\n            }\n            return count\n        case []string:\n            count := 0\n            for _, v := range tup.([]string) {\n                for _, v2 := range lst.([]string) {\n                    count += strings.Count(v, v2)\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_ele := range tup_lst {\n            for _, lst_ele := range lst_lst {\n                if tup_ele == lst_ele {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_ele := range tup_lst {\n            for _, lst_ele := range lst_lst {\n                if tup_ele == lst_ele {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        lst_str := lst.([]string)\n        count := 0\n        for _, t := range tup_str {\n            for _, l := range lst_str {\n                if t == l {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_int := tup.([]int)\n        lst_int := lst.([]int)\n        count := 0\n        for _, t := range tup_int {\n            for _, l := range lst_int {\n                if t == l {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, t := range tup.([]string) {\n            for _, l := range lst.([]string) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, t := range tup.([]int) {\n            for _, l := range lst.([]int) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_elem := range tup_lst {\n            for _, lst_elem := range lst_lst {\n                if tup_elem == lst_elem {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_elem := range tup_lst {\n            for _, lst_elem := range lst_lst {\n                if tup_elem == lst_elem {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_ := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_ := lst.([]string)\n            count := 0\n            for _, t := range tup_ {\n                for _, l := range lst_ {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for i := 0; i < len(tup_lst); i++ {\n                for j := 0; j < len(lst_lst); j++ {\n                    if tup_lst[i] == lst_lst[j] {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_count := 0\n            for _, tup_val := range tup.([]string) {\n                for _, lst_val := range lst.([]string) {\n                    if tup_val == lst_val {\n                        tup_count++\n                    }\n                }\n            }\n            return tup_count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_count := 0\n            for _, tup_val := range tup.([]int) {\n                for _, lst_val := range lst.([]int) {\n                    if tup_val == lst_val {\n                        tup_count++\n                    }\n                }\n            }\n            return tup_count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_str {\n                    if v == len(v2) {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_int {\n                    if len(v) == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case string:\n        tup_str := tup.(string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            return strings.Count(tup_str, lst_str)\n        case []string:\n            lst_str_arr := lst.([]string)\n            count := 0\n            for _, lst_str := range lst_str_arr {\n                count += strings.Count(tup_str, lst_str)\n            }\n            return count\n        }\n    case []string:\n        tup_str_arr := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            count := 0\n            for _, tup_str := range tup_str_arr {\n                count += strings.Count(tup_str, lst_str)\n            }\n            return count\n        case []string:\n            lst_str_arr := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_str_arr {\n                for _, lst_str := range lst_str_arr {\n                    count += strings.Count(tup_str, lst_str)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    // your code\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, v := range tup_lst {\n            for _, v2 := range lst_lst {\n                if v == v2 {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, v := range tup_lst {\n            for _, v2 := range lst_lst {\n                if v == v2 {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    return 0\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return -1\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case string:\n        return strings.Count(tup.(string), lst.(string))\n    case []int:\n        count := 0\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        count := 0\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, t := range tup.([]string) {\n            for _, l := range lst.([]string) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, t := range tup.([]int) {\n            for _, l := range lst.([]int) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []float64:\n        for _, t := range tup.([]float64) {\n            for _, l := range lst.([]float64) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            count += count_Occurrence(s.Index(i).Interface(), lst)\n        }\n    case reflect.Int:\n        switch reflect.TypeOf(lst).Kind() {\n        case reflect.Slice:\n            s := reflect.ValueOf(lst)\n\n            for i := 0; i < s.Len(); i++ {\n                if tup == s.Index(i).Interface() {\n                    count++\n                }\n            }\n        default:\n            if tup == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, t := range tup.([]string) {\n                for _, l := range lst.([]string) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []float64:\n        switch lst.(type) {\n        case []float64:\n            count := 0\n            for _, t := range tup.([]float64) {\n                for _, l := range lst.([]float64) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range tup.([]interface{}) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var result int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            switch lst.(type) {\n            case []int:\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            case []string:\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            switch lst.(type) {\n            case []int:\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            case []string:\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n",
    "    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n"
  ]
}