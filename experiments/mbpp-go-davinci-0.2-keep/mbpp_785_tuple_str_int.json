{
  "name": "mbpp_785_tuple_str_int",
  "language": "go_test.go",
  "prompt": "package tuple_str_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert tuple string to integer tuple.\nfunc tuple_str_int(test_str string) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestTuple_Str_Int(t *testing.T) {\n  candidate := tuple_str_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(7, 8, 9)\"), expected: []interface{}{7, 8, 9} },\n     { actual: candidate(\"(1, 2, 3)\"), expected: []interface{}{1, 2, 3} },\n     { actual: candidate(\"(4, 5, 6)\"), expected: []interface{}{4, 5, 6} },\n     { actual: candidate(\"(7, 81, 19)\"), expected: []interface{}{7, 81, 19} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var tuple_int []interface{}\n    tuple_str := test_str[1:len(test_str)-1]\n    for _, str := range tuple_str {\n        tuple_int = append(tuple_int, int(str))\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_str_int string\n    var temp_str_int_len int\n    var temp_str_int_len_half int\n    var temp_str_int_len_half_1 int\n    var temp_str_int_len_half_2 int\n    var temp_str_int_len_half_3 int\n    var temp_str_int_len_half_4 int\n    var temp_str_int_len_half_5 int\n    var temp_str_int_len_half_6 int\n    var temp_str_int_len_half_7 int\n    var temp_str_int_len_half_8 int\n    var temp_str_int_len_half_9 int\n    var temp_str_int_len_half_10 int\n    var temp_str_int_len_half_11 int\n    var temp_str_int_len_half_12 int\n    var temp_str_int_len_half_13 int\n    var temp_str_int_len_half_14 int\n    var temp_str_int_len_half_15 int\n    var temp_str_int_len_half_16 int\n    var temp_str_int_len_half_17 int\n    var temp_str_int_len_half_18 int\n    var temp_str_int_len_half_19 int\n    var temp_str_int_len_half_20 int\n    var temp_str_int_len_half_21 int\n    var temp_str_int_len_half_22 int\n    var temp_str_int_len_half_23 int\n    var temp_str_int_len_half_24 int\n    var temp_str_int_len_half_25 int\n    var temp_str_int_len_half_26 int\n    var temp_str_int_len_half_27 int\n    var temp_str_int_len_half_28 int\n    var temp_str_int_len_half_29 int\n    var temp_str_int_len_half_30 int\n    var temp_str_",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var err error\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, err = strconv.Atoi(temp_str)\n            if err != nil {\n                fmt.Println(\"Error:\", err)\n            }\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, err = strconv.Atoi(temp_str)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    }\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            i++\n            for test_str[i] != ',' {\n                tmp_str += string(test_str[i])\n                i++\n            }\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n            i++\n            for test_str[i] != ')' {\n                tmp_str += string(test_str[i])\n                i++\n            }\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var num int\n    var err error\n    for _, c := range test_str {\n        if c == ',' {\n            result = append(result, num)\n            num = 0\n        } else {\n            num *= 10\n            num += int(c - '0')\n        }\n    }\n    result = append(result, num)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        switch test_str[i] {\n        case ',':\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        default:\n            tmp_str += string(test_str[i])\n        }\n    }\n    tmp_int, tmp_bool = str_to_int(tmp_str)\n    if tmp_bool {\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n    var tmp_rune rune\n    var tmp_byte byte\n    var tmp_complex complex128\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_type string\n    var tmp_value string\n    var tmp_index int\n    var tmp_length int\n    var tmp_char rune\n    var tmp_char_str string\n    var tmp_char_int int\n    var tmp_char_bool bool\n    var tmp_char_float float64\n    var tmp_char_rune rune\n    var tmp_char_byte byte\n    var tmp_char_complex complex128\n    var tmp_char_interface interface{}\n    var tmp_char_error error\n    var tmp_char_type string\n    var tmp_char_value string\n    var tmp_char_index int\n    var tmp_char_length int\n    var tmp_char_char rune\n    var tmp_char_char_str string\n    var tmp_char_char_int int\n    var tmp_char_char_bool bool\n    var tmp_char_char_float float64\n    var tmp_char_char_rune rune\n    var tmp_char_char_byte byte\n    var tmp_char_char_complex complex128\n    var tmp_char_char_interface interface{}\n    var tmp_char_char_error error\n    var tmp_char_char_type string\n    var tmp_char_char_value string\n    var tmp_char_char_index int\n    var tmp_char_char_length int\n    var tmp_char_char_char rune\n    var tmp_char_char_char_str string\n    var tmp_char_char_char_int int\n    var tmp_char_char_char_bool bool\n    var tmp_char_char_char_float float64\n    var tmp_char_char_char_rune rune\n    var tmp_char_char_char_byte byte\n    var tmp_char_char_char_complex complex128\n    var tmp_char_char_char_interface interface{}\n   ",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for _, char := range test_str {\n        if char == '(' {\n            continue\n        } else if char == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else if char == ',' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n\n    for _, char := range test_str {\n        if char == '(' {\n            continue\n        } else if char == ')' {\n            break\n        } else if char == ',' {\n            if tmp_str != \"\" {\n                result = append(result, tmp_str)\n                tmp_str = \"\"\n            } else if tmp_int != 0 {\n                result = append(result, tmp_int)\n                tmp_int = 0\n            } else if tmp_float != 0 {\n                result = append(result, tmp_float)\n                tmp_float = 0\n            } else if tmp_bool {\n                result = append(result, tmp_bool)\n                tmp_bool = false\n            } else if tmp_char != 0 {\n                result = append(result, tmp_char)\n                tmp_char = 0\n            }\n        } else if char == ' ' {\n            continue\n        } else if char == '\\'' {\n            tmp_char = char\n        } else if char == '\"' {\n            tmp_str = string(char)\n        } else if char == 't' {\n            tmp_bool = true\n        } else if char == 'f' {\n            tmp_bool = false\n        } else if char == '.' {\n            tmp_float = float64(tmp_int)\n            tmp_int = 0\n        } else if char >= '0' && char <= '9' {\n            if tmp_float != 0 {\n                tmp_float = tmp_float * 10 + float64(char - '0')\n            } else {\n                tmp_int = tmp_int * 10 + int(char - '0')\n            }\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var tuple_str []string\n    var tuple_int []interface{}\n    var i int\n    var err error\n\n    tuple_str = []string{\"1\", \"2\", \"3\"}\n    for i = 0; i < len(tuple_str); i++ {\n        tuple_int[i], err = strconv.Atoi(tuple_str[i])\n        if err != nil {\n            fmt.Println(\"Error: \", err)\n        }\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n    var tmp_error error\n\n    // Convert string to integer.\n    tmp_int, tmp_error = strconv.Atoi(test_str)\n    if tmp_error != nil {\n        fmt.Println(\"Convert string to integer error!\")\n        return result\n    }\n\n    // Convert string to float.\n    tmp_float, tmp_error = strconv.ParseFloat(test_str, 64)\n    if tmp_error != nil {\n        fmt.Println(\"Convert string to float error!\")\n        return result\n    }\n\n    // Convert string to bool.\n    tmp_bool, tmp_error = strconv.ParseBool(test_str)\n    if tmp_error != nil {\n        fmt.Println(\"Convert string to bool error!\")\n        return result\n    }\n\n    // Convert string to rune.\n    tmp_char, _, tmp_error = strconv.UnquoteChar(test_str, 0)\n    if tmp_error != nil {\n        fmt.Println(\"Convert string to rune error!\")\n        return result\n    }\n\n    // Convert string to byte.\n    tmp_byte, tmp_error = strconv.ParseInt(test_str, 0, 8)\n    if tmp_error != nil {\n        fmt.Println(\"Convert string to byte error!\")\n        return result\n    }\n\n    // Convert string to interface.\n    tmp_interface = test_str\n\n    // Append all the converted values to the result.\n    result = append(result, tmp_int, tmp_float, tmp_bool, tmp_char, tmp_byte, tmp_interface)\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_float float64\n    var temp_bool bool\n    var temp_char rune\n    var temp_tuple []interface{}\n    var temp_dict map[interface{}]interface{}\n    var temp_list []interface{}\n    var temp_set []interface{}\n    var temp_str_list []string\n    var temp_int_list []int\n    var temp_float_list []float64\n    var temp_bool_list []bool\n    var temp_char_list []rune\n    var temp_tuple_list [][]interface{}\n    var temp_dict_list []map[interface{}]interface{}\n    var temp_list_list [][]interface{}\n    var temp_set_list [][]interface{}\n    var temp_str_set []string\n    var temp_int_set []int\n    var temp_float_set []float64\n    var temp_bool_set []bool\n    var temp_char_set []rune\n    var temp_tuple_set [][]interface{}\n    var temp_dict_set []map[interface{}]interface{}\n    var temp_list_set [][]interface{}\n    var temp_set_set [][]interface{}\n    var temp_str_dict map[string]interface{}\n    var temp_int_dict map[int]interface{}\n    var temp_float_dict map[float64]interface{}\n    var temp_bool_dict map[bool]interface{}\n    var temp_char_dict map[rune]interface{}\n    var temp_tuple_dict map[[2]interface{}]interface{}\n    var temp_dict_dict map[map[interface{}]interface{}]interface{}\n    var temp_list_dict map[[]interface{}]interface{}\n    var temp_set_dict map[[]interface{}]interface{}\n    var temp_str_set_dict map[string][]interface{}\n    var temp_int_set_dict map[int][]interface{}\n    var temp",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, char := range test_str {\n        if char == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(char)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            for j := i+1; j < len(test_str); j++ {\n                if test_str[j] == ')' {\n                    tmp_str = test_str[i+1:j]\n                    tmp_int, tmp_bool = str_to_int(tmp_str)\n                    if tmp_bool {\n                        result = append(result, tmp_int)\n                    } else {\n                        tmp_float, tmp_bool = str_to_float(tmp_str)\n                        if tmp_bool {\n                            result = append(result, tmp_float)\n                        } else {\n                            result = append(result, tmp_str)\n                        }\n                    }\n                    i = j\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' || test_str[i] == ')' {\n            continue\n        } else if test_str[i] == ',' {\n            if temp_str != \"\" {\n                result = append(result, temp_str)\n                temp_str = \"\"\n            }\n            if temp_int != 0 {\n                result = append(result, temp_int)\n                temp_int = 0\n            }\n        } else if test_str[i] >= '0' && test_str[i] <= '9' {\n            temp_int = temp_int * 10 + int(test_str[i] - '0')\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    if temp_str != \"\" {\n        result = append(result, temp_str)\n    }\n    if temp_int != 0 {\n        result = append(result, temp_int)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var str_num string\n    var is_num bool\n    var num int\n    for _, char := range test_str {\n        if char >= '0' && char <= '9' {\n            str_num += string(char)\n            is_num = true\n        } else {\n            if is_num {\n                fmt.Sscanf(str_num, \"%d\", &num)\n                result = append(result, num)\n                str_num = \"\"\n                is_num = false\n            }\n            result = append(result, string(char))\n        }\n    }\n    if is_num {\n        fmt.Sscanf(str_num, \"%d\", &num)\n        result = append(result, num)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var is_int bool\n    var is_str bool\n    var is_comma bool\n    var is_end bool\n    var is_start bool\n    var is_first bool\n    var is_last bool\n    var is_space bool\n    var is_bracket bool\n    var is_quote bool\n    var is_double_quote bool\n    var is_back_slash bool\n    var is_colon bool\n    var is_semicolon bool\n    var is_equal bool\n    var is_plus bool\n    var is_minus bool\n    var is_asterisk bool\n    var is_slash bool\n    var is_percent bool\n    var is_caret bool\n    var is_ampersand bool\n    var is_pipe bool\n    var is_tilde bool\n    var is_exclamation bool\n    var is_question bool\n    var is_at_sign bool\n    var is_dollar_sign bool\n    var is_pound_sign bool\n    var is_back_tick bool\n    var is_period bool\n    var is_less_than bool\n    var is_greater_than bool\n    var is_underscore bool\n    var is_dash bool\n    var is_single_quote bool\n    var is_double_quote bool\n    var is_back_slash bool\n    var is_left_parenthesis bool\n    var is_right_parenthesis bool\n    var is_left_bracket bool\n    var is_right_bracket bool\n    var is_left_brace bool\n    var is_right_brace bool\n    var is_vertical_bar bool\n    var is_forward_slash bool\n    var is_back_slash bool\n    var is_colon bool\n    var is_semicolon bool\n    var is_equal bool\n    var is_plus bool\n    var is_minus bool\n    var is_asterisk bool\n    var is_slash bool\n    var is_percent bool\n    var is_caret bool\n    var is_ampersand bool\n    var is_pipe bool\n    var is",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            result = append(result, tmp_str)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    result = append(result, tmp_str)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for _, c := range test_str {\n        if c == ',' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(c)\n        }\n    }\n    tmp_int, tmp_bool = str_to_int(tmp_str)\n    if tmp_bool {\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_tuple []interface{}\n    var tmp_map map[string]interface{}\n    var tmp_slice []interface{}\n    var tmp_chan chan interface{}\n    var tmp_func func()\n    var tmp_ptr *interface{}\n    var tmp_",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            i++\n            for test_str[i] != ',' {\n                temp_str += string(test_str[i])\n                i++\n            }\n            temp_int, temp_bool = atoi(temp_str)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n            i++\n            for test_str[i] != ')' {\n                temp_str += string(test_str[i])\n                i++\n            }\n            temp_int, temp_bool = atoi(temp_str)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        }\n    }\n    return result\n}\n",
    "    var tuple []interface{}\n    tuple = append(tuple, test_str)\n    tuple = append(tuple, len(test_str))\n    return tuple\n}\n",
    "    var tuple_int []interface{}\n    var tuple_str []string\n    var tuple_str_int []interface{}\n\n    tuple_str = tuple_str_split(test_str)\n    for _, val := range tuple_str {\n        tuple_str_int = append(tuple_str_int, val)\n    }\n\n    for _, val := range tuple_str_int {\n        switch val.(type) {\n        case string:\n            tuple_int = append(tuple_int, val)\n        case int:\n            tuple_int = append(tuple_int, val)\n        case float64:\n            tuple_int = append(tuple_int, val)\n        }\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_char byte\n    var temp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        temp_char = test_str[i]\n        if temp_char == '(' {\n            temp_str = \"\"\n            temp_bool = true\n        } else if temp_char == ')' {\n            temp_bool = false\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n        } else if temp_bool {\n            temp_str += string(temp_char)\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n\n    for _, v := range test_str {\n        switch v {\n        case ' ':\n            if tmp_str != \"\" {\n                tmp_int, _ = strconv.Atoi(tmp_str)\n                result = append(result, tmp_int)\n                tmp_str = \"\"\n            }\n        case ',':\n            if tmp_str != \"\" {\n                tmp_int, _ = strconv.Atoi(tmp_str)\n                result = append(result, tmp_int)\n                tmp_str = \"\"\n            }\n        default:\n            tmp_str += string(v)\n        }\n    }\n    if tmp_str != \"\" {\n        tmp_int, _ = strconv.Atoi(tmp_str)\n        result = append(result, tmp_int)\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n    var tmp_rune rune\n    var tmp_byte byte\n    var tmp_complex complex128\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_uint uint\n    var tmp_uintptr uintptr\n    var tmp_int8 int8\n    var tmp_int16 int16\n    var tmp_int32 int32\n    var tmp_int64 int64\n    var tmp_uint8 uint8\n    var tmp_uint16 uint16\n    var tmp_uint32 uint32\n    var tmp_uint64 uint64\n    var tmp_float32 float32\n    var tmp_complex64 complex64\n    var tmp_complex128 complex128\n    var tmp_byte byte\n    var tmp_rune rune\n    var tmp_uintptr uintptr\n    var tmp_error error\n    var tmp_interface interface{}\n    var tmp_array [5]int\n    var tmp_slice []int\n    var tmp_map map[string]int\n    var tmp_channel chan int\n    var tmp_func func(int) int\n    var tmp_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_num int\n    var tmp_int_str_num_str string\n    var tmp_int_str_num_str_len int\n    var tmp_int_str_num_str_num int\n    var tmp_int_str_num_str_num_str string\n    var tmp_int_str_num_str_num_str_len int\n    var tmp_int_str_num_str_num_str_num int\n    var tmp_int_str_num_str_num_str_num_str string\n    var tmp_int_str_num_str_num_str_num_str_len int\n    var tmp_int_str_num_str_num_str_num_str_num int\n    var tmp_int_str_num_str_num_str_num_str_num_str string\n    var tmp_int_str_num_str_num_str_num_str_num_str_len int\n    var tmp_int_str_num_str_num_str_num_str_num_str_num int\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str string\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str_len int\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str_num int\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str_num_str string\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str_num_str_len int\n    var tmp_int_str_num_str_num_str_num_str_num_str_num_str_num_str_num int\n    var tmp_int_str_num_str_num_str_num_str_",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, temp_bool = str_to_int(temp_str)\n            if temp_bool == true {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, temp_bool = str_to_int(temp_str)\n    if temp_bool == true {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var tmp_str string\n    var tmp_int int\n    var tmp_err error\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            j = i + 1\n            for test_str[j] != ')' {\n                j++\n            }\n            tmp_str = test_str[i+1:j]\n            tmp_int, tmp_err = strconv.Atoi(tmp_str)\n            if tmp_err != nil {\n                fmt.Println(\"Error: \", tmp_err)\n            }\n            result = append(result, tmp_int)\n            i = j\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_char rune\n    var temp_bool bool\n    for _, char := range test_str {\n        if char == '(' || char == ')' {\n            continue\n        }\n        if char == ',' {\n            temp_bool, temp_int = true, 0\n            for _, char := range temp_str {\n                temp_int = temp_int * 10 + int(char - '0')\n            }\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(char)\n        }\n    }\n    temp_bool, temp_int = true, 0\n    for _, char := range temp_str {\n        temp_int = temp_int * 10 + int(char - '0')\n    }\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    var temp_float float64\n    var temp_char rune\n    var temp_byte byte\n    var temp_interface interface{}\n\n    for _, char := range test_str {\n        if char == '(' {\n            continue\n        } else if char == ')' {\n            if temp_str != \"\" {\n                temp_interface = temp_str\n                result = append(result, temp_interface)\n                temp_str = \"\"\n            } else if temp_int != 0 {\n                temp_interface = temp_int\n                result = append(result, temp_interface)\n                temp_int = 0\n            } else if temp_bool {\n                temp_interface = temp_bool\n                result = append(result, temp_interface)\n                temp_bool = false\n            } else if temp_float != 0 {\n                temp_interface = temp_float\n                result = append(result, temp_interface)\n                temp_float = 0\n            } else if temp_char != 0 {\n                temp_interface = temp_char\n                result = append(result, temp_interface)\n                temp_char = 0\n            } else if temp_byte != 0 {\n                temp_interface = temp_byte\n                result = append(result, temp_interface)\n                temp_byte = 0\n            }\n        } else if char == ',' {\n            if temp_str != \"\" {\n                temp_interface = temp_str\n                result = append(result, temp_interface)\n                temp_str = \"\"\n            } else if temp_int != 0 {\n                temp_interface = temp_int\n                result = append(result, temp_interface)\n                temp_int = 0\n            } else if temp_bool {\n                temp_interface = temp_bool\n                result = append(result, temp_interface)\n                temp_bool = false\n            } else if temp_float != 0 {\n                temp_interface = temp_float\n                result = append(result, temp_interface)\n                temp_float = 0\n            } else if temp_char != 0 {\n                temp_interface = temp_char\n                result =",
    "    var result []interface{}\n    var num_str string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] >= '0' && test_str[i] <= '9' {\n            num_str += string(test_str[i])\n        } else {\n            if len(num_str) > 0 {\n                num, _ := strconv.Atoi(num_str)\n                result = append(result, num)\n                num_str = \"\"\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for _, v := range test_str {\n        if v == '(' {\n            continue\n        } else if v == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var tuple []interface{}\n    for _, v := range test_str {\n        tuple = append(tuple, int(v))\n    }\n    return tuple\n}\n",
    "    var result []interface{}\n    var temp string\n    var temp_int int\n    var temp_float float64\n    var temp_bool bool\n    var temp_char rune\n    var temp_str string\n    var temp_tuple []interface{}\n    var temp_list []interface{}\n    var temp_dict map[string]interface{}\n    var temp_set map[interface{}]bool\n    var temp_bytes []byte\n    var temp_byte byte\n    var temp_rune rune\n    var temp_complex64 complex64\n    var temp_complex128 complex128\n    var temp_error error\n    var temp_interface interface{}\n    var temp_chan chan interface{}\n    var temp_func func()\n    var temp_pointer *interface{}\n    var temp_slice []interface{}\n    var temp_array [1]interface{}\n    var temp_",
    "    var result []interface{}\n    var num_str string\n    var num_int int\n    var err error\n\n    for _, c := range test_str {\n        if c >= '0' && c <= '9' {\n            num_str += string(c)\n        } else {\n            num_int, err = strconv.Atoi(num_str)\n            if err != nil {\n                fmt.Println(err)\n                return result\n            }\n            result = append(result, num_int)\n            num_str = \"\"\n        }\n    }\n\n    num_int, err = strconv.Atoi(num_str)\n    if err != nil {\n        fmt.Println(err)\n        return result\n    }\n    result = append(result, num_int)\n\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, temp_bool = str_to_int(temp_str)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, temp_bool = str_to_int(temp_str)\n    if temp_bool {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    // Write your code here\n    var result []interface{}\n    var tmp string\n    for _, c := range test_str {\n        if c == ',' {\n            result = append(result, tmp)\n            tmp = \"\"\n        } else {\n            tmp += string(c)\n        }\n    }\n    result = append(result, tmp)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_tuple []interface{}\n    var tmp_map map[string]interface{}\n    var tmp_slice []interface{}\n    var tmp_chan chan interface{}\n    var tmp_func func() interface{}\n    var tmp_ptr *interface{}\n    var tmp_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var tuple_str []string\n    var tuple_int []interface{}\n    var tmp_str string\n    var tmp_int int\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ',' {\n            tmp_str += string(test_str[i])\n        } else {\n            tuple_str = append(tuple_str, tmp_str)\n            tmp_str = \"\"\n        }\n    }\n    tuple_str = append(tuple_str, tmp_str)\n\n    for i := 0; i < len(tuple_str); i++ {\n        fmt.Sscanf(tuple_str[i], \"%d\", &tmp_int)\n        tuple_int = append(tuple_int, tmp_int)\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var i int\n    var tmp_str string\n    var tmp_int int\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var temp_str string\n    var temp_int int\n    var err error\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, err = strconv.Atoi(temp_str)\n            if err != nil {\n                fmt.Println(\"Error:\", err)\n                return nil\n            }\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, err = strconv.Atoi(temp_str)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return nil\n    }\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var str_int string\n    var str_float string\n    var str_bool string\n    var str_char string\n    var str_str string\n    var str_tuple string\n    var str_list string\n    var str_dict string\n    var str_set string\n    var str_frozenset string\n    var str_bytes string\n    var str_bytearray string\n    var str_range string\n    var str_complex string\n    var str_none string\n    var str_notimplemented string\n    var str_ellipsis string\n    var str_stopiteration string\n    var str_generator string\n    var str_module string\n    var str_class string\n    var str_method string\n    var str_methoddescriptor string\n    var str_builtinmethod string\n    var str_builtinfunction string\n    var str_builtinmethoddescriptor string\n    var str_methodwrapper string\n    var str_wrapperdescriptor string\n    var str_traceback string\n    var str_frame string\n    var str_buffer string\n    var str_memoryview string\n    var str_long string\n    var str_code string\n    var str_type string\n    var str_slice string\n    var str_xrange string\n    var str_notimplementederror string\n    var str_unboundlocalerror string\n    var str_nameerror string\n    var str_attributerror string\n    var str_syntaxerror string\n    var str_indentationerror string\n    var str_taberror string\n    var str_lookuperror string\n    var str_indexerror string\n    var str_keyerror string\n    var str_valueerror string\n    var str_unboundvariableerror string\n    var str_referenceerror string\n    var str_systemerror string\n    var str_systemexit string\n    var str_ioerror string\n    var str_oserror string\n    var str_zerodivisionerror string\n    var str_floatingpointerror string\n    var str_overflowerror string\n    var str_underflowerror string\n    var str_runtimeerror string\n    var str_recursionerror string\n    var str_notim",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_str_slice []string\n    var tmp_int_slice []int\n    var tmp_float_slice []float64\n    var tmp_bool_slice []bool\n    var tmp_char_slice []rune\n    var tmp_str_int_slice []interface{}\n    var tmp_int_int_slice []interface{}\n    var tmp_float_int_slice []interface{}\n    var tmp_bool_int_slice []interface{}\n    var tmp_char_int_slice []interface{}\n    var tmp_str_str_slice []interface{}\n    var tmp_int_str_slice []interface{}\n    var tmp_float_str_slice []interface{}\n    var tmp_bool_str_slice []interface{}\n    var tmp_char_str_slice []interface{}\n    var tmp_str_int_str_slice []interface{}\n    var tmp_int_int_str_slice []interface{}\n    var tmp_float_int_str_slice []interface{}\n    var tmp_bool_int_str_slice []interface{}\n    var tmp_char_int_str_slice []interface{}\n    var tmp_str_str_str_slice []interface{}\n    var tmp_int_str_str_slice []interface{}\n    var tmp_float_str_str_slice []interface{}\n    var tmp_bool_str_str_slice []interface{}\n    var tmp_char_str_str_slice []interface{}\n    var tmp_str_int_int_slice []interface{}\n    var tmp_int_int_int_slice []interface{}\n    var tmp_float_int_int_slice []interface{}\n    var tmp_bool_int_int_slice []interface{}\n    var tmp_char_int_int_slice []interface{}\n    var tmp_str_str_int_slice []interface{}\n    var tmp_",
    "    var str_tuple []interface{}\n    var int_tuple []interface{}\n    var err error\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n   ",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_index int\n    var temp_int_str_is_int bool\n    var temp_int_str_is_int_index int\n\n    for _, char := range test_str {\n        if char == '(' || char == ')' {\n            if temp_str != \"\" {\n                temp_int, _ = strconv.Atoi(temp_str)\n                result = append(result, temp_int)\n            }\n            temp_str = \"\"\n            continue\n        }\n        if char == ',' {\n            if temp_str != \"\" {\n                temp_int, _ = strconv.Atoi(temp_str)\n                result = append(result, temp_int)\n            }\n            temp_str = \"\"\n            continue\n        }\n        temp_str += string(char)\n    }\n    if temp_str != \"\" {\n        temp_int, _ = strconv.Atoi(temp_str)\n        result = append(result, temp_int)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp int\n    var err error\n    for _, v := range test_str {\n        if v == ',' {\n            result = append(result, temp)\n            temp = 0\n        } else {\n            temp = temp * 10 + int(v - '0')\n        }\n    }\n    result = append(result, temp)\n    return result\n}\n",
    "    var result []interface{}\n    var num_str string\n    var num_int int\n    var err error\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            num_int, err = strconv.Atoi(num_str)\n            if err != nil {\n                fmt.Println(\"Error:\", err)\n                return nil\n            }\n            result = append(result, num_int)\n            num_str = \"\"\n        } else {\n            num_str += string(test_str[i])\n        }\n    }\n    num_int, err = strconv.Atoi(num_str)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return nil\n    }\n    result = append(result, num_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ',' {\n            temp_str += string(test_str[i])\n        } else {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var tmp_str string\n    var tmp_int int\n    var err error\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            i++\n            for j = i; j < len(test_str); j++ {\n                if test_str[j] == ')' {\n                    tmp_str = test_str[i:j]\n                    tmp_int, err = strconv.Atoi(tmp_str)\n                    if err != nil {\n                        fmt.Println(\"Error: \", err)\n                    }\n                    result = append(result, tmp_int)\n                    i = j + 1\n                    break\n                }\n            }\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var err error\n    for _, c := range test_str {\n        if c == ',' {\n            tmp_int, err = strconv.Atoi(tmp_str)\n            if err != nil {\n                fmt.Println(\"Error: \", err)\n                return nil\n            }\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(c)\n        }\n    }\n    tmp_int, err = strconv.Atoi(tmp_str)\n    if err != nil {\n        fmt.Println(\"Error: \", err)\n        return nil\n    }\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            tmp_str += string(v)\n        } else {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var tuple_str []interface{}\n    var tuple_int []interface{}\n    var tuple_str_int []interface{}\n    var str_int string\n    var str_int_int int\n    var str_int_float float64\n    var str_int_bool bool\n    var str_int_str string\n    var str_int_str_int int\n    var str_int_str_float float64\n    var str_int_str_bool bool\n    var str_int_str_str string\n    var str_int_str_str_int int\n    var str_int_str_str_float float64\n    var str_int_str_str_bool bool\n    var str_int_str_str_str string\n    var str_int_str_str_str_int int\n    var str_int_str_str_str_float float64\n    var str_int_str_str_str_bool bool\n    var str_int_str_str_str_str string\n    var str_int_str_str_str_str_int int\n    var str_int_str_str_str_str_float float64\n    var str_int_str_str_str_str_bool bool\n    var str_int_str_str_str_str_str string\n    var str_int_str_str_str_str_str_int int\n    var str_int_str_str_str_str_str_float float64\n    var str_int_str_str_str_str_str_bool bool\n    var str_int_str_str_str_str_str_str string\n    var str_int_str_str_str_str_str_str_int int\n    var str_int_str_str_str_str_str_str_float float64\n    var str_int_str_str_str_str_str_str_bool bool\n    var str_int_str_str_str_str_str_str_str string\n    var str_int_str_str_str_str_str_str_str_int int\n    var str_int_str_str_str_str_str_str_str_float float",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_float float64\n    var temp_bool bool\n    var temp_char rune\n    var temp_str_slice []string\n    var temp_int_slice []int\n    var temp_float_slice []float64\n    var temp_bool_slice []bool\n    var temp_char_slice []rune\n    var temp_str_int_slice []interface{}\n    var temp_int_int_slice []interface{}\n    var temp_float_int_slice []interface{}\n    var temp_bool_int_slice []interface{}\n    var temp_char_int_slice []interface{}\n    var temp_str_int_int_slice []interface{}\n    var temp_int_int_int_slice []interface{}\n    var temp_float_int_int_slice []interface{}\n    var temp_bool_int_int_slice []interface{}\n    var temp_char_int_int_slice []interface{}\n    var temp_str_int_int_int_slice []interface{}\n    var temp_int_int_int_int_slice []interface{}\n    var temp_float_int_int_int_slice []interface{}\n    var temp_bool_int_int_int_slice []interface{}\n    var temp_char_int_int_int_slice []interface{}\n    var temp_str_int_int_int_int_slice []interface{}\n    var temp_int_int_int_int_int_slice []interface{}\n    var temp_float_int_int_int_int_slice []interface{}\n    var temp_bool_int_int_int_int_slice []interface{}\n    var temp_char_int_int_int_int_slice []interface{}\n    var temp_str_int_int_int_int_int_slice []interface{}\n    var temp_int_int_int_int_int_int_slice []interface{}\n    var temp_float_int_int_int_int_int_slice []interface{}\n    var temp_bool_int_int",
    "    var result []interface{}\n    var i int\n    var tmp_str string\n    var tmp_int int\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            continue\n        } else if test_str[i] == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' || test_str[i] == ')' {\n            continue\n        } else if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_len_str string\n    var temp_int_str_len_str_len int\n    var temp_int_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len",
    "    var tuple_str []interface{}\n    for _, v := range test_str {\n        tuple_str = append(tuple_str, string(v))\n    }\n    return tuple_str\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' || test_str[i] == ')' {\n            continue\n        } else if test_str[i] == ',' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool == true {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n\n    tmp_int, tmp_bool = str_to_int(tmp_str)\n    if tmp_bool == true {\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var num_str string\n    var num_int int\n    var err error\n    for _, ch := range test_str {\n        if ch >= '0' && ch <= '9' {\n            num_str += string(ch)\n        } else {\n            if len(num_str) > 0 {\n                num_int, err = strconv.Atoi(num_str)\n                if err != nil {\n                    fmt.Println(err)\n                }\n                result = append(result, num_int)\n                num_str = \"\"\n            }\n        }\n    }\n    if len(num_str) > 0 {\n        num_int, err = strconv.Atoi(num_str)\n        if err != nil {\n            fmt.Println(err)\n        }\n        result = append(result, num_int)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_interface interface{}\n\n    for _, c := range test_str {\n        switch c {\n            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.':\n                tmp_str += string(c)\n            case ',':\n                if tmp_str != \"\" {\n                    if tmp_int, tmp_bool = str_int(tmp_str); tmp_bool {\n                        tmp_interface = tmp_int\n                    } else if tmp_float, tmp_bool = str_float(tmp_str); tmp_bool {\n                        tmp_interface = tmp_float\n                    } else {\n                        tmp_char, tmp_bool = str_char(tmp_str)\n                        if tmp_bool {\n                            tmp_interface = tmp_char\n                        } else {\n                            tmp_interface = tmp_str\n                        }\n                    }\n                    result = append(result, tmp_interface)\n                    tmp_str = \"\"\n                }\n            default:\n                tmp_str += string(c)\n        }\n    }\n    if tmp_str != \"\" {\n        if tmp_int, tmp_bool = str_int(tmp_str); tmp_bool {\n            tmp_interface = tmp_int\n        } else if tmp_float, tmp_bool = str_float(tmp_str); tmp_bool {\n            tmp_interface = tmp_float\n        } else {\n            tmp_char, tmp_bool = str_char(tmp_str)\n            if tmp_bool {\n                tmp_interface = tmp_char\n            } else {\n                tmp_interface = tmp_str\n            }\n        }\n        result = append(result, tmp_interface)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, char := range test_str {\n        if char == '(' {\n            continue\n        } else if char == ')' {\n            if tmp_str != \"\" {\n                result = append(result, tmp_str)\n                tmp_str = \"\"\n            } else if tmp_int != 0 {\n                result = append(result, tmp_int)\n                tmp_int = 0\n            }\n        } else if char == ',' {\n            if tmp_str != \"\" {\n                result = append(result, tmp_str)\n                tmp_str = \"\"\n            } else if tmp_int != 0 {\n                result = append(result, tmp_int)\n                tmp_int = 0\n            }\n        } else if char >= '0' && char <= '9' {\n            tmp_int = tmp_int * 10 + int(char - '0')\n        } else {\n            tmp_str += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, temp_bool = str_to_int(temp_str)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, temp_bool = str_to_int(temp_str)\n    if temp_bool {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var num_str string\n    var num_int int\n    for _, char := range test_str {\n        if char >= '0' && char <= '9' {\n            num_str += string(char)\n        } else {\n            fmt.Sscanf(num_str, \"%d\", &num_int)\n            result = append(result, num_int)\n            num_str = \"\"\n        }\n    }\n    fmt.Sscanf(num_str, \"%d\", &num_int)\n    result = append(result, num_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n   ",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            if tmp_str == \"true\" {\n                tmp_bool = true\n                result = append(result, tmp_bool)\n            } else if tmp_str == \"false\" {\n                tmp_bool = false\n                result = append(result, tmp_bool)\n            } else if tmp_str == \"null\" {\n                result = append(result, nil)\n            } else {\n                fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n                result = append(result, tmp_int)\n            }\n        } else if test_str[i] == ',' {\n            if tmp_str == \"true\" {\n                tmp_bool = true\n                result = append(result, tmp_bool)\n            } else if tmp_str == \"false\" {\n                tmp_bool = false\n                result = append(result, tmp_bool)\n            } else if tmp_str == \"null\" {\n                result = append(result, nil)\n            } else {\n                fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n                result = append(result, tmp_int)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    for _, char := range test_str {\n        if char == ',' {\n            result = append(result, temp_str)\n            temp_str = \"\"\n        } else {\n            temp_str += string(char)\n        }\n    }\n    result = append(result, temp_str)\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var tuple []interface{}\n    var num_str string\n    for _, char := range test_str {\n        if char >= '0' && char <= '9' {\n            num_str += string(char)\n        } else {\n            if num_str != \"\" {\n                num, _ := strconv.Atoi(num_str)\n                tuple = append(tuple, num)\n                num_str = \"\"\n            }\n            tuple = append(tuple, string(char))\n        }\n    }\n    if num_str != \"\" {\n        num, _ := strconv.Atoi(num_str)\n        tuple = append(tuple, num)\n    }\n    return tuple\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, temp_bool = str_int(temp_str)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, temp_bool = str_int(temp_str)\n    if temp_bool {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    var tuple_str []interface{}\n    for _, v := range test_str {\n        tuple_str = append(tuple_str, string(v))\n    }\n    return tuple_str\n}\n",
    "    test_str = test_str[1:len(test_str)-1]\n    test_str_arr := strings.Split(test_str, \",\")\n    test_int_arr := make([]interface{}, len(test_str_arr))\n    for i := 0; i < len(test_str_arr); i++ {\n        test_int_arr[i] = test_str_arr[i]\n    }\n    return test_int_arr\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_error error\n    var tmp_interface interface{}\n    var tmp_array []int\n    var tmp_map map[string]int\n    var tmp_",
    "    var result []interface{}\n    var num int\n    var err error\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            num = num * 10 + int(v - '0')\n        } else {\n            if num != 0 {\n                result = append(result, num)\n                num = 0\n            }\n            if v == '(' {\n                result = append(result, tuple_str_int(test_str[1:]))\n            } else if v == ')' {\n                return result\n            }\n        }\n    }\n    if num != 0 {\n        result = append(result, num)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_complex64 complex64\n    var tmp_complex128 complex128\n    var tmp_uint uint\n    var tmp_uint8 uint8\n    var tmp_uint16 uint16\n    var tmp_uint32 uint32\n    var tmp_uint64 uint64\n    var tmp_int8 int8\n    var tmp_int16 int16\n    var tmp_int32 int32\n    var tmp_int64 int64\n    var tmp_uintptr uintptr\n    var tmp_array [1]int\n    var tmp_slice []int\n    var tmp_map map[int]int\n    var tmp_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    var temp_float float64\n    var temp_rune rune\n    var temp_byte byte\n\n    for _, v := range test_str {\n        if v == '(' {\n            continue\n        } else if v == ')' {\n            result = append(result, temp_str)\n            temp_str = \"\"\n        } else if v == ',' {\n            result = append(result, temp_str)\n            temp_str = \"\"\n        } else {\n            temp_str += string(v)\n        }\n    }\n\n    for i, v := range result {\n        temp_int, temp_bool = v.(int)\n        if temp_bool {\n            result[i] = temp_int\n            continue\n        }\n        temp_float, temp_bool = v.(float64)\n        if temp_bool {\n            result[i] = temp_float\n            continue\n        }\n        temp_rune, temp_bool = v.(rune)\n        if temp_bool {\n            result[i] = temp_rune\n            continue\n        }\n        temp_byte, temp_bool = v.(byte)\n        if temp_bool {\n            result[i] = temp_byte\n            continue\n        }\n    }\n\n    return result\n}\n",
    "    var tuple_int []interface{}\n    for _, v := range test_str {\n        tuple_int = append(tuple_int, int(v))\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_str_int string\n    var tmp_str_int_len int\n    var tmp_str_len int\n    var tmp_str_index int\n    var tmp_str_int_index int\n    var tmp_str_int_flag bool\n    var tmp_str_int_flag_index int\n\n    tmp_str = test_str\n    tmp_str_len = len(tmp_str)\n    tmp_str_index = 0\n    tmp_str_int_flag = false\n    tmp_str_int_flag_index = 0\n\n    for tmp_str_index < tmp_str_len {\n        if tmp_str[tmp_str_index] == '(' {\n            tmp_str_index++\n            continue\n        } else if tmp_str[tmp_str_index] == ')' {\n            tmp_str_index++\n            continue\n        } else if tmp_str[tmp_str_index] == ',' {\n            tmp_str_index++\n            continue\n        } else if tmp_str[tmp_str_index] >= '0' && tmp_str[tmp_str_index] <= '9' {\n            tmp_str_int_flag = true\n            tmp_str_int_flag_index = tmp_str_index\n            tmp_str_index++\n            continue\n        } else {\n            if tmp_str_int_flag == true {\n                tmp_str_int = tmp_str[tmp_str_int_flag_index:tmp_str_index]\n                result = append(result, tmp_str_int)\n                tmp_str_int_flag = false\n            } else {\n                tmp_str_int_flag = false\n            }\n            tmp_str_index++\n            continue\n        }\n    }\n\n    if tmp_str_int_flag == true {\n        tmp_str_int = tmp_str[tmp_str_int_flag_index:tmp_str_index]\n        result = append(result, tmp_str_int)\n        tmp_str_int_flag = false\n    } else {\n        tmp_str_",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for _, char := range test_str {\n        if char == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(char)\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var temp_str string\n    var temp_int int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            for j = i + 1; j < len(test_str); j++ {\n                if test_str[j] == ')' {\n                    temp_str = test_str[i + 1:j]\n                    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n                    result = append(result, temp_int)\n                    i = j\n                    break\n                }\n            }\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            temp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ',' {\n            temp_str += string(test_str[i])\n        } else {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_last_char string\n    var temp_int_str_last_char_int int\n    var temp_int_str_last_char_int_str string\n    var temp_int_str_last_char_int_str_len int\n    var temp_int_str_last_char_int_str_last_char string\n    var temp_int_str_last_char_int_str_last_char_int int\n    var temp_int_str_last_char_int_str_last_char_int_str string\n    var temp_int_str_last_char_int_str_last_char_int_str_len int\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char string\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int int\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str string\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str_len int\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str_last_char string\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str_last_char_int int\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str_last_char_int_str string\n    var temp_int_str_last_char_int_str_last_char_int_str_last_char_int_str_last_char_int_str_len int\n    var temp_int_str_last_char_int_str_last_char_int",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n            for j := i + 1; j < len(test_str); j++ {\n                if test_str[j] == ')' {\n                    tmp_int, tmp_bool = str_to_int(tmp_str)\n                    if tmp_bool == true {\n                        result = append(result, tmp_int)\n                    } else {\n                        result = append(result, tmp_str)\n                    }\n                    i = j\n                    break\n                }\n                tmp_str += string(test_str[j])\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_str {\n        result = append(result, int(val))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var str_int string\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            result = append(result, str_int)\n            str_int = \"\"\n        } else {\n            str_int += string(test_str[i])\n        }\n    }\n    result = append(result, str_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var is_int bool\n    for _, c := range test_str {\n        if c == '(' || c == ')' || c == ',' {\n            if tmp_str != \"\" {\n                if is_int {\n                    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n                    result = append(result, tmp_int)\n                } else {\n                    result = append(result, tmp_str)\n                }\n                tmp_str = \"\"\n            }\n            continue\n        }\n        if c >= '0' && c <= '9' {\n            if tmp_str == \"\" {\n                is_int = true\n            }\n        } else {\n            is_int = false\n        }\n        tmp_str += string(c)\n    }\n    if tmp_str != \"\" {\n        if is_int {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n        } else {\n            result = append(result, tmp_str)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_err error\n    var i int\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            continue\n        } else if test_str[i] == ')' {\n            tmp_int, tmp_err = strconv.Atoi(tmp_str)\n            if tmp_err != nil {\n                fmt.Println(\"Error: \", tmp_err)\n                return result\n            }\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else if test_str[i] == ',' {\n            tmp_int, tmp_err = strconv.Atoi(tmp_str)\n            if tmp_err != nil {\n                fmt.Println(\"Error: \", tmp_err)\n                return result\n            }\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var tuple []interface{}\n    var str_int string\n    var str_float string\n    var str_bool string\n    var str_char string\n    var str_str string\n    var str_tuple string\n    var str_list string\n    var str_dict string\n    var str_set string\n    var str_frozenset string\n    var str_bytes string\n    var str_bytearray string\n    var str_range string\n    var str_complex string\n    var str_none string\n    var str_notimplemented string\n    var str_ellipsis string\n    var str_stopiteration string\n    var str_generator string\n    var str_module string\n    var str_class string\n    var str_method string\n    var str_function string\n    var str_builtin_function string\n    var str_builtin_method string\n    var str_method_descriptor string\n    var str_member_descriptor string\n    var str_getset_descriptor string\n    var str_wrapper_descriptor string\n    var str_traceback string\n    var str_frame string\n    var str_buffer string\n    var str_memoryview string\n    var str_long string\n    var str_slots string\n    var str_weakref string\n    var str_weakproxy string\n    var str_weakcallableproxy string\n    var str_cell string\n    var str_code string\n    var str_enumerate string\n    var str_reversed string\n    var str_property string\n    var str_staticmethod string\n    var str_classmethod string\n    var str_dictproxy string\n    var str_notimplementederror string\n    var str_arithmeticerror string\n    var str_lookuperror string\n    var str_indexerror string\n    var str_keyerror string\n    var str_valueerror string\n    var str_unboundlocalerror string\n    var str_notimplementederror string\n    var str_runtimeerror string\n    var str_typeerror string\n    var str_systemerror string\n    var str_systemexit string\n    var str_keyboardinterrupt string\n    var str_importerror string\n    var str_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n    var tmp_complex complex128\n    var tmp_rune rune\n    var tmp_byte byte\n    var tmp_uint uint\n    var tmp_uintptr uintptr\n    var tmp_int8 int8\n    var tmp_int16 int16\n    var tmp_int32 int32\n    var tmp_int64 int64\n    var tmp_uint8 uint8\n    var tmp_uint16 uint16\n    var tmp_uint32 uint32\n    var tmp_uint64 uint64\n    var tmp_float32 float32\n    var tmp_float64 float64\n    var tmp_complex64 complex64\n    var tmp_complex128 complex128\n    var tmp_byte_slice []byte\n    var tmp_rune_slice []rune\n    var tmp_int_slice []int\n    var tmp_int8_slice []int8\n    var tmp_int16_slice []int16\n    var tmp_int32_slice []int32\n    var tmp_int64_slice []int64\n    var tmp_uint_slice []uint\n    var tmp_uint8_slice []uint8\n    var tmp_uint16_slice []uint16\n    var tmp_uint32_slice []uint32\n    var tmp_uint64_slice []uint64\n    var tmp_float32_slice []float32\n    var tmp_float64_slice []float64\n    var tmp_complex64_slice []complex64\n    var tmp_complex128_slice []complex128\n    var tmp_interface_slice []interface{}\n    var tmp_string_slice []string\n    var tmp_map map[string]interface{}\n    var tmp_map_slice []map[string]interface{}\n    var tmp_channel chan int\n    var tmp_channel_slice []chan int\n    var tmp_func func(int) int\n    var tmp_func_slice []func(int) int\n    var tmp_pointer *int\n    var tmp_pointer_slice []*int\n    var tmp_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_err error\n    for _, v := range test_str {\n        if v == ',' {\n            tmp_int, tmp_err = strconv.Atoi(tmp_str)\n            if tmp_err != nil {\n                fmt.Println(\"Error: \", tmp_err)\n                return nil\n            }\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    tmp_int, tmp_err = strconv.Atoi(tmp_str)\n    if tmp_err != nil {\n        fmt.Println(\"Error: \", tmp_err)\n        return nil\n    }\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for _, c := range test_str {\n        if c == '(' {\n            continue\n        } else if c == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(c)\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_idx int\n    var tmp_int_str_char byte\n    var tmp_int_str_char_idx int\n    var tmp_int_str_char_len int\n    var tmp_int_str_char_is_num bool\n    var tmp_int_str_char_is_neg bool\n    var tmp_int_str_char_is_pos bool\n    var tmp_int_str_char_is_dot bool\n    var tmp_int_str_char_is_exp bool\n    var tmp_int_str_char_is_exp_neg bool\n    var tmp_int_str_char_is_exp_pos bool\n    var tmp_int_str_char_is_exp_num bool\n    var tmp_int_str_char_is_exp_num_neg bool\n    var tmp_int_str_char_is_exp_num_pos bool\n    var tmp_int_str_char_is_exp_num_dot bool\n    var tmp_int_str_char_is_exp_num_dot_neg bool\n    var tmp_int_str_char_is_exp_num_dot_pos bool\n    var tmp_int_str_char_is_exp_num_dot_num bool\n    var tmp_int_str_char_is_exp_num_dot_num_neg bool\n    var tmp_int_str_char_is_exp_num_dot_num_pos bool\n    var tmp_int_str_char_is_exp_num_dot_num_dot bool\n    var tmp_int_str_char_is_exp_num_dot_num_dot_neg bool\n    var tmp_int_str_char_is_exp_num_dot_num_dot_pos bool\n    var tmp_int_str_char_is_exp_num_dot_num_dot_num bool\n    var tmp_int_str_char_is_exp_num_dot_num_dot_num_neg bool\n    var",
    "    var tuple_str []interface{}\n    for _, v := range test_str {\n        tuple_str = append(tuple_str, string(v))\n    }\n    return tuple_str\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, temp_bool = str_to_int(temp_str)\n            if temp_bool == true {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, temp_bool = str_to_int(temp_str)\n    if temp_bool == true {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    var tuple_str []string\n    var tuple_int []interface{}\n    var i int\n    var err error\n\n    tuple_str = []string{\"1\", \"2\", \"3\", \"4\", \"5\"}\n    tuple_int = make([]interface{}, len(tuple_str))\n\n    for i, _ = range tuple_str {\n        tuple_int[i], err = strconv.Atoi(tuple_str[i])\n        if err != nil {\n            fmt.Println(\"Error:\", err)\n            return nil\n        }\n    }\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_byte byte\n    var tmp_error error\n    var tmp_interface interface{}\n    var tmp_slice []int\n    var tmp_map map[string]int\n    var tmp_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            continue\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            result = append(result, test_str[:i])\n            test_str = test_str[i+1:]\n            i = 0\n        }\n    }\n    result = append(result, test_str)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var temp_str string\n    var temp_int int\n    var err error\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            temp_int, err = strconv.Atoi(temp_str)\n            if err != nil {\n                fmt.Println(\"Cannot convert string to integer\")\n            }\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    temp_int, err = strconv.Atoi(temp_str)\n    if err != nil {\n        fmt.Println(\"Cannot convert string to integer\")\n    }\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_tuple []interface{}\n\n    for i := 0; i < len(test_str); i++ {\n        switch test_str[i] {\n        case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':\n            tmp_str += string(test_str[i])\n        case ',':\n            tmp_int, tmp_error = strconv.Atoi(tmp_str)\n            if tmp_error != nil {\n                fmt.Println(\"Error: \", tmp_error)\n                return nil\n            }\n            tmp_interface = tmp_int\n            result = append(result, tmp_interface)\n            tmp_str = \"\"\n        case '.':\n            tmp_str += string(test_str[i])\n        case 'f':\n            tmp_float, tmp_error = strconv.ParseFloat(tmp_str, 64)\n            if tmp_error != nil {\n                fmt.Println(\"Error: \", tmp_error)\n                return nil\n            }\n            tmp_interface = tmp_float\n            result = append(result, tmp_interface)\n            tmp_str = \"\"\n        case 'b':\n            tmp_bool, tmp_error = strconv.ParseBool(tmp_str)\n            if tmp_error != nil {\n                fmt.Println(\"Error: \", tmp_error)\n                return nil\n            }\n            tmp_interface = tmp_bool\n            result = append(result, tmp_interface)\n            tmp_str = \"\"\n        case 'c':\n            tmp_char, tmp_error = strconv.ParseInt(tmp_str, 0, 32)\n            if tmp_error != nil {\n                fmt.Println(\"Error: \", tmp_error)\n                return nil\n            }\n            tmp_interface = tmp_char\n            result = append(result, tmp_interface)\n            tmp_str =",
    "    // Split the string into a slice of strings.\n    test_slice := strings.Split(test_str, \",\")\n    // Create a slice of interfaces.\n    test_int := make([]interface{}, len(test_slice))\n    // Convert each string to an integer.\n    for i, v := range test_slice {\n        test_int[i], _ = strconv.Atoi(v)\n    }\n    return test_int\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_str_int string\n    var temp_str_int_len int\n    var temp_str_int_idx int\n    var temp_str_int_idx_max int\n    var temp_str_int_idx_max_len int\n    var temp_str_int_idx_max_len_str string\n    var temp_str_int_idx_max_len_str_len int\n    var temp_str_int_idx_max_len_str_len_str string\n    var temp_str_int_idx_max_len_str_len_str_len int\n    var temp_str_int_idx_max_len_str_len_str_len_str string\n\n    temp_str = test_str\n    temp_str_int = \"\"\n    temp_str_int_idx = 0\n    temp_str_int_idx_max = 0\n    temp_str_int_idx_max_len = 0\n    temp_str_int_idx_max_len_str = \"\"\n    temp_str_int_idx_max_len_str_len = 0\n    temp_str_int_idx_max_len_str_len_str = \"\"\n    temp_str_int_idx_max_len_str_len_str_len = 0\n    temp_str_int_idx_max_len_str_len_str_len_str = \"\"\n\n    for i := 0; i < len(temp_str); i++ {\n        if temp_str[i] == '(' {\n            temp_str_int_idx = 0\n            temp_str_int_idx_max = 0\n            temp_str_int_idx_max_len = 0\n            temp_str_int_idx_max_len_str = \"\"\n            temp_str_int_idx_max_len_str_len = 0\n            temp_str_int_idx_max_len_str_len_str = \"\"\n            temp_str_int_idx_max_len_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n            for j := i + 1; j < len(test_str); j++ {\n                if test_str[j] == ',' {\n                    tmp_int, tmp_bool = str_to_int(tmp_str)\n                    if tmp_bool {\n                        result = append(result, tmp_int)\n                    } else {\n                        result = append(result, tmp_str)\n                    }\n                    tmp_str = \"\"\n                } else if test_str[j] == ')' {\n                    tmp_int, tmp_bool = str_to_int(tmp_str)\n                    if tmp_bool {\n                        result = append(result, tmp_int)\n                    } else {\n                        result = append(result, tmp_str)\n                    }\n                    break\n                } else {\n                    tmp_str += string(test_str[j])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_len_str string\n    var temp_int_str_len_str_len int\n    var temp_int_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, ch := range test_str {\n        if ch == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(ch)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_idx int\n    var tmp_int_str_idx_max int\n    var tmp_int_str_idx_min int\n    var tmp_int_str_idx_min_flag bool\n    var tmp_int_str_idx_min_flag_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev bool\n    var tmp_int_str_idx_min_flag_prev_prev_prev_prev_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n\n    for _, c := range test_str {\n        if c == ',' {\n            tmp_bool, tmp_int = true, 0\n            tmp_bool, tmp_float = true, 0.0\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_float)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(c)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, char := range test_str {\n        if char == '(' || char == ')' {\n            continue\n        } else if char == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(char)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_char rune\n    var temp_bool bool\n    for _, char := range test_str {\n        if char == '(' || char == ')' {\n            continue\n        }\n        if char == ',' {\n            temp_bool, temp_int = true, 0\n            for _, char := range temp_str {\n                temp_int = temp_int * 10 + int(char - '0')\n            }\n            result = append(result, temp_int)\n            temp_str = \"\"\n            continue\n        }\n        temp_char = char\n        temp_str += string(temp_char)\n    }\n    temp_bool, temp_int = true, 0\n    for _, char := range temp_str {\n        temp_int = temp_int * 10 + int(char - '0')\n    }\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            temp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            result = append(result, int(v - '0'))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_len_str string\n    var temp_int_str_len_str_len int\n    var temp_int_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            tmp_int, tmp_bool = str_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    tmp_int, tmp_bool = str_int(tmp_str)\n    if tmp_bool {\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var is_int bool\n\n    for _, c := range test_str {\n        if c == ',' {\n            tmp_int, is_int = str_to_int(tmp_str)\n            if is_int {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(c)\n        }\n    }\n    tmp_int, is_int = str_to_int(tmp_str)\n    if is_int {\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            temp_str = \"\"\n        } else if test_str[i] == ')' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    var temp_float64 float64\n    var temp_rune rune\n    var temp_byte byte\n    var temp_error error\n    var temp_interface interface{}\n    var temp_array []int\n    var temp_map map[string]int\n    var temp_chan chan int\n    var temp_func func(int) int\n    var temp_",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var str_num string\n    var str_num_int int\n    var str_num_float float64\n    var str_num_bool bool\n    var str_num_char rune\n    var str_num_str string\n    var str_num_tuple []interface{}\n    var str_num_list []interface{}\n    var str_num_dict map[string]interface{}\n    var str_num_set map[interface{}]bool\n    var str_num_bytes []byte\n    var str_num_rune []rune\n    var str_num_error error\n    var str_num_interface interface{}\n    var str_num_chan chan interface{}\n    var str_num_func func()\n    var str_num_ptr *int\n    var str_num_slice []interface{}\n    var str_num_array [3]interface{}\n    var str_num_complex64 complex64\n    var str_num_complex128 complex128\n    var str_num_uint uint\n    var str_num_uint8 uint8\n    var str_num_uint16 uint16\n    var str_num_uint32 uint32\n    var str_num_uint64 uint64\n    var str_num_int8 int8\n    var str_num_int16 int16\n    var str_num_int32 int32\n    var str_num_int64 int64\n    var str_num_float32 float32\n    var str_num_float64 float64\n    var str_num_uintptr uintptr\n    var str_num_bool_true bool\n    var str_num_bool_false bool\n    var str_num_bool_bool bool\n    var str_num_rune_rune rune\n    var str_num_rune_int int\n    var str_num_rune_float float64\n    var str_num_rune_bool bool\n    var str_num_rune_char rune\n    var str_num_rune_str string\n    var str_num_rune_tuple []interface{}\n    var str_",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_int_str string\n    var temp_int_str_len int\n    var temp_int_str_len_str string\n    var temp_int_str_len_str_len int\n    var temp_int_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var temp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var temp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_float float64\n    var tmp_bool bool\n    var tmp_char rune\n    var tmp_interface interface{}\n    var tmp_interface_slice []interface{}\n    var tmp_interface_map map[string]interface{}\n    var tmp_interface_map_slice []map[string]interface{}\n    var tmp_interface_map_slice_slice [][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice [][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice [][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice [][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice [][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice [][][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice_slice [][][][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice_slice_slice [][][][][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice [][][][][][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice [][][][][][][][][][][]map[string]interface{}\n    var tmp_interface_map_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice [][][][][][][][][][][][]map[string]interface{}\n    var tmp_interface_",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var tuple_int []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            tuple_int = append(tuple_int, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    tuple_int = append(tuple_int, temp_int)\n    return tuple_int\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_char rune\n    var temp_bool bool\n    for _, char := range test_str {\n        if char == '(' || char == ')' {\n            continue\n        } else if char == ',' {\n            temp_bool, _ = fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            if temp_bool {\n                result = append(result, temp_int)\n            } else {\n                result = append(result, temp_str)\n            }\n            temp_str = \"\"\n        } else {\n            temp_char = char\n            temp_str += string(temp_char)\n        }\n    }\n    temp_bool, _ = fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    if temp_bool {\n        result = append(result, temp_int)\n    } else {\n        result = append(result, temp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    for _, char := range test_str {\n        if char == ',' {\n            result = append(result, tmp_str)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(char)\n        }\n    }\n    result = append(result, tmp_str)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var str_num string\n    var is_num bool\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            result = append(result, str_num)\n            str_num = \"\"\n            is_num = false\n        } else if test_str[i] == ' ' {\n            continue\n        } else {\n            str_num += string(test_str[i])\n            is_num = true\n        }\n    }\n    if is_num {\n        result = append(result, str_num)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_int_str string\n    var tmp_int_str_len int\n    var tmp_int_str_len_str string\n    var tmp_int_str_len_str_len int\n    var tmp_int_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str string\n    var tmp_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len int\n    var tmp_int_str_len_str_len_str_len_str_len",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var is_int bool\n    for _, c := range test_str {\n        if c == ',' {\n            if is_int {\n                fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n            is_int = false\n        } else if c == ' ' {\n            continue\n        } else {\n            tmp_str += string(c)\n            if c >= '0' && c <= '9' {\n                is_int = true\n            }\n        }\n    }\n    if is_int {\n        fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n        result = append(result, tmp_int)\n    } else {\n        result = append(result, tmp_str)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            tmp_int, tmp_bool = str_to_int(tmp_str)\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_err error\n    var tmp_char byte\n\n    for i := 0; i < len(test_str); i++ {\n        tmp_char = test_str[i]\n        if tmp_char == ',' {\n            tmp_int, tmp_err = strconv.Atoi(tmp_str)\n            if tmp_err != nil {\n                fmt.Println(\"Error: \", tmp_err)\n                return nil\n            }\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(tmp_char)\n        }\n    }\n\n    tmp_int, tmp_err = strconv.Atoi(tmp_str)\n    if tmp_err != nil {\n        fmt.Println(\"Error: \", tmp_err)\n        return nil\n    }\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, val := range test_str {\n        if val == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(val)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var str_buf string\n    var int_buf int\n    var is_str bool\n    for _, c := range test_str {\n        if c == '(' {\n            continue\n        } else if c == ')' {\n            if is_str {\n                result = append(result, str_buf)\n            } else {\n                result = append(result, int_buf)\n            }\n            str_buf = \"\"\n            int_buf = 0\n            is_str = false\n        } else if c == ',' {\n            if is_str {\n                result = append(result, str_buf)\n            } else {\n                result = append(result, int_buf)\n            }\n            str_buf = \"\"\n            int_buf = 0\n            is_str = false\n        } else if c == '\\'' {\n            is_str = true\n        } else {\n            if is_str {\n                str_buf += string(c)\n            } else {\n                int_buf = int_buf * 10 + int(c - '0')\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var tuple_str string\n    var tuple_int int\n    var tuple_float float64\n    var tuple_bool bool\n    var tuple_char rune\n    var tuple_str_slice []string\n    var tuple_int_slice []int\n    var tuple_float_slice []float64\n    var tuple_bool_slice []bool\n    var tuple_char_slice []rune\n    var tuple_str_int_slice []interface{}\n    var tuple_str_int_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice_slice []interface{}\n    var tuple_str_int_slice_slice_slice_slice_slice_slice_slice_",
    "    var result []interface{}\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n   ",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            temp_str = \"\"\n            for j := i + 1; j < len(test_str); j++ {\n                if test_str[j] == ')' {\n                    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n                    result = append(result, temp_int)\n                    i = j\n                    break\n                } else {\n                    temp_str += string(test_str[j])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ',' {\n            fmt.Sscanf(temp_str, \"%d\", &temp_int)\n            result = append(result, temp_int)\n            temp_str = \"\"\n        } else {\n            temp_str += string(test_str[i])\n        }\n    }\n    fmt.Sscanf(temp_str, \"%d\", &temp_int)\n    result = append(result, temp_int)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            continue\n        } else if test_str[i] == ')' {\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n            tmp_bool = false\n        } else if test_str[i] == ',' {\n            if tmp_bool {\n                result = append(result, tmp_int)\n            } else {\n                result = append(result, tmp_str)\n            }\n            tmp_str = \"\"\n            tmp_bool = false\n        } else if test_str[i] >= '0' && test_str[i] <= '9' {\n            tmp_str += string(test_str[i])\n            tmp_bool = true\n        } else {\n            tmp_str += string(test_str[i])\n            tmp_bool = false\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_float float64\n    var temp_bool bool\n    var temp_char rune\n    var temp_interface interface{}\n    var temp_error error\n    var temp_byte byte\n    var temp_rune rune\n    var temp_uint uint\n    var temp_uintptr uintptr\n    var temp_complex64 complex64\n    var temp_complex128 complex128\n    var temp_byte_array []byte\n    var temp_rune_array []rune\n    var temp_interface_array []interface{}\n    var temp_error_array []error\n    var temp_uint_array []uint\n    var temp_uintptr_array []uintptr\n    var temp_complex64_array []complex64\n    var temp_complex128_array []complex128\n    var temp_map map[string]interface{}\n    var temp_map_array []map[string]interface{}\n    var temp_func func()\n    var temp_func_array []func()\n    var temp_chan chan int\n    var temp_chan_array []chan int\n    var temp_",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var i int\n    var tmp_str string\n    var tmp_int int\n    var err error\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            tmp_str = \"\"\n        } else if test_str[i] == ')' {\n            tmp_int, err = strconv.Atoi(tmp_str)\n            if err != nil {\n                fmt.Println(\"Error: \", err)\n            }\n            result = append(result, tmp_int)\n        } else {\n            tmp_str += string(test_str[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n",
    "    var tuple_str []interface{}\n    for _, v := range test_str {\n        tuple_str = append(tuple_str, string(v))\n    }\n    return tuple_str\n}\n",
    "    var result []interface{}\n    var temp_str string\n    var temp_int int\n    var temp_bool bool\n    var temp_float float64\n    var temp_char rune\n    var temp_byte byte\n    var temp_complex complex128\n\n    for _, v := range test_str {\n        if v == '(' || v == ')' || v == ',' {\n            continue\n        } else if v == ' ' {\n            if temp_str != \"\" {\n                temp_int, _ = strconv.Atoi(temp_str)\n                result = append(result, temp_int)\n            }\n            temp_str = \"\"\n        } else {\n            temp_str += string(v)\n        }\n    }\n    if temp_str != \"\" {\n        temp_int, _ = strconv.Atoi(temp_str)\n        result = append(result, temp_int)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    for _, v := range test_str {\n        if v == ',' {\n            result = append(result, tmp_str)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    result = append(result, tmp_str)\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == '(' {\n            i++\n            for test_str[i] != ')' {\n                if test_str[i] == ',' {\n                    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n                    result = append(result, tmp_int)\n                    tmp_str = \"\"\n                } else {\n                    tmp_str += string(test_str[i])\n                }\n                i++\n            }\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    for _, v := range test_str {\n        if v == ',' {\n            fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n            result = append(result, tmp_int)\n            tmp_str = \"\"\n        } else {\n            tmp_str += string(v)\n        }\n    }\n    fmt.Sscanf(tmp_str, \"%d\", &tmp_int)\n    result = append(result, tmp_int)\n    return result\n}\n",
    "    // Write your code here\n    var result []interface{}\n    for _, v := range test_str {\n        if v >= '0' && v <= '9' {\n            result = append(result, int(v - '0'))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var tmp_str string\n    var tmp_int int\n    var tmp_bool bool\n    var tmp_float float64\n    var tmp_complex complex128\n    var tmp_rune rune\n    var tmp_byte byte\n    var tmp_interface interface{}\n    var tmp_error error\n    var tmp_array []int\n    var tmp_slice []int\n    var tmp_map map[string]int\n    var tmp_chan chan int\n    var tmp_func func()\n    var tmp_",
    "    var result []interface{}\n    for _, v := range test_str {\n        result = append(result, int(v))\n    }\n    return result\n}\n"
  ]
}