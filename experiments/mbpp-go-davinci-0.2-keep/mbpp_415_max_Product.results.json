{
  "name": "mbpp_415_max_Product",
  "language": "go_test.go",
  "prompt": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int = 0\n    var max_index int = 0\n    var min_index int = 0\n    var max_value int = 0\n    var min_value int = 0\n    var product int = 0\n    var result []interface{}\n    for i, v := range arr {\n        if i == 0 {\n            max_value = v\n            min_value = v\n            max_index = i\n            min_index = i\n        } else {\n            if v > max_value {\n                max_value = v\n                max_index = i\n            }\n            if v < min_value {\n                min_value = v\n                min_index = i\n            }\n        }\n    }\n    if max_index == min_index {\n        for i, v := range arr {\n            if i == 0 {\n                max_value = v\n                min_value = v\n                max_index = i\n                min_index = i\n            } else {\n                if v > max_value {\n                    max_value = v\n                    max_index = i\n                }\n                if v < min_value {\n                    min_value = v\n                    min_index = i\n                }\n            }\n        }\n    }\n    product = max_value * min_value\n    result = append(result, max_index, min_index, product)\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab7_ht08_test.go:10:9: max_product declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_prod int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmptyouxx8j_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmptyouxx8j_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmptyouxx8j_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3, min, min2 int\n    max = arr[0]\n    max2 = arr[0]\n    max3 = arr[0]\n    min = arr[0]\n    min2 = arr[0]\n    for _, v := range arr {\n        if v > max {\n            max3 = max2\n            max2 = max\n            max = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min {\n            min2 = min\n            min = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    if max*max2 > max*min*min2 {\n        return []interface{}{max, max2}\n    }\n    return []interface{}{max, min, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpmwb6de4o_test.go:55: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpmwb6de4o_test.go:55: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpmwb6de4o_test.go:55: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    for i, v := range arr {\n        if v > max_product {\n            max_product = v\n            max_index = i\n        }\n    }\n    max_product = 0\n    for i, v := range arr {\n        if v > max_product && i != max_index {\n            max_product = v\n            min_index = i\n        }\n    }\n    return []interface{}{arr[max_index], arr[min_index]}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpo7laesqu_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpo7laesqu_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpo7laesqu_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var result []interface{}\n    var max, second_max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    result = append(result, max, second_max)\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpdvfuz94k_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpdvfuz94k_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpdvfuz94k_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    if max1 < max2 {\n        max1, max2 = max2, max1\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmplj00_o0e_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmplj00_o0e_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmplj00_o0e_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_3 = max_2\n            max_2 = v\n        } else if v > max_3 {\n            max_3 = v\n        }\n\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max1, max2 := arr[0], arr[1]\n    if max1 < max2 {\n        max1, max2 = max2, max1\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_3 = max_2\n            max_2 = v\n        } else if v > max_3 {\n            max_3 = v\n        }\n\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp96438w6s_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var result []interface{}\n    for i, v := range arr {\n        if i == 0 {\n            max_value = v\n            min_value = v\n            max_index = i\n            min_index = i\n        } else {\n            if v > max_value {\n                max_value = v\n                max_index = i\n            } else if v < min_value {\n                min_value = v\n                min_index = i\n            }\n        }\n    }\n    max_product = max_value * min_value\n    result = append(result, max_product)\n    result = append(result, max_index)\n    result = append(result, min_index)\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpoarsxd6b_test.go:54: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=0) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpoarsxd6b_test.go:54: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-30) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpoarsxd6b_test.go:54: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2 int\n    var max_index, max2_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1, max2, max3, min1, min2 = 0, 0, 0, 0, 0\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpb8psd9oo_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpb8psd9oo_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpb8psd9oo_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for index, value := range arr {\n        if value > max {\n            second_max = max\n            second_max_index = max_index\n            max = value\n            max_index = index\n        } else if value > second_max {\n            second_max = value\n            second_max_index = index\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpct1ei36o_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpct1ei36o_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpct1ei36o_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index, max * second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmplyo9b25v_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmplyo9b25v_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmplyo9b25v_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    if arr[0] > arr[1] {\n        max1 = arr[0]\n        max2 = arr[1]\n    } else {\n        max1 = arr[1]\n        max2 = arr[0]\n    }\n\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgbk8nz6m_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgbk8nz6m_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgbk8nz6m_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    min1 = arr[0]\n    min2 = arr[1]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max3 = max2\n            max2 = arr[i]\n        } else if arr[i] > max3 {\n            max3 = arr[i]\n        }\n        if arr[i] < min1 {\n            min2 = min1\n            min1 = arr[i]\n        } else if arr[i] < min2 {\n            min2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprqxlaybg_test.go:52: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprqxlaybg_test.go:52: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprqxlaybg_test.go:52: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max_index, second_max, second_max_index int\n    max = arr[0]\n    max_index = 0\n    second_max = arr[1]\n    second_max_index = 1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            second_max_index = max_index\n            max = arr[i]\n            max_index = i\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, max_index, second_max, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpbw2n081c_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=6) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpbw2n081c_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpbw2n081c_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max_1 := arr[0]\n    max_2 := arr[1]\n    if max_1 < max_2 {\n        max_1, max_2 = max_2, max_1\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max_1 {\n            max_2 = max_1\n            max_1 = arr[i]\n        } else if arr[i] > max_2 {\n            max_2 = arr[i]\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp4i6ugnvr_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp4i6ugnvr_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp4i6ugnvr_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2 int\n    var max_index, max2_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2 int\n    var max_index, max2_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6bk07tri_test.go:11:20: max2_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0] * arr[1]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * max > max_product {\n            max_product = arr[i] * max\n        }\n        if arr[i] * min > max_product {\n            max_product = arr[i] * min\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpkwaesejh_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=64)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpkwaesejh_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=36)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpkwaesejh_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max_1, max_2 := 0, 0\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp9uz__yo__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp9uz__yo__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp9uz__yo__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max := arr[0]\n    min := arr[0]\n    result := []interface{}{}\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    result = append(result, max, min)\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmplcumddwb_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmplcumddwb_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmplcumddwb_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0]\n    for _, v := range arr[1:] {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n        if v * max_product > max_product {\n            max_product = v * max_product\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=5376)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i, v := range arr {\n        for j, v2 := range arr {\n            if i != j {\n                product := v * v2\n                if product > max_product {\n                    max_product = product\n                    max_product_pair = []interface{}{v, v2}\n                }\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2 int\n    var max_index, max2_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int = 0\n    var max_index int = 0\n    var max_index2 int = 0\n    for i, v := range arr {\n        for j, v2 := range arr {\n            if i != j && v*v2 > max_product {\n                max_product = v*v2\n                max_index = i\n                max_index2 = j\n            }\n        }\n    }\n    return []interface{}{max_index, max_index2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpff9vf367_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpff9vf367_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpff9vf367_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max1, max2 := arr[0], arr[1]\n    if max1 < max2 {\n        max1, max2 = max2, max1\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsf1qsg8j_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    // Write your code here\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf8rfjjd1_test.go:38: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf8rfjjd1_test.go:38: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf8rfjjd1_test.go:38: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0] * arr[1]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if max_product < max * min {\n            max_product = max * min\n        }\n    }\n    return []interface{}{max, min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpi5bhb9hp_test.go:45: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpi5bhb9hp_test.go:45: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpi5bhb9hp_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_index, max2_index, max3_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n    return []interface{}{max, max2, max3}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2zhx0yt9_test.go:11:32: max3_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_prod int\n    var max_prod_arr []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            prod := arr[i] * arr[j]\n            if prod > max_prod {\n                max_prod = prod\n                max_prod_arr = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_prod_arr\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmplv_qw_4i_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmplv_qw_4i_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmplv_qw_4i_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    min1 = arr[0]\n    min2 = arr[1]\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp16ro_sqd_test.go:52: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp16ro_sqd_test.go:52: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp16ro_sqd_test.go:52: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n\n    if max1*max2 > max3*min1*min2 {\n        return []interface{}{max1, max2}\n    } else {\n        return []interface{}{max3, min1, min2}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppbeyhwj6_test.go:53: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppbeyhwj6_test.go:53: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppbeyhwj6_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int\n    var min int\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            max = arr[i]\n            min = arr[i]\n            max_product = arr[i]\n            max_product_pair = []interface{}{arr[i], arr[i]}\n        } else {\n            if arr[i] > max {\n                max = arr[i]\n            }\n            if arr[i] < min {\n                min = arr[i]\n            }\n            if arr[i] * max > max_product {\n                max_product = arr[i] * max\n                max_product_pair = []interface{}{arr[i], max}\n            }\n            if arr[i] * min > max_product {\n                max_product = arr[i] * min\n                max_product_pair = []interface{}{arr[i], min}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpvd4tz2lr_test.go:55: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpvd4tz2lr_test.go:55: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-6) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpvd4tz2lr_test.go:55: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, val := range arr {\n        if val > max {\n            second_max = max\n            max = val\n        } else if val > second_max {\n            second_max = val\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpigplok_j_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpigplok_j_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpigplok_j_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    max = arr[0]\n    secondMax = arr[1]\n    if max < secondMax {\n        max, secondMax = secondMax, max\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            secondMax = max\n            max = arr[i]\n        } else if arr[i] > secondMax {\n            secondMax = arr[i]\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpuauousv__test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpuauousv__test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpuauousv__test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp8izi8b48_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp8izi8b48_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp8izi8b48_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzm070ib2_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzm070ib2_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzm070ib2_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_3 = max_2\n            max_2 = v\n        } else if v > max_3 {\n            max_3 = v\n        }\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpj_40wu3e_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpj_40wu3e_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpj_40wu3e_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    var max, secondMax int\n    if arr[0] > arr[1] {\n        max = arr[0]\n        secondMax = arr[1]\n    } else {\n        max = arr[1]\n        secondMax = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            secondMax = max\n            max = arr[i]\n        } else if arr[i] > secondMax {\n            secondMax = arr[i]\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpayjnct0k_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpayjnct0k_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpayjnct0k_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_3 = max_2\n            max_2 = v\n        } else if v > max_3 {\n            max_3 = v\n        }\n\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n\n    if max_1*max_2*max_3 > max_1*min_1*min_2 {\n        return []interface{}{max_1, max_2, max_3}\n    } else {\n        return []interface{}{max_1, min_1, min_2}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpaie2afmo_test.go:53: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpaie2afmo_test.go:53: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpaie2afmo_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_prod int = 0\n    var max_i int = 0\n    var max_j int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if i != j {\n                prod := arr[i] * arr[j]\n                if prod > max_prod {\n                    max_prod = prod\n                    max_i = i\n                    max_j = j\n                }\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp2x6bloyy_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp2x6bloyy_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp2x6bloyy_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int = arr[0]\n    var min int = arr[0]\n    var result int = arr[0]\n    var max_index int = 0\n    var min_index int = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n            max_index = i\n        }\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n        if arr[i] * max > result {\n            result = arr[i] * max\n        }\n        if arr[i] * min > result {\n            result = arr[i] * min\n        }\n    }\n    return []interface{}{max_index, min_index, result}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpn5j9ho4v_test.go:49: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=5) %!s(int=64)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpn5j9ho4v_test.go:49: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=6) %!s(int=36)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpn5j9ho4v_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=0) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2 int\n    var max_index, max2_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzr8n5xv4_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, max4 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[0]\n    max4 = arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max1 = arr[i]\n        }\n        if arr[i] > max2 && arr[i] < max1 {\n            max2 = arr[i]\n        }\n        if arr[i] < max3 {\n            max3 = arr[i]\n        }\n        if arr[i] < max4 && arr[i] > max3 {\n            max4 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2, max3, max4}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppgamfzt0_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=4) %!s(int=0) %!s(int=2)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppgamfzt0_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=-6) %!s(int=-1)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppgamfzt0_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else {\n            max = min * arr[i]\n            min = max * arr[i]\n        }\n        if max > max_product {\n            max_product = max\n        }\n    }\n    return []interface{}{max_product, max, min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpiksboekr_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=168) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpiksboekr_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpiksboekr_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=6) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max := arr[0]\n    min := arr[0]\n    max_prod := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * max_prod > max_prod {\n            max_prod = arr[i] * max_prod\n        }\n    }\n    return []interface{}{max, min, max_prod}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp44kep2ux_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=5376)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp44kep2ux_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp44kep2ux_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max = arr[0]\n    var min = arr[0]\n    var max_product = arr[0] * arr[1]\n    var result = []interface{}{arr[0], arr[1]}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if max_product < max * min {\n            max_product = max * min\n            result = []interface{}{max, min}\n        }\n    }\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphfg6yg9w_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=7) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmphfg6yg9w_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=0) %!s(int=-1)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmphfg6yg9w_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpupbja77b_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpupbja77b_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpupbja77b_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max, min, second_min int\n    max = arr[0]\n    min = arr[0]\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n\n        if v < min {\n            second_min = min\n            min = v\n        } else if v < second_min {\n            second_min = v\n        }\n    }\n    return []interface{}{max, second_max, min, second_min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp0cg0kejt_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp0cg0kejt_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp0cg0kejt_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    if arr[0] > arr[1] {\n        max, second_max = arr[0], arr[1]\n    } else {\n        max, second_max = arr[1], arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqmao19jx_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqmao19jx_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqmao19jx_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * max > max_product {\n            max_product = arr[i] * max\n        }\n        if arr[i] * min > max_product {\n            max_product = arr[i] * min\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpn_9ejh7r_test.go:45: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=64)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpn_9ejh7r_test.go:45: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=36)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpn_9ejh7r_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    var max_product int\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    if max1*max2*max3 > max1*min1*min2 {\n        max_product = max1*max2*max3\n    } else {\n        max_product = max1*min1*min2\n    }\n    return []interface{}{max1, max2, max3, min1, min2, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp2k0w94e5_test.go:53: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=224)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp2k0w94e5_test.go:53: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4) %!s(int=120)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp2k0w94e5_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmphukkmz1p_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_index, max2_index, max3_index int\n    var min, min2, min3 int\n    var min_index, min2_index, min3_index int\n\n    for i, v := range arr {\n        if v > max {\n            max3 = max2\n            max3_index = max2_index\n            max2 = max\n            max2_index = max_index\n            max = v\n            max_index = i\n        } else if v > max2 {\n            max3 = max2\n            max3_index = max2_index\n            max2 = v\n            max2_index = i\n        } else if v > max3 {\n            max3 = v\n            max3_index = i\n        }\n\n        if v < min {\n            min3 = min2\n            min3_index = min2_index\n            min2 = min\n            min2_index = min_index\n            min = v\n            min_index = i\n        } else if v < min2 {\n            min3 = min2\n            min3_index = min2_index\n            min2 = v\n            min2_index = i\n        } else if v < min3 {\n            min3 = v\n            min3_index = i\n        }\n    }\n\n    if max * max2 > min * min2 {\n        return []interface{}{max_index, max2_index}\n    } else {\n        return []interface{}{min_index, min2_index}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkkukastp_test.go:11:32: max3_index declared but not used\n/tmp/tmpkkukastp_test.go:13:32: min3_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * max > max_product {\n            max_product = arr[i] * max\n        }\n        if arr[i] * min > max_product {\n            max_product = arr[i] * min\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=64)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=36)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var result []interface{}\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    result = append(result, max, secondMax)\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpze2fd0k2_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpze2fd0k2_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpze2fd0k2_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    var max_1_index, max_2_index int\n    for i, v := range arr {\n        if v > max_1 {\n            max_1 = v\n            max_1_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max_2 && i != max_1_index {\n            max_2 = v\n            max_2_index = i\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaj1ztfw5_test.go:11:22: max_2_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_index, max2_index, max3_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n    return []interface{}{max, max2, max3, max_index, max2_index, max3_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max_prod := 0\n    max_pair := []interface{}{}\n    for i, v := range arr {\n        for j, v2 := range arr {\n            if i != j {\n                prod := v * v2\n                if prod > max_prod {\n                    max_prod = prod\n                    max_pair = []interface{}{v, v2}\n                }\n            }\n        }\n    }\n    return max_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprygz9bf4_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprygz9bf4_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprygz9bf4_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n    if max_index == min_index {\n        for i, v := range arr {\n            if i != max_index {\n                if v > min_value {\n                    min_value = v\n                    min_index = i\n                }\n            }\n        }\n    }\n    max_product = max_value * min_value\n    max_pair = append(max_pair, max_value, min_value)\n    return max_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7lqcysku_test.go:10:9: max_product declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    for _, v := range arr {\n        if v > max1 {\n            max1 = v\n        }\n    }\n    for _, v := range arr {\n        if v < max1 && v > max2 {\n            max2 = v\n        }\n    }\n    for _, v := range arr {\n        if v < max1 && v < max2 && v > max3 {\n            max3 = v\n        }\n    }\n    min1 = arr[0]\n    for _, v := range arr {\n        if v < min1 {\n            min1 = v\n        }\n    }\n    for _, v := range arr {\n        if v > min1 && v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpslk9eoy0_test.go:56: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpslk9eoy0_test.go:56: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpslk9eoy0_test.go:56: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{max, secondMax, maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int = 0\n    var max_index int = 0\n    var min int = 0\n    var min_index int = 0\n    var max_product int = 0\n    var min_product int = 0\n    var max_product_index int = 0\n    var min_product_index int = 0\n    var max_product_pair []interface{}\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n        if v < min {\n            min = v\n            min_index = i\n        }\n        if v * max > max_product {\n            max_product = v * max\n            max_product_index = i\n        }\n        if v * min < min_product {\n            min_product = v * min\n            min_product_index = i\n        }\n    }\n    if max_product > min_product {\n        max_product_pair = []interface{}{max_product_index, max_index}\n    } else {\n        max_product_pair = []interface{}{min_product_index, min_index}\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsr9uy2uw_test.go:60: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsr9uy2uw_test.go:60: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsr9uy2uw_test.go:60: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n    if max_value * min_value > max_product {\n        max_product = max_value * min_value\n    }\n    return []interface{}{max_index, min_index, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpe4p_ffo1_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpe4p_ffo1_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpe4p_ffo1_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_index, max2_index, max3_index int\n\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n\n    for i, v := range arr {\n        if v > max3 && i != max_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n\n    return []interface{}{max, max2, max3}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgd3wj982_test.go:11:32: max3_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcnulkig6_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int\n    var max_index int\n    var min int\n    var min_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return []interface{}{max, min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4orgcpyx_test.go:11:9: max_index declared but not used\n/tmp/tmp4orgcpyx_test.go:13:9: min_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    if arr[0] > arr[1] {\n        max1 = arr[0]\n        max2 = arr[1]\n    } else {\n        max1 = arr[1]\n        max2 = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6a1hf012_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6a1hf012_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6a1hf012_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    max = arr[0]\n    second_max = arr[1]\n    if max < second_max {\n        max, second_max = second_max, max\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp3opflj59_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp3opflj59_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp3opflj59_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_product_index []interface{}\n\n    for i, v := range arr {\n        if i == 0 {\n            max_value = v\n            min_value = v\n            max_index = i\n            min_index = i\n        } else {\n            if v > max_value {\n                max_value = v\n                max_index = i\n            } else if v < min_value {\n                min_value = v\n                min_index = i\n            }\n        }\n    }\n\n    if max_value * min_value > max_product {\n        max_product = max_value * min_value\n        max_product_index = []interface{}{max_index, min_index}\n    }\n\n    return max_product_index\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpbzie53pr_test.go:57: expected '[%!s(int=7) %!s(int=8)]', got '[]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpbzie53pr_test.go:57: expected '[%!s(int=-4) %!s(int=-6)]', got '[]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpbzie53pr_test.go:57: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index_1, max_index_2 int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index_1 = i\n                max_index_2 = j\n            }\n        }\n    }\n    return []interface{}{max_index_1, max_index_2, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp3634cuff_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp3634cuff_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp3634cuff_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var max_index_2 int\n    for i, v := range arr {\n        if v > max_product {\n            max_product = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max_product && i != max_index {\n            max_product = v\n            max_index_2 = i\n        }\n    }\n    return []interface{}{max_index, max_index_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqozqhskf_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqozqhskf_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqozqhskf_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > second_max && i != max_index {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6z10ajhk_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6z10ajhk_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6z10ajhk_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = i\n                min_index = j\n            }\n        }\n    }\n    return []interface{}{max_product, arr[max_index], arr[min_index]}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp_l7ds3u1_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp_l7ds3u1_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=-4) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp_l7ds3u1_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=2) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf348kshm_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i, v := range arr {\n        for j, v2 := range arr {\n            if i != j {\n                if v * v2 > max_product {\n                    max_product = v * v2\n                    max_product_pair = []interface{}{v, v2}\n                }\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    for i, v := range arr {\n        if i == 0 {\n            max_value = v\n            min_value = v\n            max_index = i\n            min_index = i\n            continue\n        }\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n    if max_index == min_index {\n        max_product = max_value * min_value\n    } else {\n        max_product = max_value * min_value\n    }\n    return []interface{}{max_product, max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp73ro7ppe_test.go:55: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=0) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp73ro7ppe_test.go:55: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-30) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp73ro7ppe_test.go:55: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    var max_index1, max_index2 int\n    for i, v := range arr {\n        if v > max1 {\n            max1 = v\n            max_index1 = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index1 {\n            max2 = v\n            max_index2 = i\n        }\n    }\n    return []interface{}{max_index1, max_index2, max1 * max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp8q52brba_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp8q52brba_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp8q52brba_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    max = arr[0]\n    second_max = arr[1]\n    if arr[1] > arr[0] {\n        max = arr[1]\n        second_max = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5a5a1jon_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5a5a1jon_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5a5a1jon_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{max, secondMax, maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpd1r7u69r_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int = 0\n    var max_i int = 0\n    var max_j int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp4vwl0w8z_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp4vwl0w8z_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp4vwl0w8z_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int\n    var max_index int\n    var min int\n    var min_index int\n    var max_product int\n    var max_product_index []interface{}\n    for i, v := range arr {\n        if i == 0 {\n            max = v\n            max_index = i\n            min = v\n            min_index = i\n            max_product = v\n            max_product_index = append(max_product_index, i)\n        } else {\n            if v > max {\n                max = v\n                max_index = i\n            }\n            if v < min {\n                min = v\n                min_index = i\n            }\n            if v*max > max_product {\n                max_product = v*max\n                max_product_index = []interface{}{i, max_index}\n            }\n            if v*min > max_product {\n                max_product = v*min\n                max_product_index = []interface{}{i, min_index}\n            }\n        }\n    }\n    return max_product_index\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpuqx73kb7_test.go:61: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpuqx73kb7_test.go:61: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=6) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpuqx73kb7_test.go:61: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n\n    if arr[0] > arr[1] {\n        max_product = arr[0] * arr[1]\n        max_index = 0\n        min_index = 1\n    } else {\n        max_product = arr[1] * arr[0]\n        max_index = 1\n        min_index = 0\n    }\n\n    for i := 2; i < len(arr); i++ {\n        if arr[i] * arr[max_index] > max_product {\n            max_product = arr[i] * arr[max_index]\n            min_index = max_index\n            max_index = i\n        } else if arr[i] * arr[min_index] > max_product {\n            max_product = arr[i] * arr[min_index]\n            max_index = min_index\n            min_index = i\n        }\n    }\n\n    return []interface{}{max_product, max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123520,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpa_9u3mry_test.go:54: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpa_9u3mry_test.go:54: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=6) %!s(int=3)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpa_9u3mry_test.go:54: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max = arr[0]\n    var min = arr[0]\n    var result = make([]interface{}, 2)\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    result[0] = max\n    result[1] = min\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1w3jblcw_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1w3jblcw_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1w3jblcw_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_1 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max_2 && v < max_1 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpd6ecrgsz_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpd6ecrgsz_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpd6ecrgsz_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_prod int = 0\n    var max_i int = 0\n    var max_j int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_prod {\n                max_prod = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_prod, max_i, max_j}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpx1g54vh1_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpx1g54vh1_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpx1g54vh1_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n\n    max_1, max_2 := arr[0], arr[1]\n    if max_1 < max_2 {\n        max_1, max_2 = max_2, max_1\n    }\n\n    for _, v := range arr[2:] {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6qjcd_w7_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6qjcd_w7_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6qjcd_w7_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int\n    var min int\n    var max_product int\n    var max_product_arr []interface{}\n    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            max = arr[i]\n            min = arr[i]\n            max_product = arr[i]\n        } else {\n            if arr[i] > max {\n                max = arr[i]\n            }\n            if arr[i] < min {\n                min = arr[i]\n            }\n            if arr[i] * max > max_product {\n                max_product = arr[i] * max\n                max_product_arr = []interface{}{max, arr[i]}\n            }\n            if arr[i] * min > max_product {\n                max_product = arr[i] * min\n                max_product_arr = []interface{}{min, arr[i]}\n            }\n        }\n    }\n    return max_product_arr\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmple5o3sk1_test.go:54: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=8)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmple5o3sk1_test.go:54: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-6) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmple5o3sk1_test.go:54: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    for i, v := range arr {\n        if v > max_product {\n            max_product = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v < max_product && i != max_index {\n            min_index = i\n        }\n    }\n    return []interface{}{max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5gm8gzbc_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5gm8gzbc_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5gm8gzbc_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n\n    return []interface{}{max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp8yqet961_test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp8yqet961_test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp8yqet961_test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max1 := arr[0]\n    max2 := arr[1]\n    if max1 < max2 {\n        max1, max2 = max2, max1\n    }\n    for _, v := range arr[2:] {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpvh99m682_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpvh99m682_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpvh99m682_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    max_1, max_2, max_3 = arr[0], arr[0], arr[0]\n    min_1, min_2 = arr[0], arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = arr[i]\n        } else if arr[i] > max_2 {\n            max_3 = max_2\n            max_2 = arr[i]\n        } else if arr[i] > max_3 {\n            max_3 = arr[i]\n        }\n\n        if arr[i] < min_1 {\n            min_2 = min_1\n            min_1 = arr[i]\n        } else if arr[i] < min_2 {\n            min_2 = arr[i]\n        }\n    }\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzyq3opf2_test.go:50: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzyq3opf2_test.go:50: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzyq3opf2_test.go:50: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_value {\n            max_value = arr[i]\n            max_index = i\n        }\n        if arr[i] < min_value {\n            min_value = arr[i]\n            min_index = i\n        }\n    }\n\n    max_product = max_value * min_value\n    max_pair = append(max_pair, max_index, min_index)\n\n    return max_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123521,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7l4nkfs5_test.go:10:9: max_product declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3, max4 int\n    var max_index, max2_index, max3_index, max4_index int\n    for i, v := range arr {\n        if v > max {\n            max4 = max3\n            max4_index = max3_index\n            max3 = max2\n            max3_index = max2_index\n            max2 = max\n            max2_index = max_index\n            max = v\n            max_index = i\n        } else if v > max2 {\n            max4 = max3\n            max4_index = max3_index\n            max3 = max2\n            max3_index = max2_index\n            max2 = v\n            max2_index = i\n        } else if v > max3 {\n            max4 = max3\n            max4_index = max3_index\n            max3 = v\n            max3_index = i\n        } else if v > max4 {\n            max4 = v\n            max4_index = i\n        }\n    }\n    return []interface{}{max_index, max2_index, max3_index, max4_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpn1lcmgv1_test.go:57: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=3) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpn1lcmgv1_test.go:57: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpn1lcmgv1_test.go:57: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0] * arr[1]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * arr[i-1] > max_product {\n            max_product = arr[i] * arr[i-1]\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpvt238kib_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=32)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpvt238kib_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=8)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpvt238kib_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max int\n    var max_index int\n    var min int\n    var min_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return []interface{}{max, min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123519,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4orgcpyx_test.go:11:9: max_index declared but not used\n/tmp/tmp4orgcpyx_test.go:13:9: min_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max, max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmps8pi06l__test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmps8pi06l__test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmps8pi06l__test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    var max_1_index, max_2_index int\n    for i, v := range arr {\n        if v > max_1 {\n            max_1 = v\n            max_1_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max_2 && i != max_1_index {\n            max_2 = v\n            max_2_index = i\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaj1ztfw5_test.go:11:22: max_2_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []interface{}{i, j}\n            }\n        }\n    }\n    return max_index\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{0, 0}\n    }\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpfwgf_t1j_test.go:40: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpfwgf_t1j_test.go:40: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpfwgf_t1j_test.go:40: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index_1, max_index_2 int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index_1 = i\n                max_index_2 = j\n            }\n        }\n    }\n    return []interface{}{max_product, max_index_1, max_index_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzvmlgtmp_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzvmlgtmp_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzvmlgtmp_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_index = i\n        }\n    }\n\n    max_product = max_value * min_value\n\n    return []interface{}{max_product, max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpiwfbt075_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=0) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpiwfbt075_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-30) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpiwfbt075_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] * max > max_product {\n            max_product = arr[i] * max\n        }\n        if arr[i] * min > max_product {\n            max_product = arr[i] * min\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=64)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=36)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpy_759dg2_test.go:46: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int = 0\n    var max_index int = 0\n    var min_index int = 0\n    for i, v := range arr {\n        if v > max_product {\n            max_product = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v < max_product && v > arr[min_index] {\n            min_index = i\n        }\n    }\n    return []interface{}{max_index, min_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpriiemv77_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpriiemv77_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpriiemv77_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, max_3, min_1, min_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_3 = max_2\n            max_2 = v\n        } else if v > max_3 {\n            max_3 = v\n        }\n\n        if v < min_1 {\n            min_2 = min_1\n            min_1 = v\n        } else if v < min_2 {\n            min_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2, max_3, min_1, min_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpn24nbff9_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpn24nbff9_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpn24nbff9_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2, min_1, min_2 int\n    for _, i := range arr {\n        if i > max_1 {\n            max_2 = max_1\n            max_1 = i\n        } else if i > max_2 {\n            max_2 = i\n        }\n        if i < min_1 {\n            min_2 = min_1\n            min_1 = i\n        } else if i < min_2 {\n            min_2 = i\n        }\n    }\n    if max_1 * max_2 > min_1 * min_2 {\n        return []interface{}{max_1, max_2}\n    } else {\n        return []interface{}{min_1, min_2}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp8qj6argm_test.go:47: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp8qj6argm_test.go:47: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp8qj6argm_test.go:47: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    min1 = arr[0]\n    min2 = arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max3 = max2\n            max2 = arr[i]\n        } else if arr[i] > max3 {\n            max3 = arr[i]\n        }\n\n        if arr[i] < min1 {\n            min2 = min1\n            min1 = arr[i]\n        } else if arr[i] < min2 {\n            min2 = arr[i]\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpll4ub57w_test.go:53: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpll4ub57w_test.go:53: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpll4ub57w_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1, max2, max3, min1, min2 = 0, 0, 0, 0, 0\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, min1, min2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphw31xy_a_test.go:49: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmphw31xy_a_test.go:49: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmphw31xy_a_test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0] * arr[1]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        if max_product < max * min {\n            max_product = max * min\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwe5beg9k_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpwe5beg9k_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwe5beg9k_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    max_1 = 0\n    max_2 = 0\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpvz4_tqer_test.go:39: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpvz4_tqer_test.go:39: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpvz4_tqer_test.go:39: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, max4 int\n    for _, v := range arr {\n        if v > max1 {\n            max1 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max2 && v < max1 {\n            max2 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max3 && v < max2 {\n            max3 = v\n        }\n    }\n    for _, v := range arr {\n        if v > max4 && v < max3 {\n            max4 = v\n        }\n    }\n    return []interface{}{max1, max2, max3, max4}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbzk_vu__test.go:49: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbzk_vu__test.go:49: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbzk_vu__test.go:49: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_1, max_2 int\n    for _, v := range arr {\n        if v > max_1 {\n            max_2 = max_1\n            max_1 = v\n        } else if v > max_2 {\n            max_2 = v\n        }\n    }\n    return []interface{}{max_1, max_2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpcbc87egs_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[2]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        } else if arr[i] > max2 {\n            max3 = max2\n            max2 = arr[i]\n        } else if arr[i] > max3 {\n            max3 = arr[i]\n        }\n\n        if arr[i] < min1 {\n            min2 = min1\n            min1 = arr[i]\n        } else if arr[i] < min2 {\n            min2 = arr[i]\n        }\n    }\n\n    if max1*max2*max3 > max1*min1*min2 {\n        return []interface{}{max1, max2, max3}\n    } else {\n        return []interface{}{max1, min1, min2}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxni0hm2c_test.go:59: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxni0hm2c_test.go:59: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxni0hm2c_test.go:59: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    for _, v := range arr {\n        if v > max {\n            secondMax = max\n            max = v\n        } else if v > secondMax {\n            secondMax = v\n        }\n    }\n    return []interface{}{max, secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgxcjmod0_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_i, max2_i, max3_i int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_i = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_i {\n            max2 = v\n            max2_i = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max_i && i != max2_i {\n            max3 = v\n            max3_i = i\n        }\n    }\n    return []interface{}{max_i, max2_i, max3_i}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpko8g02ca_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpko8g02ca_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpko8g02ca_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    if len(arr) < 2 {\n        return []interface{}{}\n    }\n    max1, max2 := arr[0], arr[1]\n    if max2 > max1 {\n        max1, max2 = max2, max1\n    }\n    for _, v := range arr[2:] {\n        if v > max1 {\n            max2, max1 = max1, v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmph3k4fas7_test.go:42: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmph3k4fas7_test.go:42: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmph3k4fas7_test.go:42: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_value_index int\n    var min_value_index int\n    var max_value_index_2 int\n    var min_value_index_2 int\n    var max_value_2 int\n    var min_value_2 int\n    var max_product_2 int\n    var max_product_3 int\n    var max_product_4 int\n    var max_product_5 int\n    var max_product_6 int\n    var max_product_7 int\n    var max_product_8 int\n    var max_product_9 int\n    var max_product_10 int\n    var max_product_11 int\n    var max_product_12 int\n    var max_product_13 int\n    var max_product_14 int\n    var max_product_15 int\n    var max_product_16 int\n    var max_product_17 int\n    var max_product_18 int\n    var max_product_19 int\n    var max_product_20 int\n    var max_product_21 int\n    var max_product_22 int\n    var max_product_23 int\n    var max_product_24 int\n    var max_product_25 int\n    var max_product_26 int\n    var max_product_27 int\n    var max_product_28 int\n    var max_product_29 int\n    var max_product_30 int\n    var max_product_31 int\n    var max_product_32 int\n    var max_product_33 int\n    var max_product_34 int\n    var max_product_35 int\n    var max_product_36 int\n    var max_product_37 int\n    var max_product_38 int\n    var max_product_39 int\n    var max_product_40 int\n    var max_product_41 int\n    var max_product_42 int\n    var max_product_43 int\n    var max_product_44 int\n    var max_product_45 int\n    var max_product_46 int\n    var max_product_47 int\n    var max_\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpridxj3v9_test.go:67:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex, max * secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0] * arr[1]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] * max > max_product {\n            max_product = arr[i] * max\n        }\n        if arr[i] * min > max_product {\n            max_product = arr[i] * min\n        }\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    return []interface{}{max_product, max, min}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjow703u6_test.go:45: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=56) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjow703u6_test.go:45: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=24) %!s(int=5) %!s(int=-6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjow703u6_test.go:45: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=6) %!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_product_pair []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_product_pair = []interface{}{arr[i], arr[j]}\n            }\n        }\n    }\n    return max_product_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517554,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_p, max_i, max_j int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_p {\n                max_p = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            }\n        }\n    }\n    return []interface{}{max_i, max_j, max_p}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpoz7vtnjt_test.go:38: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpoz7vtnjt_test.go:38: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpoz7vtnjt_test.go:38: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    if arr[0] > arr[1] {\n        max = arr[0]\n        second_max = arr[1]\n    } else {\n        max = arr[1]\n        second_max = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3, max4 int\n    var max_index, max2_index, max3_index, max4_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max4 && i != max_index && i != max2_index && i != max3_index {\n            max4 = v\n            max4_index = i\n        }\n    }\n    return []interface{}{max, max_index, max2, max2_index, max3, max3_index, max4, max4_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpipm86i6z_test.go:54: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpipm86i6z_test.go:54: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=4) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpipm86i6z_test.go:54: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2 int\n    for _, v := range arr {\n        if v > max1 {\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max2 = v\n        }\n    }\n    return []interface{}{max1, max2}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5xstwyp__test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_pair []interface{}\n\n    for i, v := range arr {\n        if i == 0 {\n            max_value = v\n            min_value = v\n            max_index = i\n            min_index = i\n        } else {\n            if v > max_value {\n                max_value = v\n                max_index = i\n            }\n            if v < min_value {\n                min_value = v\n                min_index = i\n            }\n        }\n    }\n\n    if max_index == min_index {\n        for i, v := range arr {\n            if i == max_index {\n                continue\n            }\n            if v > min_value {\n                min_value = v\n                min_index = i\n            }\n        }\n    }\n\n    max_product = max_value * min_value\n    max_pair = []interface{}{max_value, min_value}\n\n    return max_pair\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w8k4izt_test.go:10:9: max_product declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    for _, v := range arr {\n        if v > max {\n            second_max = max\n            max = v\n        } else if v > second_max {\n            second_max = v\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o_mevkv_test.go:37: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index int\n    var min_index int\n    var max_value int\n    var min_value int\n    var max_value_index int\n    var min_value_index int\n\n    for i, v := range arr {\n        if v > max_value {\n            max_value = v\n            max_value_index = i\n        }\n        if v < min_value {\n            min_value = v\n            min_value_index = i\n        }\n    }\n\n    if max_value_index == min_value_index {\n        for i, v := range arr {\n            if i != max_value_index {\n                if v > max_value {\n                    max_value = v\n                    max_value_index = i\n                }\n                if v < min_value {\n                    min_value = v\n                    min_value_index = i\n                }\n            }\n        }\n    }\n\n    max_product = max_value * min_value\n    max_index = max_value_index\n    min_index = min_value_index\n\n    for i, v := range arr {\n        if i != max_value_index && i != min_value_index {\n            if v * max_value > max_product {\n                max_product = v * max_value\n                max_index = i\n                min_index = max_value_index\n            }\n            if v * min_value > max_product {\n                max_product = v * min_value\n                max_index = i\n                min_index = min_value_index\n            }\n        }\n    }\n\n    return []interface{}{arr[max_index], arr[min_index]}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max_product int\n    var max_index []interface{}\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] * arr[j] > max_product {\n                max_product = arr[i] * arr[j]\n                max_index = []interface{}{i, j}\n            }\n        }\n    }\n    return max_index\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123522,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp3ry7huuk_test.go:38: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, max2, max3 int\n    var max_index, max2_index, max3_index int\n    for i, v := range arr {\n        if v > max {\n            max = v\n            max_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max2 && i != max_index {\n            max2 = v\n            max2_index = i\n        }\n    }\n    for i, v := range arr {\n        if v > max3 && i != max_index && i != max2_index {\n            max3 = v\n            max3_index = i\n        }\n    }\n    return []interface{}{max, max2, max3, max_index, max2_index, max3_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123517,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpe447qm61_test.go:48: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex, max * secondMax}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4) %!s(int=56)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpf_6sqw6b_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    var max_index, second_max_index int\n    for i, v := range arr {\n        if v > max {\n            second_max = max\n            second_max_index = max_index\n            max = v\n            max_index = i\n        } else if v > second_max {\n            second_max = v\n            second_max_index = i\n        }\n    }\n    return []interface{}{max, second_max, max_index, second_max_index}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0) %!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppfexaqtx_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, min, max_product int\n    max = arr[0]\n    min = arr[0]\n    max_product = arr[0]\n    for _, v := range arr[1:] {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n        if v * max_product > max_product {\n            max_product = v * max_product\n        }\n    }\n    return []interface{}{max, min, max_product}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=0) %!s(int=5376)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpp2y9y1c__test.go:43: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=1) %!s(int=6)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max1, max2, max3, min1, min2 int\n    max1, max2, max3 = -1, -1, -1\n    min1, min2 = 1, 1\n    for _, v := range arr {\n        if v > max1 {\n            max3 = max2\n            max2 = max1\n            max1 = v\n        } else if v > max2 {\n            max3 = max2\n            max2 = v\n        } else if v > max3 {\n            max3 = v\n        }\n        if v < min1 {\n            min2 = min1\n            min1 = v\n        } else if v < min2 {\n            min2 = v\n        }\n    }\n    if max1*max2*max3 > max1*min1*min2 {\n        return []interface{}{max1, max2, max3}\n    } else {\n        return []interface{}{max1, min1, min2}\n    }\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmppxzzc40m_test.go:53: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmppxzzc40m_test.go:53: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=-6) %!s(int=-4)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmppxzzc40m_test.go:53: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, second_max int\n    if arr[0] > arr[1] {\n        max = arr[0]\n        second_max = arr[1]\n    } else {\n        max = arr[1]\n        second_max = arr[0]\n    }\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            second_max = max\n            max = arr[i]\n        } else if arr[i] > second_max {\n            second_max = arr[i]\n        }\n    }\n    return []interface{}{max, second_max}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123523,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=8) %!s(int=7)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1_vtldv3_test.go:44: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find a pair with highest product from a given array of integers.\nfunc max_Product(arr []int) []interface{} {\n    var max, secondMax int\n    var maxIndex, secondMaxIndex int\n    for i, v := range arr {\n        if v > max {\n            secondMax = max\n            secondMaxIndex = maxIndex\n            max = v\n            maxIndex = i\n        } else if v > secondMax {\n            secondMax = v\n            secondMaxIndex = i\n        }\n    }\n    return []interface{}{maxIndex, secondMaxIndex}\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=7) %!s(int=8)]', got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=-4) %!s(int=-6)]', got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprazrftm8_test.go:41: expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}