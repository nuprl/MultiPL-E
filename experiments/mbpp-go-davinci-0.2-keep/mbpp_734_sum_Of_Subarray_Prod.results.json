{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "go_test.go",
  "prompt": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var n int = len(arr)\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var prod int = 1\n    var len_arr int = len(arr)\n    for i := 0; i < len_arr; i++ {\n        for j := i; j < len_arr; j++ {\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n            prod = 1\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    n := len(arr)\n    var sum int\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    // return 0\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var n int = len(arr)\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var prod int = 1\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            result += prod\n        }\n    }\n    return result\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var n int = len(arr)\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp03cmzco4_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpex9y9gll_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpex9y9gll_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpex9y9gll_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var res int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            res += prod\n        }\n    }\n    return res\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    var prod int\n    for i := 0; i < len(arr); i++ {\n        prod = 1\n        for j := i; j < len(arr); j++ {\n            prod *= arr[j]\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var res int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            res += prod\n        }\n    }\n    return res\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpx721906z_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpic5xlvk4_test.go:45: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpic5xlvk4_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpic5xlvk4_test.go:45: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var result int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var tmp int\n            for k := i; k <= j; k++ {\n                if tmp == 0 {\n                    tmp = arr[k]\n                } else {\n                    tmp *= arr[k]\n                }\n            }\n            result += tmp\n        }\n    }\n    return result\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    var n int = len(arr)\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp9cfieihx_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp9cfieihx_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp9cfieihx_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpl8ymh5o4_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpl8ymh5o4_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpl8ymh5o4_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j <= len(arr); j++ {\n            sub := arr[i:j]\n            var prod int\n            for _, v := range sub {\n                prod *= v\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpos4w9wc7_test.go:39: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpos4w9wc7_test.go:39: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpos4w9wc7_test.go:39: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    n := len(arr)\n    sum := 0\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            result += prod\n        }\n    }\n    return result\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpcsyjnafp_test.go:29: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    res := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            res += prod\n        }\n    }\n    return res\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod = prod * arr[k]\n            }\n            sum = sum + prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmpp47z2mdz_test.go:41: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmpp47z2mdz_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmpp47z2mdz_test.go:41: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            prod := 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122916,
      "stdout": "--- FAIL: TestSum_Of_Subarray_Prod (0.00s)\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__0 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__1 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSum_Of_Subarray_Prod/test_num__2 (0.00s)\n        tmp3loemlgv_test.go:38: expected '%!s(int=84)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            var prod int = 1\n            for k := i; k <= j; k++ {\n                prod *= arr[k]\n            }\n            sum += prod\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517256,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}