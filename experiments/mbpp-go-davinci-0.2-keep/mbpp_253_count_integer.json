{
  "name": "mbpp_253_count_integer",
  "language": "go_test.go",
  "prompt": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, value := range list {\n                if value == int(value) {\n                    count += 1\n                }\n            }\n            return count\n        case []float64:\n            list := list1.([]float64)\n            count := 0\n            for _, value := range list {\n                if value == float64(int(value)) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list2 := list1.([]int)\n        count := 0\n        for _, v := range list2 {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list2 := list1.([]float64)\n        count := 0\n        for _, v := range list2 {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            count := 0\n            for _, v := range list {\n                count += count_integer(v)\n            }\n            return count\n        case int:\n            return 1\n        default:\n            return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list2 := list1.([]interface{})\n        count := 0\n        for _, value := range list2 {\n            count += count_integer(value)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        case []interface{}:\n            list := list1.([]interface{})\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        case []float64:\n            list := list1.([]float64)\n            count := 0\n            for _, v := range list {\n                if v == float64(int(v)) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if _, err := fmt.Sscanf(v, \"%d\", &count); err == nil {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []bool:\n        list := list1.([]bool)\n        return len(list)\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case []int:\n                count += count_integer(v)\n            case []interface{}:\n                count += count_integer(v)\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, item := range list {\n            count += count_integer(item)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count += 1\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    default:\n        return -1\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case []int:\n                count += count_integer(v)\n            case []interface{}:\n                count += count_integer(v)\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            if value == int(value) {\n                count++\n            }\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, value := range list1.([]interface{}) {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        var count int\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        var count int\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        var count int\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    default:\n        return -1\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    }\n    return 0\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count += 1\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float32:\n        list := list1.([]float32)\n        count := 0\n        for _, v := range list {\n            if v == float32(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float32:\n        list := list1.([]float32)\n        count := 0\n        for _, v := range list {\n            if v == float32(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n\n        return count\n    }\n\n    return 0\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        for i := 0; i < s.Len(); i++ {\n            if s.Index(i).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    list := list1.([]interface{})\n    count := 0\n    for _, v := range list {\n        switch v.(type) {\n        case int:\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n",
    "    switch list1.(type) {\n        case int:\n            return 1\n        case []int:\n            count := 0\n            for _, v := range list1.([]int) {\n                count += count_integer(v)\n            }\n            return count\n        default:\n            return 0\n    }\n}\n",
    "    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    list := list1.([]interface{})\n    count := 0\n    for _, v := range list {\n        switch v.(type) {\n        case int:\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, val := range list {\n            if val == int(val) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, val := range list {\n            if val == float64(int(val)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n"
  ]
}