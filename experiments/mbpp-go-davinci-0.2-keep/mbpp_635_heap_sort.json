{
  "name": "mbpp_635_heap_sort",
  "language": "go_test.go",
  "prompt": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Build a max heap from the given list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap = swap(heap, 0, len(heap)-1)\n\n    // Rebuild the heap from the first element to the last element.\n    for i := len(heap)-1; i > 0; i-- {\n        heap = max_heapify(heap, 0, i)\n        heap = swap(heap, 0, i-1)\n    }\n\n    return heap\n}\n",
    "    // Build the heap.\n    build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n",
    "    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Pop the last element of the heap and heapify the heap.\n    // Repeat the above two steps until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n",
    "    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements in the list.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the list.\n    heap = heap[:len(heap)-1]\n\n    // Restore the heap.\n    heap = max_heapify(heap, 0)\n\n    // Repeat the process until the list is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap), iterable[len(iterable)-1])\n    }\n\n    return []int{}\n}\n",
    "    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements and heapify the reduced heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the input data.\n    var heap_size = len(iterable) - 1\n    for i := (heap_size - 1) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, heap_size)\n    }\n\n    // Extract elements from the heap one by one.\n    for i := heap_size; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap_size--\n        iterable = max_heapify(iterable, 0, heap_size)\n    }\n    return iterable\n}\n",
    "    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    heapify(iterable)\n    end := len(iterable) - 1\n    for end > 0 {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end -= 1\n        sift_down(iterable, 0, end)\n    }\n    return iterable\n}\n",
    "    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[:end] is sorted).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, end)\n    }\n\n    return iterable\n}\n",
    "    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap.swap(0, len(heap.iterable) - 1)\n\n    // Pop the last element from the heap.\n    heap.pop()\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap.iterable) > 0 {\n        heap.swap(0, len(heap.iterable) - 1)\n        heap.pop()\n    }\n\n    return heap.iterable\n}\n",
    "    // Build the heap in array a so that largest value is at the root\n    n := len(iterable)\n    a := iterable\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(a, n, i)\n    }\n\n    // One by one extract elements\n    for i := n - 1; i >= 0; i-- {\n        // Move current root to end\n        a[0], a[i] = a[i], a[0]\n\n        // call max heapify on the reduced heap\n        heapify(a, i, 0)\n    }\n\n    return a\n}\n",
    "    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n",
    "    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        iterable = heapify(iterable, idx, len(iterable))\n    }\n\n    // Perform the following operations n times.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        // Swap the root of the heap with the last item of the heap.\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n\n        // Re-heapify the root of the heap.\n        iterable = heapify(iterable, 0, idx)\n    }\n\n    return iterable\n}\n"
  ]
}