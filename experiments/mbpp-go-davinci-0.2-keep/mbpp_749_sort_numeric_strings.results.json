{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "go_test.go",
  "prompt": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums) - i - 1; j++ {\n            if nums[j] > nums[j + 1] {\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = atoi(num_str)\n    }\n    return sort_nums(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0s2mu8ew_test.go:12:19: undefined: atoi\n/tmp/tmp0s2mu8ew_test.go:14:12: undefined: sort_nums\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := []int{}\n    for _, num_str := range nums_str {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            panic(err)\n        }\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptbx_0wnf_test.go:12:21: undefined: strconv\n/tmp/tmptbx_0wnf_test.go:18:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := []int{}\n    for _, num_str := range nums_str {\n        nums = append(nums, int(num_str))\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxn41b_5s_test.go:12:32: cannot convert num_str (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, v := range nums_str {\n        fmt.Sscanf(v, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(2)\n        }\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppzns44ws_test.go:12:21: undefined: strconv\n/tmp/tmppzns44ws_test.go:15:13: undefined: os\n/tmp/tmppzns44ws_test.go:19:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = atoi(num_str)\n    }\n    return sort_nums(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0s2mu8ew_test.go:12:19: undefined: atoi\n/tmp/tmp0s2mu8ew_test.go:14:12: undefined: sort_nums\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return sort_numeric_strings_int(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7wt1r1qy_test.go:14:12: undefined: sort_numeric_strings_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums_int := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums_int[i])\n    }\n    return nums_int\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmplv7ppil9_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmplv7ppil9_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmplv7ppil9_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            fmt.Println(err)\n        }\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492sp2ey_test.go:12:21: undefined: strconv\n/tmp/tmp492sp2ey_test.go:18:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums) - 1; i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := []int{}\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9yk8b6_y_test.go:12:19: undefined: strconv\n/tmp/tmp9yk8b6_y_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return sort_numeric_strings_int(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7wt1r1qy_test.go:14:12: undefined: sort_numeric_strings_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    sort_nums(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1olwhq9d_test.go:14:5: undefined: sort_nums\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, v := range nums_str {\n        fmt.Sscanf(v, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i := 0; i < len(nums_str); i++ {\n        fmt.Sscanf(nums_str[i], \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := []int{}\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9yk8b6_y_test.go:12:19: undefined: strconv\n/tmp/tmp9yk8b6_y_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = atoi(num_str)\n    }\n    return sort_nums(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0s2mu8ew_test.go:12:19: undefined: atoi\n/tmp/tmp0s2mu8ew_test.go:14:12: undefined: sort_nums\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return sort_numeric_strings_int(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwjh5_oh5_test.go:14:12: undefined: sort_numeric_strings_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, s := range nums_str {\n        fmt.Sscanf(s, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmp9wtcmb6r_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmp9wtcmb6r_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmp9wtcmb6r_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01qf5870_test.go:12:19: undefined: strconv\n/tmp/tmp01qf5870_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = int(num_str)\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ar8fzav_test.go:12:22: cannot convert num_str (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := []int{}\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9yk8b6_y_test.go:12:19: undefined: strconv\n/tmp/tmp9yk8b6_y_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i+1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            panic(err)\n        }\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvt0grhl1_test.go:12:21: undefined: strconv\n/tmp/tmpvt0grhl1_test.go:18:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, v := range nums_str {\n        nums = append(nums, int(v))\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf4uuyzla_test.go:12:32: cannot convert v (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, str := range nums_str {\n        fmt.Sscanf(str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums) - 1; i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = int(num_str)\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ar8fzav_test.go:12:22: cannot convert num_str (type string) to type int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums) - i - 1; j++ {\n            if nums[j] > nums[j + 1] {\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num := range nums_str {\n        fmt.Sscanf(num, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpdyh0y68x_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = atoi(num_str)\n    }\n    return sort_nums(nums)\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0s2mu8ew_test.go:12:19: undefined: atoi\n/tmp/tmp0s2mu8ew_test.go:14:12: undefined: sort_nums\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    var nums []int\n    for _, num_str := range nums_str {\n        num := 0\n        for _, digit := range num_str {\n            num = num * 10 + int(digit - '0')\n        }\n        nums = append(nums, num)\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122958,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpy0oxmf2h_test.go:36: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-288) %!s(int=-2500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpy0oxmf2h_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpy0oxmf2h_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=54) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n\nfunc TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510053,
      "stdout": "--- FAIL: TestSort_Numeric_Strings (0.00s)\n    --- FAIL: TestSort_Numeric_Strings/test_num__0 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=-500) %!s(int=-12) %!s(int=0) %!s(int=4) %!s(int=7) %!s(int=12) %!s(int=45) %!s(int=100) %!s(int=200)]', got '[%!s(int=4) %!s(int=12) %!s(int=45) %!s(int=7) %!s(int=0) %!s(int=100) %!s(int=200) %!s(int=-12) %!s(int=-500)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__1 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=9) %!s(int=9)]', got '[%!s(int=2) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=2) %!s(int=6) %!s(int=5) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=9) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Numeric_Strings/test_num__2 (0.00s)\n        tmpwdb7uh52_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=7) %!s(int=9) %!s(int=11) %!s(int=13) %!s(int=15) %!s(int=17)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=1) %!s(int=3) %!s(int=13) %!s(int=15) %!s(int=17) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=1) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}