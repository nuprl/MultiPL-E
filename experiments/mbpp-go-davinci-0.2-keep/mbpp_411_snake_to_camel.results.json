{
  "name": "mbpp_411_snake_to_camel",
  "language": "go_test.go",
  "prompt": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpl_0byxpm_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpl_0byxpm_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpl_0byxpm_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var flag bool\n    for _, v := range word {\n        if v == '_' {\n            flag = true\n        } else {\n            if flag {\n                result += string(v - 32)\n                flag = false\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7t4wnhq9_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7t4wnhq9_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7t4wnhq9_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(char)\n        } else if word[i-1] == '_' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(char)\n        } else if word[i-1] == '_' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmzl56bj4_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n            } else {\n                result += string(char)\n            }\n            is_first_char = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpeatei88m_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpeatei88m_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpeatei88m_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                result += string(word[i+1] - 32)\n                i++\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(char)\n            } else {\n                result += string(char)\n            }\n            is_first_word = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp2pnrqxv5_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp2pnrqxv5_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp2pnrqxv5_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpfd3i52r9_test.go:39: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(char - 32)\n                next_upper = false\n            } else {\n                camel += string(char)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpnc5acm2p_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpnc5acm2p_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpnc5acm2p_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            result += string(word[i+1] - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4uew97e5_test.go:36: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4uew97e5_test.go:36: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4uew97e5_test.go:36: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgqtrtvv6_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result = fmt.Sprintf(\"%s\", string(v))\n        } else {\n            if v == '_' {\n                continue\n            } else {\n                if word[i-1] == '_' {\n                    result = fmt.Sprintf(\"%s%s\", result, string(v))\n                } else {\n                    result = fmt.Sprintf(\"%s%s\", result, string(v))\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7m4qszk6_test.go:44: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7m4qszk6_test.go:44: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7m4qszk6_test.go:44: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result = fmt.Sprintf(\"%s\", string(v))\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result = fmt.Sprintf(\"%s%s\", result, string(v))\n        } else {\n            result = fmt.Sprintf(\"%s%s\", result, string(v))\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpbrerraiy_test.go:40: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpbrerraiy_test.go:40: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpbrerraiy_test.go:40: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(c)\n        } else {\n            result += string(c - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'AndroidTv', got 'androidTV'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'GooglePixel', got 'googlePIXEL'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'AppleWatch', got 'appleWATCH'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(c)\n        } else {\n            result += string(c - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'AndroidTv', got 'androidTV'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'GooglePixel', got 'googlePIXEL'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7nbosdoe_test.go:41: expected 'AppleWatch', got 'appleWATCH'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == 95 {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmplxx17cni_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmplxx17cni_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmplxx17cni_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0sre_jvx_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0sre_jvx_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0sre_jvx_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i + 1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp73o60g0o_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp73o60g0o_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp73o60g0o_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpighjzz9i_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(word[i] - 32)\n                next_upper = false\n            } else {\n                camel += string(word[i])\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpc5rh8039_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpc5rh8039_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpc5rh8039_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_is_underscore = true\n        } else {\n            if prev_is_underscore {\n                result += string(char - 32)\n            } else {\n                result += string(char)\n            }\n            prev_is_underscore = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0ga5k8_c_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0ga5k8_c_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0ga5k8_c_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var new_word string\n    for i, v := range word {\n        if i == 0 {\n            new_word += string(v)\n        } else {\n            if string(v) == \"_\" {\n                new_word += string(word[i+1] - 32)\n                i++\n            } else {\n                new_word += string(v)\n            }\n        }\n    }\n    return new_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpvx9ju_lz_test.go:41: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpvx9ju_lz_test.go:41: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpvx9ju_lz_test.go:41: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            } else if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpivdgnu6j_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpivdgnu6j_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpivdgnu6j_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if string(v) == \"_\" {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpv9meqm3x_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpv9meqm3x_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpv9meqm3x_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, letter := range word {\n        if letter == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(letter - 32)\n                next_upper = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7te0okv1_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7te0okv1_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7te0okv1_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpokd2qfiw_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpokd2qfiw_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpokd2qfiw_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            camel += string(c - 32)\n            next_upper = false\n        } else {\n            camel += string(c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp317v794o_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp317v794o_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp317v794o_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_is_underscore bool\n    for _, c := range word {\n        if c == '_' {\n            prev_is_underscore = true\n            continue\n        }\n        if prev_is_underscore {\n            result += string(c - 32)\n            prev_is_underscore = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp3w18m7ov_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp3w18m7ov_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp3w18m7ov_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else {\n            if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122722,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmprlhywzb1_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmprlhywzb1_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmprlhywzb1_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, ch := range word {\n        if ch == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(ch - 32)\n                next_upper = false\n            } else {\n                result += string(ch)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp79lqd060_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp79lqd060_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp79lqd060_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n                prev_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122722,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpwg1ipwyw_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpwg1ipwyw_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpwg1ipwyw_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            result += string(word[i+1] - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    var is_first_letter bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_letter = true\n            continue\n        }\n        if is_first_letter {\n            if is_first_word {\n                result += string(char)\n                is_first_word = false\n            } else {\n                result += string(char - 32)\n            }\n            is_first_letter = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9lq4u_zr_test.go:48: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9lq4u_zr_test.go:48: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9lq4u_zr_test.go:48: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n            continue\n        }\n        if v == '_' {\n            continue\n        }\n        if word[i-1] == '_' {\n            result += string(v - 32)\n            continue\n        }\n        result += string(v)\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmprgnbs0z1_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmprgnbs0z1_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmprgnbs0z1_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var i int\n    for i = 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            result += string(word[i] - 32)\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpjm_f31yh_test.go:38: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpjm_f31yh_test.go:38: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpjm_f31yh_test.go:38: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool\n    for _, c := range word {\n        if c == '_' {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += string(c - 32)\n                is_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1yp5hmcn_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1yp5hmcn_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1yp5hmcn_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmphtmzjfv2_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            result += string(word[i+1] - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n            } else {\n                result += string(char)\n            }\n            is_first_char = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpeatei88m_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpeatei88m_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpeatei88m_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                result += string(word[i+1] - 32)\n                i++\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpk04lwlsj_test.go:41: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn3t8qqbg_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp2b825fd3_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdrwux_g7_test.go:39: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdrwux_g7_test.go:39: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdrwux_g7_test.go:39: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpl_4me7wo_test.go:44: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpl_4me7wo_test.go:44: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpl_4me7wo_test.go:44: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AndroidTv', got 'androidtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'GooglePixel', got 'googlepixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpprtomjv9_test.go:42: expected 'AppleWatch', got 'applewatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5evpi4os_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122717,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdwpncst8_test.go:43: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            result += string(word[i+1] - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122718,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpn1kspsf0_test.go:36: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7g4csdxk_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var last_char_is_underscore bool\n    for _, char := range word {\n        if char == '_' {\n            last_char_is_underscore = true\n        } else {\n            if last_char_is_underscore {\n                result += string(char - 32)\n                last_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpweps0q84_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpweps0q84_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpweps0q84_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzu_ah9f6_test.go:41: expected 'AndroidTv', got 'androidTV'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzu_ah9f6_test.go:41: expected 'GooglePixel', got 'googlePIXEL'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzu_ah9f6_test.go:41: expected 'AppleWatch', got 'appleWATCH'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_rhevbsr_test.go:39: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzlu1oxlj_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122724,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmxomsrzw_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122721,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(char - 32)\n                is_first_word = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AndroidTv', got 'androidTtv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'GooglePixel', got 'googlePpixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp6a2d5dsr_test.go:39: expected 'AppleWatch', got 'appleWwatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel_word string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            camel_word += string(char)\n        } else {\n            camel_word += string(char - 32)\n        }\n    }\n    return camel_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpc95shaj2_test.go:41: expected 'AndroidTv', got 'androidTV'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpc95shaj2_test.go:41: expected 'GooglePixel', got 'googlePIXEL'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpc95shaj2_test.go:41: expected 'AppleWatch', got 'appleWATCH'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            camel += string(v)\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmph3ajnamk_test.go:41: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmph3ajnamk_test.go:41: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmph3ajnamk_test.go:41: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(c)\n        } else {\n            result += string(c - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122725,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmppxas4kw3_test.go:39: expected 'AndroidTv', got 'aNDROIDtV'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmppxas4kw3_test.go:39: expected 'GooglePixel', got 'gOOGLEpIXEL'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmppxas4kw3_test.go:39: expected 'AppleWatch', got 'aPPLEwATCH'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmplhc2n2ep_test.go:40: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n                prev_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122722,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpkkie73rb_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp92_05n4d_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517265,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsk0nmsqv_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517264,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AndroidTv', got 'androidTv'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'GooglePixel', got 'googlePixel'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp0vscqxe8_test.go:42: expected 'AppleWatch', got 'appleWatch'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}