{
  "name": "mbpp_57_find_Max_Num",
  "language": "go_test.go",
  "prompt": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert the array to a string\n    var str string\n    for _, v := range arr {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n    // convert the string to an int\n    var num int\n    fmt.Sscanf(str, \"%d\", &num)\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow10(i))\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp57ucvtu4_test.go:19:29: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, num := range arr {\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpnroyxd6z_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpnroyxd6z_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpnroyxd6z_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_num {\n            max_num = arr[i]\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow10(i))\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf03eegop_test.go:19:29: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    var res int\n    for i := 0; i < len(arr); i++ {\n        res = res*10 + arr[i]\n    }\n    return res\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i, v := range arr {\n        if i == 0 {\n            max = v\n        } else {\n            if v > max {\n                max = v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert the array to int\n    var result int\n    for i := 0; i < len(arr); i++ {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for _, v := range arr {\n        max = max * 10 + v\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow(10, float64(len(arr) - i - 1)))\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeeestqhn_test.go:19:29: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // convert the array to a number\n    var num int\n    for i := 0; i < len(arr); i++ {\n        num = num * 10 + arr[i]\n    }\n\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for _, v := range arr {\n        max = max * 10 + v\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // combine the array\n    var result int\n    for i := 0; i < len(arr); i++ {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert the array to a string\n    var str string\n    for i := 0; i < len(arr); i++ {\n        str += fmt.Sprintf(\"%d\", arr[i])\n    }\n    // convert the string to a int\n    var num int\n    fmt.Sscanf(str, \"%d\", &num)\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    var max int\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_num {\n            max_num = arr[i]\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow(10, float64(len(arr) - i - 1)))\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpksv8nzfb_test.go:19:29: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    var res int\n    for i := 0; i < len(arr); i++ {\n        res = res * 10 + arr[i]\n    }\n\n    return res\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpjtb8og8a_test.go:29: expected '%!s(int=321)', got '%!s(int=0)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpjtb8og8a_test.go:29: expected '%!s(int=6541)', got '%!s(int=0)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpjtb8og8a_test.go:29: expected '%!s(int=9321)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122545,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp3i9xdadj_test.go:39: expected '%!s(int=321)', got '%!s(int=123)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp3i9xdadj_test.go:39: expected '%!s(int=6541)', got '%!s(int=1456)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp3i9xdadj_test.go:39: expected '%!s(int=9321)', got '%!s(int=1239)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2lhvhmnj_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var result int = 0\n    for _, v := range arr {\n        result = result * 10 + v\n    }\n    return result\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmptlslrsk3_test.go:32: expected '%!s(int=321)', got '%!s(int=123)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmptlslrsk3_test.go:32: expected '%!s(int=6541)', got '%!s(int=4561)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmptlslrsk3_test.go:32: expected '%!s(int=9321)', got '%!s(int=1239)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert to string\n    var str string\n    for _, v := range arr {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n    // convert to int\n    num, _ := strconv.Atoi(str)\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122545,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7vea9ey7_test.go:24:15: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpikvj2tza_test.go:35: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpx1q49ka3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpx1q49ka3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpx1q49ka3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpu0m9cem1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpu0m9cem1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpu0m9cem1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max*10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpct3nje_5_test.go:37: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_num {\n            max_num = arr[i]\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp2j4nsub9_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpagymtlr1_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow10(i))\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp57ucvtu4_test.go:19:29: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i, v := range arr {\n        if i == 0 {\n            max = v\n        } else {\n            if v > max {\n                max = v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp16fcokz8_test.go:38: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for _, num := range arr {\n        if num > max_num {\n            max_num = num\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp_ups58xj_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp_ups58xj_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp_ups58xj_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122546,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpf69z1mnr_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509952,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpwh93_9zp_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}