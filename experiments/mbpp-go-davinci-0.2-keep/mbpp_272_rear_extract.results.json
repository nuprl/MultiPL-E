{
  "name": "mbpp_272_rear_extract",
  "language": "go_test.go",
  "prompt": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    // Your code here\n    return []int{}\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqzncfj2_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptqzncfj2_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptqzncfj2_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptqzncfj2_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptqzncfj2_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptqzncfj2_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, sub_list := range test_list {\n        result = append(result, sub_list[len(sub_list)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl_nlgjpx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl_nlgjpx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl_nlgjpx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl_nlgjpx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl_nlgjpx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl_nlgjpx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd06sdlh0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    result := []int{}\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqsfk9owf_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqsfk9owf_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqsfk9owf_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqsfk9owf_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqsfk9owf_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqsfk9owf_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, t := range test_list {\n        result = append(result, t[len(t)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy40sz8f_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd06sdlh0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, t := range test_list {\n        result = append(result, t[len(t)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy40sz8f_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd06sdlh0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var output []int\n    for _, tuple := range test_list {\n        output = append(output, tuple[1].(int))\n    }\n    return output\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpput71ic7_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpput71ic7_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpput71ic7_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpput71ic7_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpput71ic7_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpput71ic7_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tup := range test_list {\n        result = append(result, tup[len(tup)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa5tx91ck_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5tx91ck_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5tx91ck_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5tx91ck_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa5tx91ck_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa5tx91ck_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd06sdlh0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, v := range test_list {\n        rear_list = append(rear_list, v[len(v)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6xp2qkzd_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6xp2qkzd_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6xp2qkzd_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6xp2qkzd_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6xp2qkzd_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6xp2qkzd_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd06sdlh0_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd06sdlh0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd06sdlh0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    result := make([]int, 0)\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvxv5kj63_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvxv5kj63_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvxv5kj63_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvxv5kj63_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvxv5kj63_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvxv5kj63_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, t := range test_list {\n        result = append(result, t[len(t)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy40sz8f_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    result := make([]int, len(test_list))\n    for i, v := range test_list {\n        result[i] = v[len(v) - 1].(int)\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptel9hpzl_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptel9hpzl_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptel9hpzl_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptel9hpzl_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptel9hpzl_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptel9hpzl_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tup := range test_list {\n        result = append(result, tup[len(tup) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v14_gh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw2v14_gh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw2v14_gh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw2v14_gh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw2v14_gh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw2v14_gh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, t := range test_list {\n        result = append(result, t[len(t)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy40sz8f_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    result := make([]int, len(test_list))\n    for i, v := range test_list {\n        result[i] = v[len(v)-1].(int)\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd4m9shg6_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd4m9shg6_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd4m9shg6_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd4m9shg6_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd4m9shg6_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd4m9shg6_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, v := range test_list {\n        result = append(result, v[len(v)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppdcc0v5c_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppdcc0v5c_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppdcc0v5c_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, t := range test_list {\n        result = append(result, t[len(t)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123259,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcy40sz8f_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcy40sz8f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcy40sz8f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple) - 1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw2m1091_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmw2m1091_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmw2m1091_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1u30hoc3_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1u30hoc3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1u30hoc3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var rear_list []int\n    for _, tuple := range test_list {\n        rear_list = append(rear_list, tuple[len(tuple)-1].(int))\n    }\n    return rear_list\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3dguknag_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3dguknag_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3dguknag_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunc rear_extract(test_list [][]interface{}) []int {\n    var result []int\n    for _, tuple := range test_list {\n        result = append(result, tuple[len(tuple)-1].(int))\n    }\n    return result\n}\n\nfunc TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517373,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkuaansqb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkuaansqb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkuaansqb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}