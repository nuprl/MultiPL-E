{
  "name": "mbpp_808_check_K",
  "language": "go_test.go",
  "prompt": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuples contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n",
    "    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n"
  ]
}