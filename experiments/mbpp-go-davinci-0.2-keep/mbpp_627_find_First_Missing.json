{
  "name": "mbpp_627_find_First_Missing",
  "language": "go_test.go",
  "prompt": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return i\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 0\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i+1] {\n            return array[i] + 1\n        }\n    }\n    return 0\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    // Write your code here\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n",
    "    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n",
    "    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] != 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n",
    "    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n"
  ]
}