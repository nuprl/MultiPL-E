{
  "name": "mbpp_556_find_Odd_Pair",
  "language": "go_test.go",
  "prompt": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 2.7\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpuzl0e6u2_test.go:36: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpuzl0e6u2_test.go:36: expected '%!s(int=12)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    odd_count := 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                odd_count++\n            }\n        }\n    }\n    return odd_count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp24oet7st_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp24oet7st_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmp24oet7st_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 2.7\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp_b4k5qlb_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp_b4k5qlb_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmp_b4k5qlb_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmp8_ot8d22_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int = 0\n    for i:=0; i<N; i++ {\n        for j:=i+1; j<N; j++ {\n            if (A[i] ^ A[j]) & 1 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var i, j, count int\n    for i = 0; i < N; i++ {\n        for j = i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 2.7\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var result int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmpneze7tlr_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpff8ykl1a_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpff8ykl1a_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmpff8ykl1a_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpocwf5dxq_test.go:36: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpocwf5dxq_test.go:36: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmpocwf5dxq_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmpwgh2wwki_test.go:36: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmpwgh2wwki_test.go:36: expected '%!s(int=12)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var odd_count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                odd_count += 1\n            }\n        }\n    }\n    return odd_count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp9rhzk395_test.go:37: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp9rhzk395_test.go:37: expected '%!s(int=12)', got '%!s(int=3)'\n    --- FAIL: TestFind_Odd_Pair/test_num__2 (0.00s)\n        tmp9rhzk395_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var i, j, count int\n    for i = 0; i < N; i++ {\n        for j = i+1; j < N; j++ {\n            if (A[i]^A[j])%2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) & 1 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    result := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    result := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var result int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                result++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var i, j, count int\n    for i = 0; i < N; i++ {\n        for j = i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122984,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    count := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Go 1.4\n    var cnt int = 0\n    for i := 0; i < N; i++ {\n        for j := i+1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                cnt++\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if A[i] ^ A[j] % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "--- FAIL: TestFind_Odd_Pair (0.00s)\n    --- FAIL: TestFind_Odd_Pair/test_num__0 (0.00s)\n        tmp5wg9dal2_test.go:36: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestFind_Odd_Pair/test_num__1 (0.00s)\n        tmp5wg9dal2_test.go:36: expected '%!s(int=12)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int = 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 != 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    // write your code in Python 3.6\n    res := 0\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                res++\n            }\n        }\n    }\n    return res\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122986,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n    var count int\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if (A[i] ^ A[j]) % 2 == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510023,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}