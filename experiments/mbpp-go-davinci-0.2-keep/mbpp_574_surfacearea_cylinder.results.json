{
  "name": "mbpp_574_surfacearea_cylinder",
  "language": "go_test.go",
  "prompt": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    // surface area of a cylinder = 2\u03c0rh + 2\u03c0r^2\n    return float64(2 * r * h * 3.14) + float64(2 * r * r * 3.14)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt50v3ikk_test.go:11:30: constant 3.14 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.1415926535897932384626433832795028841971693993751058209749445923 * float64(r) * float64(h) + 2 * 3.1415926535897932384626433832795028841971693993751058209749445923 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942.4777960769379)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.1946710584651)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.85837720205683)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2*3.14*r*r + 2*3.14*r*h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8q3p1bvr_test.go:10:26: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2*3.14*float64(r)*float64(h) + 2*3.14*float64(r)*float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(r) + 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64((2 * 3.14 * r * h) + (2 * 3.14 * r * r))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpusw_8zs8_test.go:10:30: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=100)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=40)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(r) + 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpgmwq7qmd_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.1415926535897932384626433832795028841971693993751058209749445923 * float64(r) * float64(h) + 2 * 3.1415926535897932384626433832795028841971693993751058209749445923 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124161,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942.4777960769379)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.1946710584651)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpay0768bh_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.85837720205683)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe5k35dtb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}