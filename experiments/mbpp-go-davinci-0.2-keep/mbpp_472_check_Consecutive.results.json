{
  "name": "mbpp_472_check_Consecutive",
  "language": "go_test.go",
  "prompt": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    max, min := l[0], l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i + 1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    min = l[0]\n    max = l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp5t_hnw49_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp5t_hnw49_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max-min+1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp50kyshlj_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp50kyshlj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    min, max = l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmpzsl9qfbd_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i + 1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max-min+1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp50kyshlj_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp50kyshlj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] != l[i] + 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        if l[i] != l[0] + i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i+1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    max, min := l[0], l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i+1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    length := len(l)\n    if length == 0 {\n        return false\n    }\n    if length == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == length {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.014s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    for i := 0; i < len(l); i++ {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmpkx5by9iv_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmpkx5by9iv_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        if l[i] != l[0] + i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // check if the list is empty\n    if len(l) == 0 {\n        return false\n    }\n    // check if the list is sorted\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            return false\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i:=0; i<len(l); i++ {\n        for j:=i+1; j<len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list contains consecutive numbers\n    for i:=0; i<len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    if l[0] == l[1] {\n        return false\n    }\n    if l[0] > l[1] {\n        for i := 1; i < len(l); i++ {\n            if l[i] + 1 != l[i-1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(l); i++ {\n            if l[i] - 1 != l[i-1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 != len(l) {\n        return false\n    }\n    for i := 0; i < len(l); i++ {\n        if l[i] < 0 {\n            l[i] = -l[i]\n        }\n        if l[l[i] - min] < 0 {\n            return false\n        }\n        l[l[i] - min] = -l[l[i] - min]\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    var min, max int\n    min = l[0]\n    max = l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    l = sort(l)\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_qe1apf__test.go:16:9: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmplhuq1bcc_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmplhuq1bcc_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 1; i < len(l); i++ {\n        if l[i] != l[i-1] + 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    max, min := l[0], l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 1; i < len(l); i++ {\n        if l[i] != l[i-1] + 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    max := l[0]\n    min := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 != len(l) {\n        return false\n    }\n    for i := min; i <= max; i++ {\n        if !contains(l, i) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn3iwbisr_test.go:26:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) < 2 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "--- FAIL: TestCheck_Consecutive (0.00s)\n    --- FAIL: TestCheck_Consecutive/test_num__0 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Consecutive/test_num__2 (0.00s)\n        tmp_qly7hgs_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    min = l[0]\n    max = l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        if l[i] != l[0] + i {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    min := l[0]\n    max := l[0]\n    for i := 1; i < len(l); i++ {\n        if l[i] < min {\n            min = l[i]\n        }\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) <= 1 {\n        return false\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if l[i+1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min, max := l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\n    // check if the list is consecutive\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    var min, max int\n    min, max = l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 != len(l) {\n        return false\n    }\n    for i := min; i <= max; i++ {\n        if !contains(l, i) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122794,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplv2y3rsm_test.go:30:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n    // sort the list\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // check if the list is consecutive\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122792,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}