{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "go_test.go",
  "prompt": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp41fxr9m5_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpvt0j6nq9_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpvt0j6nq9_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpvt0j6nq9_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpk24cem8k_test.go:38: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_svn7pf_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n\n    return max(a[k] + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6ohwo8w6_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpovke4su5_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp85ml87fp_test.go:38: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp85ml87fp_test.go:38: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp85ml87fp_test.go:38: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1)+a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkp8vkkyy_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvfqp3oky_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, k, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp89x847he_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] <= a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa5n8l0nt_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpbb5_dhx1_test.go:36: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpbb5_dhx1_test.go:36: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpbb5_dhx1_test.go:36: expected '%!s(int=71)', got '%!s(int=40)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppy53lss2_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp58nxmucv_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] < a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpby2r1353_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8vs_l07t_test.go:18:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ldqi52t_test.go:18:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7lt5q48_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc8njgo37_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == index {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnxri_zkw_test.go:18:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ane8r10_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczs2v2qg_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczs2v2qg_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, k, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp41fxr9m5_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr9vlvsi_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplr9vlvsi_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy49497oh_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n\n    return max(a[k] + max_sum_increasing_subseq(a, n, k, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxlpgnggp_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return a[index] + max_sum_increasing_subseq(a, n, k, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmphtxbq09l_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmphtxbq09l_test.go:40: expected '%!s(int=7)', got '%!s(int=6)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmphtxbq09l_test.go:40: expected '%!s(int=71)', got '%!s(int=73)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmps3zjkc5__test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmps3zjkc5__test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmps3zjkc5__test.go:34: expected '%!s(int=71)', got '%!s(int=40)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkac3998s_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] < a[index] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3xfm41pe_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3xfm41pe_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3xfm41pe_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy49497oh_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpms5rl7b9_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpcnl428dj_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpcnl428dj_test.go:37: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpcnl428dj_test.go:37: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2e6t7z7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k < index {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeg4jcf5l_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index]+max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj78oxjm1_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmprb7pyoq__test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmprb7pyoq__test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmprb7pyoq__test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] < a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpal6tvlzv_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplc62k074_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwckrltjz_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpusa7dkt6_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpusa7dkt6_test.go:38: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpusa7dkt6_test.go:38: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[k]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9s9jgm0a_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpy3u_hveq_test.go:37: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpozke91wy_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpietc9xzr_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if k < index {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb0_hxih6_test.go:23:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp58nxmucv_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=7)', got '%!s(int=105)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpxafcxhrn_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbw4ho8qi_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2e6t7z7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6846vjrs_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp3zr3b__i_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v0l6bo_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == 0 {\n        return a[k]\n    }\n    if k == 0 {\n        return a[0]\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppixnwdgn_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[k] + max_sum_increasing_subseq(a, n, index, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpglh55ayp_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpglh55ayp_test.go:40: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpglh55ayp_test.go:40: expected '%!s(int=71)', got '%!s(int=85)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqhx288c3_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgxrspmsw_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgxrspmsw_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgxrspmsw_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpegarn8cq_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n\n    // include a[index]\n    include := a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n\n    // exclude a[index]\n    exclude := max_sum_increasing_subseq(a, n, index+1, k)\n\n    if include > exclude {\n        return include\n    }\n    return exclude\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpeqxjinsb_test.go:47: expected '%!s(int=11)', got '%!s(int=109)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpeqxjinsb_test.go:47: expected '%!s(int=7)', got '%!s(int=109)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpeqxjinsb_test.go:47: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfy6fk3w8_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, k, k + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsyyj_m4u_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if k == 0 {\n        return 0\n    }\n\n    if index == 0 {\n        return a[index]\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    if index > k {\n        return 0\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdo5i1oxf_test.go:30:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwckrltjz_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6feo1sco_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplbnkd_50_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, index+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnxf32mr9_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f31a0xt_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] < a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3mjvzq3m_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bgtofps_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7lt5q48_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpux502u4z_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiz0h2gdq_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpwk6xd55d_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa143g1fd_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123766,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2e6t7z7_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptut6a8b0_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkivujfvu_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmprumo8pm0_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy49497oh_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn4lvsdgp_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0hgr2_h5_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw2v0l6bo_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpc7x1wyxw_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpc7x1wyxw_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpc7x1wyxw_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp7ebrjl84_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, index) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1pmaadhk_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy9esoyva_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvy0dje1m_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv1889jp1_test.go:21:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpozke91wy_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxcga_x_l_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppgzw0lcf_test.go:36: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpoqu3qu64_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4n1u7_45_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeq_gz9dp_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4slqrh14_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnkfns95_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index > k {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcl7qounq_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx73xm3b8_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkh1x4hwh_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy49497oh_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpq4_38ik9_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpq4_38ik9_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpq4_38ik9_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8q8gjvs5_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiz0h2gdq_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpf2fmjw1g_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp6m29suk__test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] < a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz87t1j2k_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmph5vmy_nj_test.go:40: expected '%!s(int=71)', got '%!s(int=66)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp87ezfvh3_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpux502u4z_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    // include kth element\n    if a[index] < a[k] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi79kaatg_test.go:23:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy6srvwgg_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1mu_pk8j_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpgzs9_o74_test.go:40: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510450,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp4qwsl29c_test.go:37: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index]+max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl0m3w6hr_test.go:19:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3yjrqopv_test.go:15:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmplc__0xn9_test.go:34: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] >= a[k] {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqmyvuu0q_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1w7q5500_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123763,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmpz4a56tiq_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppcpsb0s1_test.go:38: expected '%!s(int=71)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpycyjp_tg_test.go:16:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp__tns72m_test.go:37: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[k] + max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123770,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmppr4hyfh5_test.go:37: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmppr4hyfh5_test.go:37: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmppr4hyfh5_test.go:37: expected '%!s(int=71)', got '%!s(int=85)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_bgtofps_test.go:17:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfy6fk3w8_test.go:14:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp62_ldwln_test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, index+1))\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplwiyobtg_test.go:22:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510448,
      "stdout": "--- FAIL: TestMax_Sum_Increasing_Subseq (0.00s)\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__0 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=11)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__1 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=7)', got '%!s(int=100)'\n    --- FAIL: TestMax_Sum_Increasing_Subseq/test_num__2 (0.00s)\n        tmp0kuj71d4_test.go:40: expected '%!s(int=71)', got '%!s(int=59)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n\nfunc TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123769,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn015s7g__test.go:19:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}