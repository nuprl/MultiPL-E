{
  "name": "mbpp_283_validate",
  "language": "go_test.go",
  "prompt": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for d, c := range m {\n        if c > d {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true\n}\n",
    "    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n    for k, v := range digits {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var digits = make(map[int]int)\n    for n != 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Create a map of digits to their frequency\n    digitFreq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitFreq[digit] += 1\n        n /= 10\n    }\n\n    // Check that the frequency of each digit is less than or equal to the digit itself\n    for digit, freq := range digitFreq {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        digits[digit]++\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n = n / 10\n        m[d] += 1\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        if digitCount[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        if freq[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digit_count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit]++\n        n /= 10\n    }\n    for digit, count := range digit_count {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        digits[digit]++\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digitFreq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitFreq[digit] += 1\n        n /= 10\n    }\n\n    for digit, freq := range digitFreq {\n        if digit < freq {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // convert int to string\n    s := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    m := make(map[rune]int)\n    // iterate through the string\n    for _, v := range s {\n        // if the digit is not in the map, add it\n        if _, ok := m[v]; !ok {\n            m[v] = 1\n        } else {\n            // if the digit is in the map, increment the frequency\n            m[v] += 1\n        }\n    }\n    // iterate through the map\n    for k, v := range m {\n        // convert the digit to int\n        i := int(k - '0')\n        // if the frequency is greater than the digit, return false\n        if v > i {\n            return false\n        }\n    }\n    // return true if the frequency of each digit is less than or equal to the digit itself\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if _, ok := digits[digit]; ok {\n            digits[digit]++\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, count := range m {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var freq [10]int\n    for n > 0 {\n        freq[n%10]++\n        n /= 10\n    }\n    for i, v := range freq {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    count := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        count[digit]++\n        if count[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n < 10 {\n        return true\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        digits[digit] += 1\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    freq := make([]int, 10)\n    for n > 0 {\n        freq[n % 10]++\n        n /= 10\n    }\n    for i, f := range freq {\n        if f > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    freq := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n\n    for i, f := range freq {\n        if f > i {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n /= 10\n        digits[d]++\n    }\n    for d, f := range digits {\n        if f > d {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitCounts := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCounts[digit]++\n        n /= 10\n    }\n    for digit, count := range digitCounts {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for digit, count := range m {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    var count = make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        count[digit]++\n        n /= 10\n    }\n    for k, v := range count {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var m = make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        n /= 10\n        m[d]++\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n\n    for digit, count := range freq {\n        if digit < count {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n < 10 {\n        return true\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        n /= 10\n    }\n    for digit, count := range digitCount {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        m[digit]++\n    }\n    for key, value := range m {\n        if value > key {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    var count [10]int\n    for n > 0 {\n        count[n%10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := map[int]int{}\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        n /= 10\n    }\n    for digit, count := range digitCount {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n < 0 {\n        n = -n\n    }\n    counts := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        counts[digit] += 1\n        n = n / 10\n    }\n    for digit, count := range counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n        digits[digit]++\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // convert int to string\n    s := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    m := make(map[string]int)\n    // iterate through the string\n    for _, c := range s {\n        // if the digit is not in the map, add it\n        if _, ok := m[string(c)]; !ok {\n            m[string(c)] = 1\n        } else {\n            // if the digit is in the map, increment the frequency\n            m[string(c)] += 1\n        }\n    }\n    // iterate through the map\n    for k, v := range m {\n        // if the frequency is greater than the digit, return false\n        if v > int(k[0] - '0') {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if n < 0 {\n        n = -n\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        if digits[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    frequency := make(map[int]int)\n    for n > 0 {\n        frequency[n % 10]++\n        n /= 10\n    }\n    for k, v := range frequency {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var digitMap = make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if digitMap[digit] == 0 {\n            digitMap[digit] = 1\n        } else {\n            digitMap[digit] += 1\n        }\n        n = n / 10\n    }\n    for key, value := range digitMap {\n        if key < value {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digit_count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digit_count {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n < 10 {\n        return true\n    }\n\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digitCount {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        if digits[digit] > digit {\n            return false\n        }\n        digits[digit]++\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if digit == 0 {\n            return false\n        }\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        if digitCount[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitFreq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitFreq[digit]++\n        n /= 10\n    }\n    for digit, freq := range digitFreq {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var freq [10]int\n    for n > 0 {\n        freq[n%10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for digit, count := range m {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        if _, ok := m[d]; ok {\n            m[d] += 1\n        } else {\n            m[d] = 1\n        }\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit] += 1\n        n /= 10\n    }\n    for k, v := range freq {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digit_count := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit] += 1\n        n = n / 10\n    }\n    for digit, count := range digit_count {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitCount := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCount[digit]++\n        n = n / 10\n    }\n    for digit, count := range digitCount {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        if m[digit] > digit {\n            return false\n        }\n        n = n / 10\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        if freq[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n",
    "    // Write your code here\n    var count = make([]int, 10)\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i, v := range count {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digitFreq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitFreq[digit]++\n        n /= 10\n    }\n    for digit, freq := range digitFreq {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if _, ok := m[digit]; ok {\n            m[digit] += 1\n        } else {\n            m[digit] = 1\n        }\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var digits [10]int\n    for n > 0 {\n        digits[n%10]++\n        n /= 10\n    }\n    for i, v := range digits {\n        if v > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    count := make([]int, 10)\n    for n > 0 {\n        count[n%10]++\n        n /= 10\n    }\n    for i, c := range count {\n        if c > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digit_count := make([]int, 10)\n    for n > 0 {\n        digit := n % 10\n        digit_count[digit] += 1\n        n /= 10\n    }\n    for i, count := range digit_count {\n        if count > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        if _, ok := digits[digit]; ok {\n            digits[digit]++\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digitCounts := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCounts[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digitCounts {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make([]int, 10)\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // convert int to string\n    str := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    freq := make(map[string]int)\n    // iterate through each digit in the string\n    for _, c := range str {\n        // convert the digit to string\n        s := fmt.Sprintf(\"%c\", c)\n        // if the digit is not in the map, add it to the map\n        if _, ok := freq[s]; !ok {\n            freq[s] = 1\n        } else {\n            // if the digit is in the map, increment the frequency\n            freq[s] += 1\n        }\n    }\n    // iterate through each digit in the string\n    for _, c := range str {\n        // convert the digit to string\n        s := fmt.Sprintf(\"%c\", c)\n        // convert the digit to int\n        i, _ := fmt.Sscanf(s, \"%d\", &i)\n        // if the frequency of the digit is greater than the digit, return false\n        if freq[s] > i {\n            return false\n        }\n    }\n    // if all the digits satisfy the condition, return true\n    return true\n}\n",
    "    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    digitCounts := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitCounts[digit]++\n        n /= 10\n    }\n    for digit, count := range digitCounts {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        digits[d]++\n        n = n / 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make([]int, 10)\n    for n > 0 {\n        d := n % 10\n        if d == 0 {\n            return false\n        }\n        digits[d]++\n        n /= 10\n    }\n\n    for i, count := range digits {\n        if count > i {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    var digits [10]int\n    for n > 0 {\n        digits[n % 10]++\n        n /= 10\n    }\n    for i := 0; i < 10; i++ {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Write your code here\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    freq := make(map[int]int)\n    for n > 0 {\n        freq[n % 10]++\n        n /= 10\n    }\n    for k, v := range freq {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, freq := range digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n = n / 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    // return true\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n%10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    if n == 0 {\n        return true\n    }\n\n    digits := make(map[int]int)\n\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n"
  ]
}