{
  "name": "mbpp_283_validate",
  "language": "go_test.go",
  "prompt": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for d, c := range m {\n        if c > d {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true\n}\n",
    "    freq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        freq[digit]++\n        n /= 10\n    }\n    for digit, count := range freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n = n / 10\n    }\n    for k, v := range digits {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit] += 1\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    var digits = make(map[int]int)\n    for n != 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for k, v := range digits {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Create a map of digits to their frequency\n    digitFreq := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitFreq[digit] += 1\n        n /= 10\n    }\n\n    // Check that the frequency of each digit is less than or equal to the digit itself\n    for digit, freq := range digitFreq {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}