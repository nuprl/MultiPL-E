{
  "name": "mbpp_806_max_run_uppercase",
  "language": "go_test.go",
  "prompt": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    current_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var curr_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var curr_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            curr_run++\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    curr_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n        } else {\n            curr_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    current_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run += 1\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var curr_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n        } else {\n            curr_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run += 1\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var current_run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    curr_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var current_run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var current_run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_count := 0\n    count := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        } else {\n            if count > max_count {\n                max_count = count\n            }\n            count = 0\n        }\n    }\n    if count > max_count {\n        max_count = count\n    }\n    return max_count\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    current_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    current_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    current_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n            if run > max_run {\n                max_run = run\n            }\n        } else {\n            run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var curr_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    curr_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            curr_run++\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n        } else {\n            curr_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] >= 'A' && test_str[i] <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var current_run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n            if current_run > max_run {\n                max_run = current_run\n            }\n        } else {\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, ch := range test_str {\n        if ch >= 'A' && ch <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var curr_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            curr_run++\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run\n            }\n            curr_run = 0\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] >= 'A' && test_str[i] <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var current_run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var count, max int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            count++\n        } else {\n            if count > max {\n                max = count\n            }\n            count = 0\n        }\n    }\n    if count > max {\n        max = count\n    }\n    return max\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    run := 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510551,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run += 1\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_run := 0\n    cur_run := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123296,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var current_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            current_run++\n        } else {\n            if current_run > max_run {\n                max_run = current_run\n            }\n            current_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123299,
      "stdout": "--- FAIL: TestMax_Run_Uppercase (0.00s)\n    --- FAIL: TestMax_Run_Uppercase/test_num__1 (0.00s)\n        tmp8oe0t1gl_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var run int\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run++\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    max_count := 0\n    count := 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        } else {\n            if count > max_count {\n                max_count = count\n            }\n            count = 0\n        }\n    }\n    if count > max_count {\n        max_count = count\n    }\n    return max_count\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            run += 1\n        } else {\n            if run > max_run {\n                max_run = run\n            }\n            run = 0\n        }\n    }\n    if run > max_run {\n        max_run = run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int\n    var cur_run int\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n        } else {\n            cur_run = 0\n        }\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123302,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, char := range test_str {\n        if char >= 'A' && char <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run++\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n    var max_run int = 0\n    var cur_run int = 0\n    for _, c := range test_str {\n        if c >= 'A' && c <= 'Z' {\n            cur_run += 1\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run\n            }\n            cur_run = 0\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run\n    }\n    return max_run\n}\n\nfunc TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510550,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}