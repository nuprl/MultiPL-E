{
  "name": "mbpp_19_test_duplicate",
  "language": "go_test.go",
  "prompt": "package test_duplicate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether a given array of integers contains any duplicate element.\nfunc test_duplicate(arraynums []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestTest_Duplicate(t *testing.T) {\n  candidate := test_duplicate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 4}), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2, 3, 3, 4, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var nums = make(map[int]int)\n    for _, num := range arraynums {\n        if _, ok := nums[num]; ok {\n            return true\n        }\n        nums[num] = num\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i+1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var nums = make(map[int]int)\n    for _, v := range arraynums {\n        nums[v] += 1\n        if nums[v] > 1 {\n            return true\n        }\n    }\n    return false\n}\n",
    "    var nums = make(map[int]int)\n    for _, v := range arraynums {\n        nums[v]++\n        if nums[v] > 1 {\n            return true\n        }\n    }\n    return false\n}\n",
    "    var arraymap = make(map[int]int)\n    for _, num := range arraynums {\n        if _, ok := arraymap[num]; ok {\n            return true\n        } else {\n            arraymap[num] = 1\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var m = make(map[int]int)\n    for _, v := range arraynums {\n        if _, ok := m[v]; ok {\n            return true\n        } else {\n            m[v] = v\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var array_map = make(map[int]int)\n    for _, num := range arraynums {\n        if _, ok := array_map[num]; ok {\n            return true\n        } else {\n            array_map[num] = 1\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var nums = make(map[int]int)\n    for _, num := range arraynums {\n        if _, ok := nums[num]; ok {\n            return true\n        }\n        nums[num] = num\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    var nums = make(map[int]bool)\n    for _, num := range arraynums {\n        if _, ok := nums[num]; ok {\n            return true\n        }\n        nums[num] = true\n    }\n    return false\n}\n",
    "    for i := 0; i < len(arraynums); i++ {\n        for j := i + 1; j < len(arraynums); j++ {\n            if arraynums[i] == arraynums[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n"
  ]
}