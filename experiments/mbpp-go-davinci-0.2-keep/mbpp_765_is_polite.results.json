{
  "name": "mbpp_765_is_polite",
  "language": "go_test.go",
  "prompt": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 17\n    }\n    if n == 10 {\n        return 18\n    }\n    if n == 11 {\n        return 20\n    }\n    if n == 12 {\n        return 24\n    }\n    if n == 13 {\n        return 25\n    }\n    if n == 14 {\n        return 27\n    }\n    if n == 15 {\n        return 32\n    }\n    if n == 16 {\n        return 33\n    }\n    if n == 17 {\n        return 34\n    }\n    if n == 18 {\n        return 36\n    }\n    if n == 19 {\n        return 40\n    }\n    if n == 20 {\n        return 41\n    }\n    if n == 21 {\n        return 42\n    }\n    if n == 22 {\n        return 45\n    }\n    if n == 23 {\n        return 48\n    }\n    if n == 24 {\n        return 49\n    }\n    if n == 25 {\n        return 50\n    }\n    if n == 26 {\n        return 52\n    }\n    if n == 27 {\n        return 54\n    }\n    if n == 28 {\n        return 56\n    }\n    if n == 29 {\n        return 60\n    }\n    if n == 30 {\n        return 64\n    }\n    if n == 31 {\n        return 65\n    }\n    if n == 32 {\n        return 66\n    }\n    if n == 33 {\n        return 68\n    }\n    if n == 34 {\n        return 72\n    }\n    if n == 35 {\n        return 73\n    }\n    if n == 36 {\n        return 74\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpb_kwa62s_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var count int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                count++\n            }\n        }\n        if count == 2 {\n            return i\n        }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4jy5zo9o_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp4jy5zo9o_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4jy5zo9o_test.go:41: expected '%!s(int=13)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n    var polite_number int\n\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                polite_numbers = append(polite_numbers, j)\n            }\n        }\n        for k = 0; k < len(polite_numbers); k++ {\n            polite_number += polite_numbers[k]\n        }\n        if polite_number == n {\n            return i\n        }\n        polite_numbers = nil\n        polite_number = 0\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp0q5rvecb_test.go:47: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp0q5rvecb_test.go:47: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp0q5rvecb_test.go:47: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var j int = 1\n    var k int = 1\n    var count int = 0\n    for i <= n {\n        for j <= n {\n            for k <= n {\n                if i*i + j*j == k*k {\n                    count++\n                }\n                k++\n            }\n            j++\n            k = 1\n        }\n        i++\n        j = 1\n    }\n    return count\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp92bq0rs5_test.go:52: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp92bq0rs5_test.go:52: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp92bq0rs5_test.go:52: expected '%!s(int=13)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    var j int\n    var k int\n    var l int\n\n    i = 1\n    j = 1\n    k = 1\n    l = 1\n\n    for {\n        if i * j == n {\n            return i\n        }\n\n        if i * j > n {\n            i++\n            j = 1\n            continue\n        }\n\n        if i * j < n {\n            j++\n            continue\n        }\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6gnujru_test.go:20:9: k declared but not used\n/tmp/tmpn6gnujru_test.go:21:9: l declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp2f_p8luc_test.go:36: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp2f_p8luc_test.go:36: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp2f_p8luc_test.go:36: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 27\n    }\n    if n == 21 {\n        return 28\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 35\n    }\n    if n == 27 {\n        return 36\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpm2hr70r__test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int = 2\n    var j int = 1\n    var k int = 1\n    var count int = 1\n    var result int = 0\n\n    for count < n {\n        if i % j == 0 {\n            result = i\n            count++\n        }\n\n        if j == k {\n            k++\n            j = 1\n        } else {\n            j++\n        }\n\n        i++\n    }\n\n    return result\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3xjoi7fe_test.go:54: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3xjoi7fe_test.go:54: expected '%!s(int=7)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3xjoi7fe_test.go:54: expected '%!s(int=13)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i, j int\n    var polite_numbers []int\n    for i = 0; len(polite_numbers) < n; i++ {\n        for j = 0; j < len(polite_numbers); j++ {\n            if i % polite_numbers[j] == 0 {\n                break\n            }\n        }\n        if j == len(polite_numbers) {\n            polite_numbers = append(polite_numbers, i)\n        }\n    }\n    return polite_numbers[n-1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523060, 0x616a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523060, 0x616a20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_polite(...)\n\t/tmp/tmpl6nz5hs4_test.go:23\ncommand-line-arguments_test.TestIs_Polite(0xc000186300)\n\t/tmp/tmpl6nz5hs4_test.go:41 +0x574\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // Polite numbers are those numbers whose sum of digits is even.\n    // For example:\n    //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpp83r0tk0_test.go:13:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    var i int = 2\n    var j int = 1\n    var k int = 1\n    var count int = 2\n\n    for count < n {\n        if i * i == j * j + k * k {\n            count++\n            i++\n            j++\n            k++\n        } else if i * i < j * j + k * k {\n            i++\n        } else {\n            j++\n            k++\n        }\n    }\n\n    return i * i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123817,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A polite number is a number whose sum of digits is a multiple of 3.\n    // The polite numbers are: 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 402, 405, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 465, 468, 471, 474, 477, 480, 483, 486, 489, 492, 495, 498, 501, 504, 507, 510, 513, 516, 519, 522, 525, 528, 531, 534, 537, 540, 543, 546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 639, 642\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfw1hj4u__test.go:12:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return (n + 1) / 2\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmps9ixgpaa_test.go:36: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmps9ixgpaa_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmps9ixgpaa_test.go:36: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 17\n    }\n    if n == 12 {\n        return 19\n    }\n    if n == 13 {\n        return 20\n    }\n    if n == 14 {\n        return 21\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 24\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 33\n    }\n    if n == 24 {\n        return 34\n    }\n    if n == 25 {\n        return 35\n    }\n    if n == 26 {\n        return 37\n    }\n    if n == 27 {\n        return 38\n    }\n    if n == 28 {\n        return 40\n    }\n    if n == 29 {\n        return 41\n    }\n    if n == 30 {\n        return 42\n    }\n    if n == 31 {\n        return 43\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 46\n    }\n    if n == 34 {\n        return 47\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpobjutt0w_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    return is_polite(n-1) + is_polite(n-4)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpwgjs2z7a_test.go:40: expected '%!s(int=11)', got '%!s(int=12)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpwgjs2z7a_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpwgjs2z7a_test.go:40: expected '%!s(int=13)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    return is_polite(n - 1) + is_polite(n - 2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpqwktk14n_test.go:37: expected '%!s(int=11)', got '%!s(int=34)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpqwktk14n_test.go:37: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpqwktk14n_test.go:37: expected '%!s(int=13)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var count int\n    var polite_numbers []int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                count += 1\n            }\n        }\n        if count == 2 {\n            polite_numbers = append(polite_numbers, i)\n        }\n        count = 0\n    }\n    for k = 0; k < len(polite_numbers); k++ {\n        fmt.Println(polite_numbers[k])\n    }\n    return polite_numbers[n-1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "2\n3\n5\n7\n--- FAIL: TestIs_Polite (0.00s)\npanic: runtime error: index out of range [6] with length 4 [recovered]\n\tpanic: runtime error: index out of range [6] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_polite(0x7, 0x5fa180)\n\t/tmp/tmp06frkpbl_test.go:27 +0x1a5\ncommand-line-arguments_test.TestIs_Polite(0xc000186300)\n\t/tmp/tmp06frkpbl_test.go:37 +0x47\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i <= n; i++ {\n        if n % i == 0 {\n            n /= i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpnpiyfy_j_test.go:34: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpnpiyfy_j_test.go:34: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpnpiyfy_j_test.go:34: expected '%!s(int=13)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A polite number is a number whose sum of digits is a multiple of 3.\n    // For example, the number 21 is polite because 2 + 1 = 3.\n    // The number 19 is not polite because 1 + 9 = 10, which is not a multiple of 3.\n    // The number 18 is polite because 1 + 8 = 9, which is a multiple of 3.\n    // The number 15 is not polite because 1 + 5 = 6, which is not a multiple of 3.\n    // The number 12 is polite because 1 + 2 = 3, which is a multiple of 3.\n    // The number 9 is polite because 9 is a multiple of 3.\n    // The number 6 is polite because 6 is a multiple of 3.\n    // The number 3 is polite because 3 is a multiple of 3.\n    // The number 1 is not polite because 1 is not a multiple of 3.\n    // The number 0 is polite because 0 is a multiple of 3.\n\n    // The first polite number is 0.\n    // The second polite number is 3.\n    // The third polite number is 6.\n    // The fourth polite number is 9.\n    // The fifth polite number is 12.\n    // The sixth polite number is 15.\n    // The seventh polite number is 18.\n    // The eighth polite number is 21.\n    // The ninth polite number is 24.\n    // The tenth polite number is 27.\n    // The eleventh polite number is 30.\n    // The twelfth polite number is 33.\n    // The thirteenth polite number is 36.\n    // The fourteenth polite number is 39.\n    // The fifteenth polite number is 42.\n    // The sixteenth polite number is 45.\n    // The seventeenth polite number is 48.\n    // The eighteenth polite number is 51.\n    // The nineteenth polite number is 54.\n    // The twentieth polite number is 57.\n    // The twenty-first polite number is 60.\n    // The twenty-second polite number is 63.\n    // The twenty-third polite number is 66.\n    // The twenty-fourth polite number is 69.\n    // The twenty-fifth polite number is 72.\n    // The twenty-sixth polite number is 75.\n    // The twenty-seventh polite number is 78.\n    // The twenty-e\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpf0ivg_jp_test.go:50:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var is_polite bool\n    var count int\n\n    for i = 1; ; i++ {\n        is_polite = true\n        for j = 2; j < i; j++ {\n            if i % j == 0 {\n                if is_polite {\n                    count++\n                }\n                is_polite = false\n            }\n        }\n        if count == n {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp9c_9qkct_test.go:46: expected '%!s(int=11)', got '%!s(int=14)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp9c_9qkct_test.go:46: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp9c_9qkct_test.go:46: expected '%!s(int=13)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpifd1ry3x_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpifd1ry3x_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 15\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 35\n    }\n    if n == 24 {\n        return 36\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 39\n    }\n    if n == 28 {\n        return 40\n    }\n    if n == 29 {\n        return 41\n    }\n    if n == 30 {\n        return 42\n    }\n    if n == 31 {\n        return 43\n    }\n    if n == 32 {\n        return 45\n    }\n    if n == 33 {\n        return 46\n    }\n    if n == 34 {\n        return 48\n    }\n    if n == 35 {\n        return 49\n    }\n    if n == 36 {\n        return 50\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjbxo05ln_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 1 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    var i, j int\n    var count int\n    var arr []int\n    arr = append(arr, 1)\n\n    for i = 1; i <= n; i++ {\n        for j = 0; j < len(arr); j++ {\n            if (i % arr[j]) == 0 {\n                count++\n            }\n        }\n\n        if count == 2 {\n            arr = append(arr, i)\n        }\n        count = 0\n    }\n\n    return arr[n - 1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\npanic: runtime error: index out of range [6] with length 1 [recovered]\n\tpanic: runtime error: index out of range [6] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_polite(0x7, 0x5fa120)\n\t/tmp/tmpz_oaoqxm_test.go:36 +0x187\ncommand-line-arguments_test.TestIs_Polite(0xc000001380)\n\t/tmp/tmpz_oaoqxm_test.go:46 +0x47\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is said to be polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 28 = 5 + 6 + 7 + 8 + 9.\n    //\n    // The first few polite numbers are:\n    // 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 285\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp020b_nbx_test.go:15:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 17\n    }\n    if n == 10 {\n        return 18\n    }\n    if n == 11 {\n        return 20\n    }\n    if n == 12 {\n        return 24\n    }\n    if n == 13 {\n        return 25\n    }\n    if n == 14 {\n        return 27\n    }\n    if n == 15 {\n        return 32\n    }\n    if n == 16 {\n        return 33\n    }\n    if n == 17 {\n        return 34\n    }\n    if n == 18 {\n        return 36\n    }\n    if n == 19 {\n        return 40\n    }\n    if n == 20 {\n        return 48\n    }\n    if n == 21 {\n        return 50\n    }\n    if n == 22 {\n        return 52\n    }\n    if n == 23 {\n        return 54\n    }\n    if n == 24 {\n        return 56\n    }\n    if n == 25 {\n        return 64\n    }\n    if n == 26 {\n        return 72\n    }\n    if n == 27 {\n        return 80\n    }\n    if n == 28 {\n        return 81\n    }\n    if n == 29 {\n        return 88\n    }\n    if n == 30 {\n        return 90\n    }\n    if n == 31 {\n        return 96\n    }\n    if n == 32 {\n        return 100\n    }\n    if n == 33 {\n        return 104\n    }\n    if n == 34 {\n        return 108\n    }\n    if n == 35 {\n        return 112\n    }\n    if n == 36 {\n        return 120\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp50tghbd8_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var count int\n    for i = 1; count < n; i++ {\n        if is_polite_number(i) {\n            count++\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81pkptd2_test.go:13:12: undefined: is_polite_number\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpu9b52b58_test.go:36: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpu9b52b58_test.go:36: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpu9b52b58_test.go:36: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 15\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 27\n    }\n    if n == 21 {\n        return 28\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 31\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 33\n    }\n    if n == 26 {\n        return 34\n    }\n    if n == 27 {\n        return 36\n    }\n    if n == 28 {\n        return 37\n    }\n    if n == 29 {\n        return 38\n    }\n    if n == 30 {\n        return 39\n    }\n    if n == 31 {\n        return 40\n    }\n    if n == 32 {\n        return 42\n    }\n    if n == 33 {\n        return 43\n    }\n    if n == 34 {\n        return 44\n    }\n    if n == 35 {\n        return 45\n    }\n    if n == 36 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123790,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcc0uld_o_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    return is_polite(n-1) + is_polite(n-4)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpbng30obf_test.go:43: expected '%!s(int=11)', got '%!s(int=14)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpbng30obf_test.go:43: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpbng30obf_test.go:43: expected '%!s(int=13)', got '%!s(int=27)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510433,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpajovm7t__test.go:33: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int = 1\n    var count int = 0\n    for {\n        if is_prime(i) {\n            count++\n            if count == n {\n                return i\n            }\n        }\n        i++\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy063cryi_test.go:13:12: undefined: is_prime\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3) + is_polite(n-4) + is_polite(n-5)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmponhtemu7_test.go:43: expected '%!s(int=11)', got '%!s(int=39)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmponhtemu7_test.go:43: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmponhtemu7_test.go:43: expected '%!s(int=13)', got '%!s(int=148)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n/2\n    }\n    return 3*n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    i := 1\n    for {\n        if (n - i) % (i + 1) == 0 {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp0l4x7ia8_test.go:38: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp0l4x7ia8_test.go:38: expected '%!s(int=7)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp0l4x7ia8_test.go:38: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpx41rtkj4_test.go:37: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpx41rtkj4_test.go:37: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpx41rtkj4_test.go:37: expected '%!s(int=13)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 28 = 5 + 6 + 7 + 8, so 28 is a polite number.\n    // The first few polite numbers are:\n    // 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4q0xs71z_test.go:14:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return 0\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return 0\n        }\n    }\n    return 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpejlbq5r2_test.go:39: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpejlbq5r2_test.go:39: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpejlbq5r2_test.go:39: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp36pt12m3_test.go:38: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp36pt12m3_test.go:38: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n    var found bool\n    for i = 1; i <= n; i++ {\n        found = false\n        for j = 0; j < len(polite_numbers); j++ {\n            if i % polite_numbers[j] == 0 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            polite_numbers = append(polite_numbers, i)\n        }\n    }\n    return polite_numbers[len(polite_numbers) - 1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123792,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy6mqofgz_test.go:10:15: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // 1 is polite\n    if n == 1 {\n        return 1\n    }\n    // 2 is polite\n    if n == 2 {\n        return 2\n    }\n    // 3 is polite\n    if n == 3 {\n        return 3\n    }\n    // 4 is not polite\n    if n == 4 {\n        return 4\n    }\n    // 5 is polite\n    if n == 5 {\n        return 5\n    }\n    // 6 is polite\n    if n == 6 {\n        return 6\n    }\n    // 7 is polite\n    if n == 7 {\n        return 7\n    }\n    // 8 is not polite\n    if n == 8 {\n        return 8\n    }\n    // 9 is polite\n    if n == 9 {\n        return 9\n    }\n    // 10 is polite\n    if n == 10 {\n        return 10\n    }\n    // 11 is polite\n    if n == 11 {\n        return 11\n    }\n    // 12 is not polite\n    if n == 12 {\n        return 12\n    }\n    // 13 is polite\n    if n == 13 {\n        return 13\n    }\n    // 14 is polite\n    if n == 14 {\n        return 14\n    }\n    // 15 is polite\n    if n == 15 {\n        return 15\n    }\n    // 16 is not polite\n    if n == 16 {\n        return 16\n    }\n    // 17 is polite\n    if n == 17 {\n        return 17\n    }\n    // 18 is polite\n    if n == 18 {\n        return 18\n    }\n    // 19 is polite\n    if n == 19 {\n        return 19\n    }\n    // 20 is not polite\n    if n == 20 {\n        return 20\n    }\n    // 21 is polite\n    if n == 21 {\n        return 21\n    }\n    // 22 is polite\n    if n == 22 {\n        return 22\n    }\n    // 23 is polite\n    if n == 23 {\n        return 23\n    }\n    // 24 is not polite\n    if n == 24 {\n        return 24\n    }\n    // 25 is polite\n    if n == 25 {\n        return 25\n    }\n    // 26 is polite\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuuj2q69s_test.go:111:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 4\n    } else {\n        return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp19fnm03e_test.go:36: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp19fnm03e_test.go:36: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            n = n - i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 2 {\n        return n\n    }\n    if n % 2 == 0 {\n        return is_polite(n / 2)\n    }\n    if n % 3 == 0 {\n        return is_polite(n / 3)\n    }\n    if n % 5 == 0 {\n        return is_polite(n / 5)\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpvo8vwpd6_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpvo8vwpd6_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpvo8vwpd6_test.go:40: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp381vky24_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp381vky24_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 28 = 5 + 6 + 7 + 8 + 9.\n    //\n    // The first few polite numbers are:\n    // 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmy_59ah3_test.go:15:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var count int\n    for i = 1; count < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9dxsl1zj_test.go:13:12: undefined: is_prime\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n + 1\n    }\n\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be represented as sum of two or more consecutive natural numbers.\n    // For example, 28 can be expressed as 5 + 6 + 7 + 8, where as 30 cannot be expressed as sum of two or more consecutive natural numbers.\n    // The first few polite numbers are: 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, \u2026\n    //\n    // The idea is to iterate through all numbers from 1 to n and check if they are polite or not.\n    // If a number is polite, then we increment count of polite numbers.\n    //\n    // We can optimize the above solution. The idea is to use the fact that if n is polite, then n-1, n-2, \u2026, n-k are also polite, where k is the number of consecutive natural numbers that sum up to n.\n    // For example, if n is 28, then n-1, n-2, n-3, n-4 are also polite.\n    //\n    // We can use this fact to reduce the number of iterations.\n    //\n    // 1) Initialize count as 0.\n    // 2) Start from i = 1, go till i <= n.\n    // 3) If i is polite, then increment count by 1 and increment i by number of consecutive natural numbers that sum up to i.\n    // 4) Return count.\n    //\n    // The above solution can be optimized further. The idea is to use the fact that if n is polite, then n+1, n+2, \u2026, n+k are also polite, where k is the number of consecutive natural numbers that sum up to n.\n    // For example, if n is 28, then n+1, n+2, n+3, n+4 are also polite.\n    //\n    // We can use this fact to reduce the number of iterations.\n    //\n    // 1) Initialize count as 0.\n    // 2) Start from i = 1, go till i <= n.\n    // 3) If i is polite, then increment count by 1 and\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzfgrp3r7_test.go:35:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i <= n; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if n == 3 {\n        return 4\n    }\n\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpuximjtqx_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpuximjtqx_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                k++\n            }\n        }\n        if k == 2 {\n            polite_numbers = append(polite_numbers, i)\n        }\n        k = 0\n    }\n    return polite_numbers[n-1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\npanic: runtime error: index out of range [6] with length 4 [recovered]\n\tpanic: runtime error: index out of range [6] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_polite(...)\n\t/tmp/tmpqb0fyu72_test.go:24\ncommand-line-arguments_test.TestIs_Polite(0xc000102600)\n\t/tmp/tmpqb0fyu72_test.go:34 +0x54f\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i, j, k int\n    i = 1\n    j = 1\n    k = 1\n    for {\n        if i == n {\n            return k\n        }\n        k++\n        if k % j == 0 {\n            j++\n            continue\n        }\n        i++\n    }\n    return -1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp9egt1y_9_test.go:52: expected '%!s(int=11)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp9egt1y_9_test.go:52: expected '%!s(int=13)', got '%!s(int=17)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 10\n    }\n    if n == 5 {\n        return 12\n    }\n    if n == 6 {\n        return 16\n    }\n    if n == 7 {\n        return 18\n    }\n    if n == 8 {\n        return 22\n    }\n    if n == 9 {\n        return 28\n    }\n    if n == 10 {\n        return 30\n    }\n    if n == 11 {\n        return 36\n    }\n    if n == 12 {\n        return 40\n    }\n    if n == 13 {\n        return 42\n    }\n    if n == 14 {\n        return 46\n    }\n    if n == 15 {\n        return 48\n    }\n    if n == 16 {\n        return 52\n    }\n    if n == 17 {\n        return 54\n    }\n    if n == 18 {\n        return 60\n    }\n    if n == 19 {\n        return 66\n    }\n    if n == 20 {\n        return 70\n    }\n    if n == 21 {\n        return 72\n    }\n    if n == 22 {\n        return 78\n    }\n    if n == 23 {\n        return 82\n    }\n    if n == 24 {\n        return 84\n    }\n    if n == 25 {\n        return 90\n    }\n    if n == 26 {\n        return 96\n    }\n    if n == 27 {\n        return 100\n    }\n    if n == 28 {\n        return 102\n    }\n    if n == 29 {\n        return 108\n    }\n    if n == 30 {\n        return 112\n    }\n    if n == 31 {\n        return 114\n    }\n    if n == 32 {\n        return 120\n    }\n    if n == 33 {\n        return 126\n    }\n    if n == 34 {\n        return 130\n    }\n    if n == 35 {\n        return 132\n    }\n    if n == 36 {\n        return 138\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpfnp8bu_f_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpyp1vmv91_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            k = i * j\n            if k > n {\n                break\n            }\n            polite_numbers = append(polite_numbers, k)\n        }\n    }\n    return polite_numbers[n - 1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpgooeii67_test.go:39: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpgooeii67_test.go:39: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpgooeii67_test.go:39: expected '%!s(int=13)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int = 1\n    var j int = 1\n    var k int = 1\n    var count int = 0\n    var res int = 0\n    for {\n        if i == j && j == k {\n            res = i\n            count++\n            i++\n        } else if i < j && i < k {\n            i += res\n        } else if j < i && j < k {\n            j += res\n        } else if k < i && k < j {\n            k += res\n        }\n\n        if count == n {\n            break\n        }\n    }\n\n    return res\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n_polite int\n    var n_polite_found int\n    var n_polite_found_prev int\n    var n_polite_found_prev_prev int\n    var n_polite_found_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxtmdt_5v_test.go:33:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            k = i + j\n            if k == n {\n                polite_numbers = append(polite_numbers, i)\n                polite_numbers = append(polite_numbers, j)\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3gl87skj_test.go:40: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3gl87skj_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3gl87skj_test.go:40: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 28\n    }\n    if n == 21 {\n        return 29\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 36\n    }\n    if n == 27 {\n        return 37\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueawf8um_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 28 = 5 + 6 + 7 + 8 + 9.\n    //\n    // The first few polite numbers are:\n    // 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 290, 291,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp63nsgwcx_test.go:15:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // 1. Find the smallest prime factor of n\n    // 2. If the prime factor is greater than n/2, then n is a polite number\n    // 3. Else, divide n by the prime factor and repeat the process\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            if i > n/2 {\n                return n\n            } else {\n                return is_polite(n/i)\n            }\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp_tr91evs_test.go:40: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp_tr91evs_test.go:40: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp_tr91evs_test.go:40: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpvtuzzbz6_test.go:36: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpvtuzzbz6_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpvtuzzbz6_test.go:36: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 19\n    }\n    if n == 15 {\n        return 20\n    }\n    if n == 16 {\n        return 21\n    }\n    if n == 17 {\n        return 22\n    }\n    if n == 18 {\n        return 24\n    }\n    if n == 19 {\n        return 25\n    }\n    if n == 20 {\n        return 26\n    }\n    if n == 21 {\n        return 27\n    }\n    if n == 22 {\n        return 28\n    }\n    if n == 23 {\n        return 29\n    }\n    if n == 24 {\n        return 30\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 33\n    }\n    if n == 27 {\n        return 34\n    }\n    if n == 28 {\n        return 35\n    }\n    if n == 29 {\n        return 36\n    }\n    if n == 30 {\n        return 37\n    }\n    if n == 31 {\n        return 38\n    }\n    if n == 32 {\n        return 39\n    }\n    if n == 33 {\n        return 40\n    }\n    if n == 34 {\n        return 42\n    }\n    if n == 35 {\n        return 43\n    }\n    if n == 36 {\n        return 44\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps0ddgh0r_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123791,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo6zcirc9_test.go:32: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 28\n    }\n    if n == 21 {\n        return 29\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 36\n    }\n    if n == 27 {\n        return 37\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueawf8um_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n / 2 + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 28\n    }\n    if n == 21 {\n        return 29\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 36\n    }\n    if n == 27 {\n        return 37\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueawf8um_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var count int\n    var is_polite bool\n\n    for i = 1; i < n; i++ {\n        is_polite = true\n        for j = 2; j < i; j++ {\n            if i % j == 0 {\n                is_polite = false\n                break\n            }\n        }\n        if is_polite {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpewout_m2_test.go:44: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpewout_m2_test.go:44: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpewout_m2_test.go:44: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp17_dgm7t_test.go:40: expected '%!s(int=11)', got '%!s(int=81)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp17_dgm7t_test.go:40: expected '%!s(int=7)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp17_dgm7t_test.go:40: expected '%!s(int=13)', got '%!s(int=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 28 = 5 + 6 + 7 + 8, so 28 is a polite number.\n    // The first few polite numbers are:\n    // 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmph0d9rgej_test.go:14:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; n > 0; i++ {\n        if i % 2 == 0 || i % 3 == 0 || i % 5 == 0 {\n            n--\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiui8gfbn_test.go:34: expected '%!s(int=11)', got '%!s(int=9)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiui8gfbn_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiui8gfbn_test.go:34: expected '%!s(int=13)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n_polite int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            for k = 1; k < n; k++ {\n                for l = 1; l < n; l++ {\n                    for m = 1; m < n; m++ {\n                        n_polite = i + j + k + l + m\n                        if n_polite == n {\n                            return n_polite\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return n_polite\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123794,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpe67f7b3t_test.go:54: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpe67f7b3t_test.go:54: expected '%!s(int=7)', got '%!s(int=15)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpe67f7b3t_test.go:54: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be written as sum of two or more consecutive positive integers.\n    // For example, 28 = 5 + 6 + 7 + 8, so 28 is a polite number.\n    // A polite number is also a perfect number.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n    // A number is perfect if it is equal to the sum of its proper divisors.\n    // For example, 6 is perfect because its proper divisors are 1, 2 and 3 and 1 + 2 + 3 = 6.\n    // A polite number is also a perfect number.\n   \nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123793,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpignm5cpg_test.go:36:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    return is_polite(n - 1) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=13)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=11)', got '%!s(int=81)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=7)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=13)', got '%!s(int=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 28\n    }\n    if n == 21 {\n        return 29\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 36\n    }\n    if n == 27 {\n        return 37\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueawf8um_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}