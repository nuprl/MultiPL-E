{
  "name": "mbpp_558_digit_distance_nums",
  "language": "go_test.go",
  "prompt": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n",
    "    if n1 < 0 || n2 < 0 {\n        return -1\n    }\n    if n1 == 0 && n2 == 0 {\n        return 0\n    }\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digits []int = make([]int, n1_len)\n    var n2_digits []int = make([]int, n2_len)\n    var i int = 0\n    var j int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n    for i = 0; i < n1_len; i++ {\n        n1_digits[i] = int(n1_str[i]) - 48\n    }\n    for j = 0; j < n2_len; j++ {\n        n2_digits[j] = int(n2_str[j]) - 48\n    }\n    for i = 0; i < n1_len; i++ {\n        n1_digit = n1_digits[i]\n        if i < n2_len {\n            n2_digit = n2_digits[i]\n        } else {\n            n2_digit = 0\n        }\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n",
    "    // your code here\n    return 0\n}\n"
  ]
}