{
  "name": "mbpp_412_remove_odd",
  "language": "go_test.go",
  "prompt": "package remove_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove odd numbers from a given list.\nfunc remove_odd(l []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Odd(t *testing.T) {\n  candidate := remove_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2} },\n     { actual: candidate([]int{2, 4, 6}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{10, 20, 3}), expected: []int{10, 20} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    r := []int{}\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var even []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, i := range l {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    r := []int{}\n    for _, i := range l {\n        if i % 2 == 0 {\n            r = append(r, i)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, i := range l {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, i := range l {\n        if i % 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var new_list []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            new_list = append(new_list, v)\n        }\n    }\n    return new_list\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var even []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n    return even\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var ret []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var ret []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var ret []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n%2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, v := range l {\n        if v%2 == 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n",
    "    var res []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n",
    "    var result []int\n    for _, v := range l {\n        if v % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var r []int\n    for _, n := range l {\n        if n % 2 == 0 {\n            r = append(r, n)\n        }\n    }\n    return r\n}\n"
  ]
}