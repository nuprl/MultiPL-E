{
  "name": "mbpp_632_move_zero",
  "language": "go_test.go",
  "prompt": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // TODO: implement this function\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpx7w4dzx0_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpx7w4dzx0_test.go:29: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpx7w4dzx0_test.go:29: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // Write your code here\n    var zero_count int\n    for i, v := range num_list {\n        if v == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = v\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // TODO: Write - Your - Code\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpzzeoluk5_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpzzeoluk5_test.go:29: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpzzeoluk5_test.go:29: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    if len(num_list) == 0 {\n        return num_list\n    }\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_index int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_index = i\n            break\n        }\n    }\n\n    for i := zero_index + 1; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index] = num_list[i]\n            num_list[i] = 0\n            zero_index++\n        }\n    }\n\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_index int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_index = i\n            break\n        }\n    }\n    for i := zero_index; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index++\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmp744col0q_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    non_zero_list = append(non_zero_list, zero_list...)\n    return non_zero_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmp744col0q_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    var result []int\n    for _, num := range num_list {\n        if num != 0 {\n            result = append(result, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        result = append(result, 0)\n    }\n    return result\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // TODO: implement\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpxr3rw3zk_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpxr3rw3zk_test.go:29: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpxr3rw3zk_test.go:29: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_list = append(zero_list, num_list[i])\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            i--\n        }\n    }\n    return append(num_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_index []int\n    for i, v := range num_list {\n        if v == 0 {\n            zero_index = append(zero_index, i)\n        }\n    }\n    for i := 0; i < len(zero_index); i++ {\n        num_list = append(num_list[:zero_index[i]], num_list[zero_index[i]+1:]...)\n        num_list = append(num_list, 0)\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpu1gdop1r_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpu1gdop1r_test.go:38: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpu1gdop1r_test.go:38: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count++\n        }\n    }\n    for count < len(num_list) {\n        num_list[count] = 0\n        count++\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var num_list_len int = len(num_list)\n    var zero_count int = 0\n    for i := 0; i < num_list_len; i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := num_list_len - zero_count; i < num_list_len; i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    if len(num_list) == 0 {\n        return num_list\n    }\n\n    zero_index := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index] = num_list[i]\n            zero_index++\n        }\n    }\n\n    for i := zero_index; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n            num_list = append(num_list[:i], num_list[i+1:]...)\n        }\n    }\n    return append(num_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\npanic: runtime error: slice bounds out of range [8:6] [recovered]\n\tpanic: runtime error: slice bounds out of range [8:6]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536440, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536440, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.move_zero(0xc00001c140, 0x9, 0x9, 0xc000028330, 0x6, 0x6)\n\t/tmp/tmpdsimwkdf_test.go:14 +0x2f1\ncommand-line-arguments_test.TestMove_Zero(0xc000001380)\n\t/tmp/tmpdsimwkdf_test.go:28 +0x139\ntesting.tRunner(0xc000001380, 0x54f300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // TODO: Implement me\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    var non_zero_index int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[non_zero_index] = num\n            non_zero_index++\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        num_list[len(num_list) - 1 - i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyk_9vmu4_test.go:12:9: i declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, v := range num_list {\n        if v == 0 {\n            zero_list = append(zero_list, v)\n        } else {\n            non_zero_list = append(non_zero_list, v)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmp744col0q_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var num_list_new []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            num_list_new = append(num_list_new, num)\n        }\n    }\n\n    return append(num_list_new, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i-zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmp744col0q_test.go:34: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_index int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index] = num_list[i]\n            zero_index++\n        }\n    }\n    for i := zero_index; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_list = append(zero_list, num_list[i])\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            i--\n        }\n    }\n    return append(num_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    if len(num_list) == 0 {\n        return num_list\n    }\n\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // TODO: Implement me\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "--- FAIL: TestMove_Zero (0.00s)\n    --- FAIL: TestMove_Zero/test_num__0 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=0) %!s(int=0)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestMove_Zero/test_num__1 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]', got '[%!s(int=2) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0)]'\n    --- FAIL: TestMove_Zero/test_num__2 (0.00s)\n        tmpocny9udy_test.go:29: expected '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i-zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_list = append(zero_list, num_list[i])\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            i--\n        }\n    }\n    num_list = append(num_list, zero_list...)\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var non_zero_list []int\n    var zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i-zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_num int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_num++\n        } else {\n            num_list[i - zero_num] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_num; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    zero_count := 0\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123935,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510515,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // write your code here\n    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n    // Write your code here\n    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\nfunc TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123936,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}