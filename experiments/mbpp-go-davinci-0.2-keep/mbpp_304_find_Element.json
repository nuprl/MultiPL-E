{
  "name": "mbpp_304_find_Element",
  "language": "go_test.go",
  "prompt": "package find_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find element at a given index after number of rotations.\nfunc find_Element(arr []int, ranges [][]int, rotations int, index int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Element(t *testing.T) {\n  candidate := find_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, [][]int{[]int{0, 2}, []int{0, 3}}, 2, 1), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 2), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if index >= r[0] && index <= r[1] {\n            index = (index + rotations) % len(arr)\n            break\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if index >= r[0] && index <= r[1] {\n            index = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if r[0] <= index && index <= r[1] {\n            index = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        arr = append(arr[1:], arr[0])\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if r[0] <= index && index <= r[1] {\n            index = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        arr = append(arr[1:], arr[0])\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if index >= r[0] && index <= r[1] {\n            if rotations % 2 == 0 {\n                return arr[index]\n            } else {\n                return arr[r[1] - (index - r[0])]\n            }\n        }\n    }\n    return -1\n}\n",
    "    for _, r := range ranges {\n        if index >= r[0] && index <= r[1] {\n            index = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    // rotate the array\n    for i := 0; i < rotations; i++ {\n        arr = append(arr[1:], arr[0])\n    }\n    // find the element\n    for i := 0; i < len(ranges); i++ {\n        if ranges[i][0] <= index && ranges[i][1] >= index {\n            return arr[index]\n        }\n    }\n    return -1\n}\n",
    "    for i := 0; i < rotations; i++ {\n        arr = append(arr[1:], arr[0])\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        // rotate\n        arr = append(arr[1:], arr[0])\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n            break\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        arr = append(arr[1:], arr[0])\n    }\n\n    for _, r := range ranges {\n        if r[0] <= index && index <= r[1] {\n            return arr[index]\n        }\n    }\n\n    return -1\n}\n",
    "    for _, r := range ranges {\n        if r[0] <= index && index <= r[1] {\n            index = (index + rotations) % len(arr)\n        }\n    }\n    return arr[index]\n}\n",
    "    for _, r := range ranges {\n        if r[0] <= index && index <= r[1] {\n            index = (index - r[0] + rotations) % (r[1] - r[0] + 1) + r[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        arr = rotate_array(arr, ranges[i][0], ranges[i][1])\n    }\n    return arr[index]\n}\n",
    "    for _, range_ := range ranges {\n        if index >= range_[0] && index <= range_[1] {\n            index = (index - range_[0] + rotations) % (range_[1] - range_[0] + 1) + range_[0]\n        }\n    }\n    return arr[index]\n}\n",
    "    for i := 0; i < rotations; i++ {\n        for j := 0; j < len(ranges); j++ {\n            start := ranges[j][0]\n            end := ranges[j][1]\n            if start < end {\n                arr[start], arr[end] = arr[end], arr[start]\n            }\n        }\n    }\n    return arr[index]\n}\n"
  ]
}