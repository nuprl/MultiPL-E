{
  "name": "mbpp_268_find_star_num",
  "language": "go_test.go",
  "prompt": "package find_star_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n'th star number.\nfunc find_star_num(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Star_Num(t *testing.T) {\n  candidate := find_star_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 37 },\n     { actual: candidate(4), expected: 73 },\n     { actual: candidate(5), expected: 121 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 1 {\n        return 1\n    }\n    return find_star_num(n - 1) + n\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n-1) + 2*n - 1\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_star_num(n-1) + 4*(n-1)\n}\n",
    "    if n == 1 {\n        return 5\n    }\n\n    return find_star_num(n - 1) * 10 + n\n}\n",
    "    if n == 1 {\n        return 5\n    }\n\n    return find_star_num(n - 1) + 2 * n - 1\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_star_num(n - 1) + 4 * (n - 1)\n}\n",
    "    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return find_star_num(n-1) + 4*(n-1)\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_star_num(n - 1) + 6 * (n - 1)\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n-1) + 2*n - 1\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n-1) + (n-1) * 2\n}\n",
    "    if n == 1 {\n        return 5\n    }\n\n    return find_star_num(n-1) * 10 + n\n}\n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return find_star_num(n - 1) + 4 * (n - 1)\n}\n",
    "    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return find_star_num(n-1) + 4*(n-1)\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n-1) * 10 + n\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n-1) + 2 * n - 1\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n - 1) * 10 + n\n}\n",
    "    if n == 1 {\n        return 5\n    }\n    return find_star_num(n - 1) * 10 + n\n}\n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return find_star_num(n-1) + 4*(n-1)\n}\n",
    "    if n <= 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    return find_star_num(n - 1) + 4 * (n - 1)\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_star_num(n - 1) + n * n\n}\n"
  ]
}