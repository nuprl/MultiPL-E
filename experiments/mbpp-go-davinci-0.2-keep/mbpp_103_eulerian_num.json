{
  "name": "mbpp_103_eulerian_num",
  "language": "go_test.go",
  "prompt": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    // TODO: implement\n    return 0\n}\n",
    "    if n == 0 {\n        return 1\n    } else if m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    } else if n == 1 {\n        return m\n    } else if m == 1 {\n        return 1\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n    }\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n",
    "    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return (n + m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n < 0 || m < 0 {\n        return 0\n    }\n    if n == 0 && m == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m\n    }\n    if m == 1 {\n        return n\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n}\n",
    "    if n == 0 || m == 0 {\n        return 1\n    }\n    if n == 1 {\n        return m + 1\n    }\n    if m == 1 {\n        return n + 1\n    }\n    return eulerian_num(n - 1, m) + m * eulerian_num(n, m - 1)\n}\n"
  ]
}