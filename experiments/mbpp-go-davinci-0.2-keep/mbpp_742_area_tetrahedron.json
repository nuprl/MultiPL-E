{
  "name": "mbpp_742_area_tetrahedron",
  "language": "go_test.go",
  "prompt": "package area_tetrahedron_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to caluclate the area of a tetrahedron.\nfunc area_tetrahedron(side int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestArea_Tetrahedron(t *testing.T) {\n  candidate := area_tetrahedron\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 15.588457268119894 },\n     { actual: candidate(20), expected: 692.8203230275509 },\n     { actual: candidate(10), expected: 173.20508075688772 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return (math.Sqrt(3) * math.Pow(side, 2)) / 4\n}\n",
    "    return (math.Sqrt(3) * math.Pow(float64(side), 2)) / 4\n}\n",
    "    return (side * side * side) / (6 * math.Sqrt(2))\n}\n",
    "    return (side * side * side) / (6 * (3 ** 0.5))\n}\n",
    "    return float64(side) * float64(side) * float64(side) / 6.0 * float64(side)\n}\n",
    "    return (side * side * (1.7320508075688772)) / 4\n}\n",
    "    return float64(side) * float64(side) * float64(side) / 6.0 * math.Sqrt(2)\n}\n",
    "    return (side * side * side) / (6 * math.Sqrt(2))\n}\n",
    "    return (math.Sqrt(3) * math.Pow(float64(side), 2)) / 4\n}\n",
    "    return (math.Sqrt(3) / 4) * math.Pow(float64(side), 2)\n}\n",
    "    return (side * side * side) / (6 * math.Sqrt(2))\n}\n",
    "    return (math.Sqrt(3) / 4) * math.Pow(float64(side), 2)\n}\n",
    "    return (math.Sqrt(3) / 4) * math.Pow(float64(side), 2)\n}\n",
    "    return float64(side) * float64(side) * float64(side) * math.Sqrt(2) / 12\n}\n",
    "    return (math.Sqrt(3) * math.Pow(float64(side), 2)) / 4\n}\n",
    "    return (float64(side) * float64(side) * float64(side)) / (6 * float64(side))\n}\n",
    "    return (float64(side) * float64(side) * float64(side)) / (6 * float64(side))\n}\n",
    "    return (math.Sqrt(3) * side * side) / 4\n}\n",
    "    return (side * side * side) / (6 * math.Sqrt(2))\n}\n",
    "    return (side * side * side) / (6 * math.Sqrt(2))\n}\n"
  ]
}