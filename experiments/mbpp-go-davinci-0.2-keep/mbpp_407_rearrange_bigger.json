{
  "name": "mbpp_407_rearrange_bigger",
  "language": "go_test.go",
  "prompt": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n = n / 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return digitsToInt(digits)\n        }\n    }\n    return -1\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 2; i >= 0; i-- {\n        if digits[i] < digits[i + 1] {\n            for j := len(digits) - 1; j > i; j-- {\n                if digits[j] > digits[i] {\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n                }\n            }\n\n            for j := i + 1; j < len(digits) - 1; j++ {\n                for k := j + 1; k < len(digits); k++ {\n                    if digits[j] > digits[k] {\n                        digits[j], digits[k] = digits[k], digits[j]\n                    }\n                }\n            }\n\n            result := 0\n            for _, d := range digits {\n                result = result * 10 + d\n            }\n            return result\n        }\n    }\n\n    return -1\n}\n",
    "    if n < 0 {\n        return \"Invalid input\"\n    }\n\n    if n < 10 {\n        return \"No bigger number\"\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i-1] {\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    var result int\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return to_int(digits)\n        }\n    }\n\n    return -1\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            break\n        }\n    }\n\n    result := 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        result = result * 10 + digits[i]\n    }\n\n    return result\n}\n",
    "    if n < 10 {\n        return -1\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := len(digits) - 1; i > 0; i-- {\n        if digits[i] > digits[i - 1] {\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n            return digits\n        }\n    }\n    return -1\n}\n"
  ]
}