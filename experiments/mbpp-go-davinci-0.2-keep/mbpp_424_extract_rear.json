{
  "name": "mbpp_424_extract_rear",
  "language": "go_test.go",
  "prompt": "package extract_rear_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract only the rear index element of each string in the given tuple.\nfunc extract_rear(test_tuple []interface{}) []string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestExtract_Rear(t *testing.T) {\n  candidate := extract_rear\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"Mers\", \"for\", \"Vers\"}), expected: []string{\"s\", \"r\", \"s\"} },\n     { actual: candidate([]interface{}{\"Avenge\", \"for\", \"People\"}), expected: []string{\"e\", \"r\", \"e\"} },\n     { actual: candidate([]interface{}{\"Gotta\", \"get\", \"go\"}), expected: []string{\"a\", \"t\", \"o\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        if str, ok := v.(string); ok {\n            result = append(result, str[len(str)-1:])\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    // Your code here\n    return []string{}\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, i := range test_tuple {\n        result = append(result, i.(string)[len(i.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, item := range test_tuple {\n        result = append(result, item.(string)[len(item.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, string(v.(string)[len(v.(string))-1]))\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, value := range test_tuple {\n        result = append(result, value.(string)[len(value.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    result := []string{}\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, fmt.Sprintf(\"%s\", v))\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var rear_index_elements []string\n    for _, element := range test_tuple {\n        rear_index_elements = append(rear_index_elements, element.(string)[len(element.(string))-1:])\n    }\n    return rear_index_elements\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, item := range test_tuple {\n        result = append(result, item.(string)[len(item.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        s := v.(string)\n        result = append(result, s[len(s)-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = v.(string)[len(v.(string))-1:]\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, fmt.Sprintf(\"%c\", element.(string)[len(element.(string))-1]))\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, fmt.Sprintf(\"%c\", v.(string)[len(v.(string))-1]))\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    // your code here\n    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, element := range test_tuple {\n        result = append(result, element.(string)[len(element.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        s := v.(string)\n        result = append(result, s[len(s)-1:])\n    }\n    return result\n}\n",
    "    result := make([]string, len(test_tuple))\n    for i, v := range test_tuple {\n        result[i] = fmt.Sprintf(\"%c\", v.(string)[len(v.(string)) - 1])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, value := range test_tuple {\n        result = append(result, value.(string)[len(value.(string))-1:])\n    }\n    return result\n}\n",
    "    var result []string\n    for _, v := range test_tuple {\n        result = append(result, v.(string)[len(v.(string))-1:])\n    }\n    return result\n}\n"
  ]
}