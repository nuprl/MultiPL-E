{
  "name": "mbpp_760_unique_Element",
  "language": "go_test.go",
  "prompt": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v]++\n    }\n    for _, v := range m {\n        if v > 1 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i+1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if len(arr) == 1 {\n        return true\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] == arr[j] {\n                return false\n            }\n        }\n    }\n    return true\n}\n"
  ]
}