{
  "name": "mbpp_445_index_multiplication",
  "language": "go_test.go",
  "prompt": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        res_tup = append(res_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return res_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpy2mqc9lz_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpy2mqc9lz_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Tuples are not of equal length\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpes49a7p6_test.go:16 +0x25f\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpes49a7p6_test.go:28 +0x4c2\ntesting.tRunner(0xc000001380, 0x550228)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp32voqyiv_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp32voqyiv_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpj0r6p2kq_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpj0r6p2kq_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp32voqyiv_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp32voqyiv_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        new_tup = append(new_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return new_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmppok59h7x_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmppok59h7x_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var tup []interface{}\n    for i, _ := range test_tup1 {\n        tup = append(tup, test_tup1[i] * test_tup2[i])\n    }\n    return tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl53rqub1_test.go:12:40: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioi8m2w9_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) * test_tup1[i].(int))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_bbvjb19_test.go:12 +0x2af\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp_bbvjb19_test.go:28 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Error: Tuples are not of same length\")\n        return result_tup\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp9e9mcorr_test.go:43: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp9e9mcorr_test.go:43: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp9e9mcorr_test.go:43: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i] * test_tup2[i])\n    }\n    return tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqk5gdtji_test.go:12:40: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpkbtu_m59_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpkbtu_m59_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            default:\n                return nil\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(float64) * float64(test_tup2[i].(int)))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            default:\n                return nil\n            }\n        default:\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpko94j7ad_test.go:54: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpko94j7ad_test.go:54: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpko94j7ad_test.go:54: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpkbtu_m59_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpkbtu_m59_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "Unsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\nUnsupported type\n--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp97pnkybe_test.go:41: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp97pnkybe_test.go:41: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp97pnkybe_test.go:41: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmptyr7ya50_test.go:40: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmptyr7ya50_test.go:40: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmptyr7ya50_test.go:40: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "Invalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\n--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp086pln5a_test.go:41: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp086pln5a_test.go:41: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp086pln5a_test.go:41: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpkbtu_m59_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpkbtu_m59_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpj0r6p2kq_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpj0r6p2kq_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp32voqyiv_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp32voqyiv_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float32:\n            result = append(result, test_tup1[i].(float32) * test_tup2[i].(float32))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp169c274z_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp169c274z_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp169c274z_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioi8m2w9_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioi8m2w9_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i] * test_tup2[i])\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo7wdc5b__test.go:12:54: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Tuples are not of same length\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(string))\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(string))\n            }\n        case string:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(string))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgxpl68m7_test.go:22:60: invalid operation: test_tup1[i].(int) * test_tup2[i].(float64) (mismatched types int and float64)\n/tmp/tmpgxpl68m7_test.go:24:60: invalid operation: test_tup1[i].(int) * test_tup2[i].(string) (mismatched types int and string)\n/tmp/tmpgxpl68m7_test.go:29:64: invalid operation: test_tup1[i].(float64) * test_tup2[i].(int) (mismatched types float64 and int)\n/tmp/tmpgxpl68m7_test.go:33:64: invalid operation: test_tup1[i].(float64) * test_tup2[i].(string) (mismatched types float64 and string)\n/tmp/tmpgxpl68m7_test.go:38:63: invalid operation: test_tup1[i].(string) * test_tup2[i].(int) (mismatched types string and int)\n/tmp/tmpgxpl68m7_test.go:40:63: invalid operation: test_tup1[i].(string) * test_tup2[i].(float64) (mismatched types string and float64)\n/tmp/tmpgxpl68m7_test.go:42:63: invalid operation: test_tup1[i].(string) * test_tup2[i].(string) (operator * not defined on string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioi8m2w9_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        } else {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "Invalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\n--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp2w2ku5rl_test.go:45: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp2w2ku5rl_test.go:45: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp2w2ku5rl_test.go:45: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp0dsv1b1k_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp0dsv1b1k_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpj0r6p2kq_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpj0r6p2kq_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            }\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp0y7fczik_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        default:\n            return nil\n        }\n    }\n\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpgu7kvs08_test.go:44: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpgu7kvs08_test.go:44: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpgu7kvs08_test.go:44: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, v := range test_tup1 {\n        result = append(result, v.(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp81usnew5_test.go:12 +0x20f\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp81usnew5_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gvoc1ld_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123425,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpxgw1pz58_test.go:44: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpxgw1pz58_test.go:44: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpxgw1pz58_test.go:44: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp9ki4m5p3_test.go:37: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpwvsgqu93_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpwvsgqu93_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioi8m2w9_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i] * test_tup2[i])\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp61g_zxmu_test.go:12:54: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp32voqyiv_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp32voqyiv_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"The length of two tuples are not equal.\")\n        return nil\n    }\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123425,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp6nqd841x_test.go:16 +0x25f\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmp6nqd841x_test.go:28 +0x4c2\ntesting.tRunner(0xc000186300, 0x550230)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp1kpk9qam_test.go:37: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpw36brtm0_test.go:39: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123424,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000124240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpe9bta1nx_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102480)\n\t/tmp/tmpe9bta1nx_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102480, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpx61plncc_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpx61plncc_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}