{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "go_test.go",
  "prompt": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums) - i - 1; j++ {\n            if nums[j] > nums[j + 1] {\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n            }\n        }\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        nums[i] = atoi(num_str)\n    }\n    return sort_nums(nums)\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := []int{}\n    for _, num_str := range nums_str {\n        num, err := strconv.Atoi(num_str)\n        if err != nil {\n            panic(err)\n        }\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    return nums\n}\n",
    "    nums := make([]int, len(nums_str))\n    for i, num_str := range nums_str {\n        fmt.Sscanf(num_str, \"%d\", &nums[i])\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n    return nums\n}\n",
    "    var nums []int\n    for _, num_str := range nums_str {\n        num, _ := strconv.Atoi(num_str)\n        nums = append(nums, num)\n    }\n    sort.Ints(nums)\n    return nums\n}\n"
  ]
}