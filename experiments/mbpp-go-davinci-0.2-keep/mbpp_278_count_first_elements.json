{
  "name": "mbpp_278_count_first_elements",
  "language": "go_test.go",
  "prompt": "package count_first_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the number of elements that occurs before the tuple element in the given tuple.\nfunc count_first_elements(test_tup []interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_First_Elements(t *testing.T) {\n  candidate := count_first_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: 3 },\n     { actual: candidate([]interface{}{2, 9, []interface{}{5, 7}, 11}), expected: 2 },\n     { actual: candidate([]interface{}{11, 15, 5, 8, []interface{}{2, 3}, 8}), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int\n    for _, elem := range test_tup {\n        if elem == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            return count\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, val := range test_tup {\n        if val == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            return count\n        }\n        count++\n    }\n    return count\n}\n",
    "    var count int\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if _, ok := v.(int); ok {\n            count++\n        } else {\n            break\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    var count int = 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, element := range test_tup {\n        if element == \"tuple\" {\n            break\n        }\n        count += 1\n    }\n    return count\n}\n",
    "    count := 0\n    for _, element := range test_tup {\n        if element == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    var count int\n    for _, val := range test_tup {\n        if val == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, elem := range test_tup {\n        if elem == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    count := 0\n    for _, element := range test_tup {\n        if element == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n",
    "    var count int = 0\n    for _, v := range test_tup {\n        switch v.(type) {\n        case int:\n            count++\n        case string:\n            count++\n        case float64:\n            count++\n        case bool:\n            count++\n        default:\n            return count\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range test_tup {\n        if v == \"tuple\" {\n            break\n        }\n        count++\n    }\n    return count\n}\n"
  ]
}