{
  "name": "mbpp_440_find_adverb_position",
  "language": "go_test.go",
  "prompt": "package find_adverb_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the first adverb and their positions in a given sentence.\nfunc find_adverb_position(text string) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Adverb_Position(t *testing.T) {\n  candidate := find_adverb_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"clearly!! we can see the sky\"), expected: []interface{}{0, 7, \"clearly\"} },\n     { actual: candidate(\"seriously!! there are many roses\"), expected: []interface{}{0, 9, \"seriously\"} },\n     { actual: candidate(\"unfortunately!! sita is going to home\"), expected: []interface{}{0, 13, \"unfortunately\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    var adverb_list = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\", \"sweetly\", \"happily\", \"merrily\", \"jovially\", \"joyfully\", \"jubilantly\", \"cheerfully\", \"contentedly\", \"delightedly\", \"smilingly\", \"smugly\", \"impressively\", \"eloquently\", \"flamboyantly\", \"colorfully\", \"eloquently\", \"vivaciously\", \"animatedly\", \"ebulliently\", \"spiritedly\", \"playfully\", \"lively\", \"energetically\", \"briskly\", \"vigorously\", \"thoroughly\", \"completely\", \"totally\", \"utterly\", \"absolutely\", \"positively\", \"decidedly\", \"emphatically\", \"outright\", \"surely\", \"certainly\", \"unequivocally\", \"definitely\", \"indisputably\", \"undeniably\", \"unquestionably\", \"unarguably\", \"plainly\", \"simply\", \"evidently\", \"obviously\", \"clearly\", \"plainly\", \"apparently\", \"plainly\", \"blatantly\", \"patently\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"undoubtedly\", \"",
    "    var adverbs []interface{}\n    for i, word := range text {\n        if word == \"quickly\" {\n            adverbs = append(adverbs, i, word)\n        }\n    }\n    return adverbs\n}\n",
    "    var result []interface{}\n    var adverb_position int\n    var adverb string\n    for i, word := range text {\n        if word == ' ' {\n            adverb_position = i\n            adverb = text[:i]\n            result = append(result, adverb_position)\n            result = append(result, adverb)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb_position int\n    var adverb_length int\n    var adverb_found bool\n\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            adverb_position = i\n            adverb_length = 0\n            adverb_found = false\n        } else if text[i] == 'l' && text[i+1] == 'y' {\n            adverb_length = 2\n            adverb_found = true\n        } else if text[i] == 'l' && text[i+1] == 'i' && text[i+2] == 'e' {\n            adverb_length = 3\n            adverb_found = true\n        } else if text[i] == 'l' && text[i+1] == 'y' && text[i+2] == 'i' && text[i+3] == 'e' {\n            adverb_length = 4\n            adverb_found = true\n        } else if text[i] == 'l' && text[i+1] == 'y' && text[i+2] == 'i' && text[i+3] == 'e' && text[i+4] == 'r' {\n            adverb_length = 5\n            adverb_found = true\n        } else if text[i] == 'l' && text[i+1] == 'y' && text[i+2] == 'i' && text[i+3] == 'e' && text[i+4] == 's' && text[i+5] == 't' {\n            adverb_length = 6\n            adverb_found = true\n        } else if text[i] == 'l' && text[i+1] == 'y' && text[i+2] == 'i' && text[i+3] == 'e' && text[i+4] == 's' && text[i+5] == 't' && text[i+6] == 'l' && text[i+7] == 'y' {\n            adverb_length = 8\n            adverb_found = true\n        }\n\n        if ad",
    "    // your code here\n    return nil\n}\n",
    "    var result []interface{}\n    var adverb_list = []string{\"quickly\", \"slowly\", \"rudely\", \"politely\"}\n    for _, adverb := range adverb_list {\n        if index := string.Index(text, adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var adverbs []string\n    var positions []int\n    var result []interface{}\n    var words []string\n    var word string\n    var last_char string\n    var last_char_is_letter bool\n    var word_is_adverb bool\n    var word_is_adjective bool\n    var word_is_verb bool\n    var word_is_noun bool\n    var word_is_adverb_or_adjective bool\n    var word_is_verb_or_noun bool\n    var word_is_adverb_or_adjective_or_verb_or_noun bool\n    var word_is_adverb_or_adjective_and_verb_or_noun bool\n    var word_is_adverb_or_adjective_and_not_verb_or_noun bool\n    var word_is_not_adverb_or_adjective_and_verb_or_noun bool\n    var word_is_not_adverb_or_adjective_and_not_verb_or_noun bool\n    var word_is_not_adverb_or_adjective_or_verb_or_noun bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_noun bool\n    var word_is_not_adverb_or_adjective_or_verb_or_not_noun bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_not_noun bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_not_noun_or_adverb bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_not_noun_or_adjective bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_not_noun_or_verb bool\n    var word_is_not_adverb_or_adjective_or_not_verb_or_not_noun_or_noun",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"carefully\", \"sadly\", \"happily\", \"joyfully\", \"angrily\", \"foolishly\"}\n    for _, adverb := range adverbs {\n        if position := string.Index(text, adverb); position != -1 {\n            result = append(result, adverb, position)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"softly\", \"noisily\"}\n    for _, adverb := range adverbs {\n        if index := strings.Index(text, adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, word := range text {\n        if word == ' ' {\n            continue\n        }\n        if word == 'l' {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb string\n    var position int\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            continue\n        }\n        if text[i] == 'l' && text[i+1] == 'y' {\n            adverb = \"ly\"\n            position = i\n            result = append(result, adverb, position)\n            return result\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, word := range text {\n        if word == ' ' {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb string\n    var position int\n    var found bool\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            continue\n        }\n        if text[i] == 'l' {\n            if i + 3 < len(text) && text[i + 1] == 'y' && text[i + 2] == ' ' {\n                adverb = \"ly\"\n                position = i\n                found = true\n                break\n            }\n        }\n    }\n    if found {\n        result = append(result, adverb, position)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"elegantly\", \"noisily\"}\n    for i := 0; i < len(adverbs); i++ {\n        if index := strings.Index(text, adverbs[i]); index != -1 {\n            result = append(result, adverbs[i], index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"elegantly\", \"noisily\"}\n    for _, adverb := range adverbs {\n        if index := text.Index(adverb); index != -1 {\n            result = append(result, adverb, index)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, word := range text {\n        if word == ' ' {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n",
    "    var adverbs []interface{}\n    var adverb string\n    var position int\n    var found bool\n\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            continue\n        }\n\n        if text[i] == 'l' {\n            if i + 3 < len(text) && text[i + 1] == 'y' && text[i + 2] == ' ' {\n                adverb = text[i:i + 3]\n                position = i\n                found = true\n            }\n        }\n\n        if text[i] == 'w' {\n            if i + 3 < len(text) && text[i + 1] == 'e' && text[i + 2] == 'l' && text[i + 3] == 'l' {\n                adverb = text[i:i + 4]\n                position = i\n                found = true\n            }\n        }\n\n        if found {\n            adverbs = append(adverbs, adverb, position)\n            found = false\n        }\n    }\n\n    return adverbs\n}\n",
    "    var result []interface{}\n    for i, word := range text {\n        if word == ' ' {\n            continue\n        }\n        if word == 'l' {\n            result = append(result, i)\n            result = append(result, \"ly\")\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverbs = []string{\"quickly\", \"slowly\", \"calmly\", \"passionately\", \"excitedly\"}\n    for _, adverb := range adverbs {\n        if idx := strings.Index(text, adverb); idx != -1 {\n            result = append(result, adverb, idx)\n            break\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    var adverb_position int\n    var adverb_length int\n    var adverb_found bool\n    var adverb_index int\n    var adverb_word string\n    var adverb_word_length int\n    var adverb_word_index int\n    var adverb_word_found bool\n    var adverb_word_position int\n    var adverb_word_length_index int\n    var adverb_word_length_found bool\n    var adverb_word_length_position int\n    var adverb_word_length_length int\n    var adverb_word_length_word string\n    var adverb_word_length_word_length int\n    var adverb_word_length_word_index int\n    var adverb_word_length_word_found bool\n    var adverb_word_length_word_position int\n    var adverb_word_length_word_length_index int\n    var adverb_word_length_word_length_found bool\n    var adverb_word_length_word_length_position int\n    var adverb_word_length_word_length_length int\n    var adverb_word_length_word_length_word string\n    var adverb_word_length_word_length_word_length int\n    var adverb_word_length_word_length_word_index int\n    var adverb_word_length_word_length_word_found bool\n    var adverb_word_length_word_length_word_position int\n    var adverb_word_length_word_length_word_length_index int\n    var adverb_word_length_word_length_word_length_found bool\n    var adverb_word_length_word_length_word_length_position int\n    var adverb_word_length_word_length_word_length_length int\n    var adverb_word_length_word_length_word_length_word string\n    var adverb_word_length_word_length_word_length_word_length int\n    var adverb_word_length_word_length_word_length_word_index int\n    var adverb_word_length_word_"
  ]
}