{
  "name": "mbpp_554_Split",
  "language": "go_test.go",
  "prompt": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 == 1 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v%2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v%2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            oddList = append(oddList, v)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            oddList = append(oddList, v)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            oddList = append(oddList, i)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            oddList = append(oddList, v)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v%2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v%2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v%2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i%2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odds []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odds = append(odds, v)\n        }\n    }\n    return odds\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i%2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i%2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 == 1 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            oddList = append(oddList, v)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            oddList = append(oddList, v)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i%2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var oddList []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            oddList = append(oddList, i)\n        }\n    }\n    return oddList\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var result []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, num := range list {\n        if num % 2 != 0 {\n            odd = append(odd, num)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    odd_list := make([]int, 0)\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd_list = append(odd_list, i)\n        }\n    }\n    return odd_list\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, value := range list {\n        if value % 2 != 0 {\n            odd = append(odd, value)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, x := range list {\n        if x % 2 != 0 {\n            odd = append(odd, x)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123073,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 == 1 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, v := range list {\n        if v % 2 != 0 {\n            odd = append(odd, v)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n    var odd []int\n    for _, i := range list {\n        if i % 2 != 0 {\n            odd = append(odd, i)\n        }\n    }\n    return odd\n}\n\nfunc TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510248,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}