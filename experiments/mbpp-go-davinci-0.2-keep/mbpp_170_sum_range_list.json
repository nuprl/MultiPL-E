{
  "name": "mbpp_170_sum_range_list",
  "language": "go_test.go",
  "prompt": "package sum_range_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of numbers in a list within a range specified by two indices.\nfunc sum_range_list(list1 []int, m int, n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSum_Range_List(t *testing.T) {\n  candidate := sum_range_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), expected: 29 },\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), expected: 16 },\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), expected: 38 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := m; i <= n; i++ {\n        sum += list1[i]\n    }\n    return sum\n}\n"
  ]
}