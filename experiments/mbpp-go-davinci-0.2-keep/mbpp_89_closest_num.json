{
  "name": "mbpp_89_closest_num",
  "language": "go_test.go",
  "prompt": "package closest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the closest smaller number than n.\nfunc closest_num(N int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestClosest_Num(t *testing.T) {\n  candidate := closest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(11), expected: 10 },\n     { actual: candidate(7), expected: 6 },\n     { actual: candidate(12), expected: 11 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // find the first 1 from right to left\n    var index int\n    for index = 0; index < 32; index++ {\n        if (N & (1 << index)) != 0 {\n            break\n        }\n    }\n    if index == 32 {\n        return -1\n    }\n    // flip the bit at index\n    N = N ^ (1 << index)\n    // set the bit at index - 1\n    N = N | (1 << (index - 1))\n    // clear all bits to the right of index - 1\n    N = N & ((1 << (index - 1)) - 1)\n    return N\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiiii int\n    var jjjjj int\n    var kkkkk int\n    var lllll int\n    var mmmmm int\n    var nnnnn int\n    var ooooo int\n    var ppppp int\n    var qqqqq int\n    var rrrrr int\n    var sssss int\n",
    "    if N <= 0 {\n        return 0\n    }\n\n    var i int\n    for i = N - 1; i > 0; i-- {\n        if (i & (i + 1)) == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    if N <= 0 {\n        return 0\n    }\n    var i, j int\n    for i = 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            break\n        }\n    }\n    if i == 0 {\n        return 0\n    }\n    for j = i - 1; j >= 0; j-- {\n        if (N & (1 << j)) == 0 {\n            break\n        }\n    }\n    N = N & ((1 << j) - 1)\n    N = N | (1 << j)\n    N = N | ((1 << (i - j - 1)) - 1)\n    return N\n}\n",
    "    if N < 0 {\n        return -1\n    }\n    if N == 0 {\n        return 0\n    }\n    if N == 1 {\n        return 0\n    }\n\n    var count int = 0\n    var result int = 0\n    for i := 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            count++\n        }\n        if (N & (1 << i)) == 0 && count == 1 {\n            result = N | (1 << i)\n            break\n        }\n    }\n    return result\n}\n",
    "    var i int\n    for i = N-1; i > 0; i-- {\n        if i & N == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    if N == 0 {\n        return 0\n    }\n\n    var i uint\n    for i = 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            break\n        }\n    }\n\n    if i == 0 {\n        return 0\n    }\n\n    return N & ^(1 << i)\n}\n",
    "    var i, j int\n    var n int\n    n = N\n    for i = 0; i < 32; i++ {\n        if (n & (1 << i)) != 0 {\n            break\n        }\n    }\n    for j = i + 1; j < 32; j++ {\n        if (n & (1 << j)) == 0 {\n            break\n        }\n    }\n    n = n & ((1 << i) - 1)\n    n = n | (1 << j)\n    n = n | ((1 << (j - 1)) - 1)\n    return n\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < 32; i++ {\n        if N & (1 << i) != 0 {\n            break\n        }\n    }\n    if i == 32 {\n        return 0\n    }\n    return N & ((1 << i) - 1)\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n\n    i = N & 0x55555555\n    j = N & 0xAAAAAAAA\n    k = i | (j >> 1)\n    l = N & 0x33333333\n    m = N & 0xCCCCCCCC\n    n = l | (m >> 2)\n    o = k & n\n    p = N & 0x0F0F0F0F\n    q = N & 0xF0F0F0F0\n    r = p | (q >> 4)\n    s = o & r\n    t = N & 0x00FF00FF\n    u = N & 0xFF00FF00\n    v = t | (u >> 8)\n    w = s & v\n    x = N & 0x0000FFFF\n    y = N & 0xFFFF0000\n    z = x | (y >> 16)\n\n    return w & z\n}\n",
    "    if N <= 0 {\n        return 0\n    }\n    var i int = 1\n    var j int = 1\n    var k int = 1\n    var n int = N\n    var count int = 0\n    for n > 0 {\n        if n & 1 == 1 {\n            count++\n        }\n        n >>= 1\n    }\n    for i < count {\n        j <<= 1\n        i++\n    }\n    for j > 0 {\n        if N & j == 0 {\n            N |= j\n            break\n        }\n        j >>= 1\n    }\n    for k < count {\n        N &= ^(1 << k)\n        k++\n    }\n    return N\n}\n",
    "    // convert N to binary\n    var binary_N string\n    for N > 0 {\n        binary_N = fmt.Sprintf(\"%d%s\", N % 2, binary_N)\n        N /= 2\n    }\n    fmt.Println(binary_N)\n\n    // find the first 1\n    var first_one int\n    for i := 0; i < len(binary_N); i++ {\n        if binary_N[i] == '1' {\n            first_one = i\n            break\n        }\n    }\n    fmt.Println(first_one)\n\n    // find the first 0 after the first 1\n    var first_zero int\n    for i := first_one + 1; i < len(binary_N); i++ {\n        if binary_N[i] == '0' {\n            first_zero = i\n            break\n        }\n    }\n    fmt.Println(first_zero)\n\n    // swap the first 1 and the first 0\n    var new_binary_N string\n    for i := 0; i < len(binary_N); i++ {\n        if i == first_one {\n            new_binary_N += \"0\"\n        } else if i == first_zero {\n            new_binary_N += \"1\"\n        } else {\n            new_binary_N += string(binary_N[i])\n        }\n    }\n    fmt.Println(new_binary_N)\n\n    // convert new_binary_N to decimal\n    var new_N int\n    for i := 0; i < len(new_binary_N); i++ {\n        if new_binary_N[i] == '1' {\n            new_N += 1 << uint(len(new_binary_N) - i - 1)\n        }\n    }\n    fmt.Println(new_N)\n\n    return new_N\n}\n",
    "    var i int\n    for i = N - 1; i > 0; i-- {\n        if (N & i) == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Find the first bit that is 1\n    var i uint\n    for i = 0; i < 32; i++ {\n        if N & (1 << i) != 0 {\n            break\n        }\n    }\n    // If the first bit is 1, then the closest number is N - 2^i\n    if i > 0 {\n        return N - (1 << i)\n    }\n    // If the first bit is 0, then the closest number is N + 2^i\n    return N + (1 << i)\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < 32; i++ {\n        if (N & (1 << uint(i))) != 0 {\n            break\n        }\n    }\n    if i == 32 {\n        return 0\n    }\n    if i == 0 {\n        return N - 1\n    }\n    return N - (1 << uint(i))\n}\n",
    "    var i int\n    for i = N - 1; i > 0; i-- {\n        if i & N == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    // find the first bit that is 1\n    i := 0\n    for N & (1 << i) == 0 {\n        i++\n    }\n    // flip the first bit that is 1\n    N = N & ^(1 << i)\n    // set the bit that is 0 to 1\n    N = N | (1 << (i - 1))\n    return N\n}\n",
    "    if N <= 0 {\n        return 0\n    }\n    if N == 1 {\n        return 0\n    }\n    if N == 2 {\n        return 1\n    }\n    if N == 3 {\n        return 2\n    }\n    if N == 4 {\n        return 3\n    }\n    if N == 5 {\n        return 4\n    }\n    if N == 6 {\n        return 5\n    }\n    if N == 7 {\n        return 6\n    }\n    if N == 8 {\n        return 7\n    }\n    if N == 9 {\n        return 8\n    }\n    if N == 10 {\n        return 9\n    }\n    if N == 11 {\n        return 10\n    }\n    if N == 12 {\n        return 11\n    }\n    if N == 13 {\n        return 12\n    }\n    if N == 14 {\n        return 13\n    }\n    if N == 15 {\n        return 14\n    }\n    if N == 16 {\n        return 15\n    }\n    if N == 17 {\n        return 16\n    }\n    if N == 18 {\n        return 17\n    }\n    if N == 19 {\n        return 18\n    }\n    if N == 20 {\n        return 19\n    }\n    if N == 21 {\n        return 20\n    }\n    if N == 22 {\n        return 21\n    }\n    if N == 23 {\n        return 22\n    }\n    if N == 24 {\n        return 23\n    }\n    if N == 25 {\n        return 24\n    }\n    if N == 26 {\n        return 25\n    }\n    if N == 27 {\n        return 26\n    }\n    if N == 28 {\n        return 27\n    }\n    if N == 29 {\n        return 28\n    }\n    if N == 30 {\n        return 29\n    }\n    if N == 31 {\n        return 30\n    }\n    if N == 32 {\n        return 31\n    }\n    if N == 33 {\n        return 32\n    }\n    if N == 34 {\n        return 33\n    }\n    if N == 35 {\n        return 34\n    }\n    if N == 36 {\n",
    "    var i int\n    for i = N; i > 0; i-- {\n        if i & (i-1) == 0 {\n            return i\n        }\n    }\n    return i\n}\n",
    "    if N <= 0 {\n        return 0\n    }\n\n    var (\n        num = N\n        count = 0\n    )\n\n    for num > 0 {\n        if num & 1 == 1 {\n            count++\n        }\n        num >>= 1\n    }\n\n    if count == 1 {\n        return N - 1\n    }\n\n    return N - 1 - (1 << uint(count - 1))\n}\n"
  ]
}