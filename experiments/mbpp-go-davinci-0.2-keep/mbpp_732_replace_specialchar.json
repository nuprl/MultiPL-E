{
  "name": "mbpp_732_replace_specialchar",
  "language": "go_test.go",
  "prompt": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return replace_specialchar_regexp(text)\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return replace_specialchar_regexp(text)\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        switch c {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var new_text string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            new_text += \":\"\n        } else {\n            new_text += string(char)\n        }\n    }\n    return new_text\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        switch c {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, c := range text {\n        switch c {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n",
    "    return \"\"\n}\n",
    "    return \"\"\n}\n"
  ]
}